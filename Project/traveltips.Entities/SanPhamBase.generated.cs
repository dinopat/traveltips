
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SanPham.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace traveltips.Entities
{
	///<summary>
	/// An object representation of the 'tbl_SanPham' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class SanPhamBase : EntityBase, traveltips.Entities.ISanPham, IEntityId<SanPhamKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SanPhamEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SanPhamEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SanPhamEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SanPham> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event SanPhamEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SanPhamEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SanPhamBase"/> instance.
		///</summary>
		public SanPhamBase()
		{
			this.entityData = new SanPhamEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SanPhamBase"/> instance.
		///</summary>
		///<param name="idSanPham"></param>
		///<param name="idCongTy"></param>
		///<param name="idLoaiSp"></param>
		///<param name="idTuDien">MaSP, TenSP duoc lay tu bang Tu Dien</param>
		///<param name="tenSp"></param>
		///<param name="maSp"></param>
		///<param name="gia"></param>
		///<param name="moTaNgan"></param>
		///<param name="moTaChiTiet"></param>
		///<param name="anhMinhHoa"></param>
		///<param name="flag"></param>
		public SanPhamBase(System.Int64 idSanPham, System.Int64? idCongTy, System.Int64? idLoaiSp, 
			System.Int64? idTuDien, System.String tenSp, System.String maSp, System.Decimal? gia, 
			System.String moTaNgan, System.String moTaChiTiet, System.Byte[] anhMinhHoa, System.Byte? flag)
		{
			this.entityData = new SanPhamEntityData();
			this.backupData = null;

			this.IdSanPham = idSanPham;
			this.IdCongTy = idCongTy;
			this.IdLoaiSp = idLoaiSp;
			this.IdTuDien = idTuDien;
			this.TenSp = tenSp;
			this.MaSp = maSp;
			this.Gia = gia;
			this.MoTaNgan = moTaNgan;
			this.MoTaChiTiet = moTaChiTiet;
			this.AnhMinhHoa = anhMinhHoa;
			this.Flag = flag;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SanPham"/> instance.
		///</summary>
		///<param name="idSanPham"></param>
		///<param name="idCongTy"></param>
		///<param name="idLoaiSp"></param>
		///<param name="idTuDien">MaSP, TenSP duoc lay tu bang Tu Dien</param>
		///<param name="tenSp"></param>
		///<param name="maSp"></param>
		///<param name="gia"></param>
		///<param name="moTaNgan"></param>
		///<param name="moTaChiTiet"></param>
		///<param name="anhMinhHoa"></param>
		///<param name="flag"></param>
		public static SanPham CreateSanPham(System.Int64 idSanPham, System.Int64? idCongTy, System.Int64? idLoaiSp, 
			System.Int64? idTuDien, System.String tenSp, System.String maSp, System.Decimal? gia, 
			System.String moTaNgan, System.String moTaChiTiet, System.Byte[] anhMinhHoa, System.Byte? flag)
		{
			SanPham newSanPham = new SanPham();
			newSanPham.IdSanPham = idSanPham;
			newSanPham.IdCongTy = idCongTy;
			newSanPham.IdLoaiSp = idLoaiSp;
			newSanPham.IdTuDien = idTuDien;
			newSanPham.TenSp = tenSp;
			newSanPham.MaSp = maSp;
			newSanPham.Gia = gia;
			newSanPham.MoTaNgan = moTaNgan;
			newSanPham.MoTaChiTiet = moTaChiTiet;
			newSanPham.AnhMinhHoa = anhMinhHoa;
			newSanPham.Flag = flag;
			return newSanPham;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the IdSanPham property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Int64 IdSanPham
		{
			get
			{
				return this.entityData.IdSanPham; 
			}
			
			set
			{
				if (this.entityData.IdSanPham == value)
					return;
					
				OnColumnChanging(SanPhamColumn.IdSanPham, this.entityData.IdSanPham);
				this.entityData.IdSanPham = value;
				this.EntityId.IdSanPham = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SanPhamColumn.IdSanPham, this.entityData.IdSanPham);
				OnPropertyChanged("IdSanPham");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the id_SanPham property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the id_SanPham property.</remarks>
		/// <value>This type is bigint</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Int64 OriginalIdSanPham
		{
			get { return this.entityData.OriginalIdSanPham; }
			set { this.entityData.OriginalIdSanPham = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the IdCongTy property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsIdCongTyNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? IdCongTy
		{
			get
			{
				return this.entityData.IdCongTy; 
			}
			
			set
			{
				if (this.entityData.IdCongTy == value)
					return;
					
				OnColumnChanging(SanPhamColumn.IdCongTy, this.entityData.IdCongTy);
				this.entityData.IdCongTy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SanPhamColumn.IdCongTy, this.entityData.IdCongTy);
				OnPropertyChanged("IdCongTy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IdLoaiSp property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsIdLoaiSpNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? IdLoaiSp
		{
			get
			{
				return this.entityData.IdLoaiSp; 
			}
			
			set
			{
				if (this.entityData.IdLoaiSp == value)
					return;
					
				OnColumnChanging(SanPhamColumn.IdLoaiSp, this.entityData.IdLoaiSp);
				this.entityData.IdLoaiSp = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SanPhamColumn.IdLoaiSp, this.entityData.IdLoaiSp);
				OnPropertyChanged("IdLoaiSp");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IdTuDien property. 
		///		MaSP, TenSP duoc lay tu bang Tu Dien
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsIdTuDienNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("MaSP, TenSP duoc lay tu bang Tu Dien"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? IdTuDien
		{
			get
			{
				return this.entityData.IdTuDien; 
			}
			
			set
			{
				if (this.entityData.IdTuDien == value)
					return;
					
				OnColumnChanging(SanPhamColumn.IdTuDien, this.entityData.IdTuDien);
				this.entityData.IdTuDien = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SanPhamColumn.IdTuDien, this.entityData.IdTuDien);
				OnPropertyChanged("IdTuDien");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TenSp property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String TenSp
		{
			get
			{
				return this.entityData.TenSp; 
			}
			
			set
			{
				if (this.entityData.TenSp == value)
					return;
					
				OnColumnChanging(SanPhamColumn.TenSp, this.entityData.TenSp);
				this.entityData.TenSp = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SanPhamColumn.TenSp, this.entityData.TenSp);
				OnPropertyChanged("TenSp");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaSp property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String MaSp
		{
			get
			{
				return this.entityData.MaSp; 
			}
			
			set
			{
				if (this.entityData.MaSp == value)
					return;
					
				OnColumnChanging(SanPhamColumn.MaSp, this.entityData.MaSp);
				this.entityData.MaSp = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SanPhamColumn.MaSp, this.entityData.MaSp);
				OnPropertyChanged("MaSp");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Gia property. 
		///		
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0. It is up to the developer
		/// to check the value of IsGiaNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Gia
		{
			get
			{
				return this.entityData.Gia; 
			}
			
			set
			{
				if (this.entityData.Gia == value)
					return;
					
				OnColumnChanging(SanPhamColumn.Gia, this.entityData.Gia);
				this.entityData.Gia = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SanPhamColumn.Gia, this.entityData.Gia);
				OnPropertyChanged("Gia");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MoTaNgan property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String MoTaNgan
		{
			get
			{
				return this.entityData.MoTaNgan; 
			}
			
			set
			{
				if (this.entityData.MoTaNgan == value)
					return;
					
				OnColumnChanging(SanPhamColumn.MoTaNgan, this.entityData.MoTaNgan);
				this.entityData.MoTaNgan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SanPhamColumn.MoTaNgan, this.entityData.MoTaNgan);
				OnPropertyChanged("MoTaNgan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MoTaChiTiet property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String MoTaChiTiet
		{
			get
			{
				return this.entityData.MoTaChiTiet; 
			}
			
			set
			{
				if (this.entityData.MoTaChiTiet == value)
					return;
					
				OnColumnChanging(SanPhamColumn.MoTaChiTiet, this.entityData.MoTaChiTiet);
				this.entityData.MoTaChiTiet = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SanPhamColumn.MoTaChiTiet, this.entityData.MoTaChiTiet);
				OnPropertyChanged("MoTaChiTiet");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AnhMinhHoa property. 
		///		
		/// </summary>
		/// <value>This type is varbinary.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Byte[] AnhMinhHoa
		{
			get
			{
				return this.entityData.AnhMinhHoa; 
			}
			
			set
			{
				if (this.entityData.AnhMinhHoa == value)
					return;
					
				OnColumnChanging(SanPhamColumn.AnhMinhHoa, this.entityData.AnhMinhHoa);
				this.entityData.AnhMinhHoa = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SanPhamColumn.AnhMinhHoa, this.entityData.AnhMinhHoa);
				OnPropertyChanged("AnhMinhHoa");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Flag property. 
		///		
		/// </summary>
		/// <value>This type is tinyint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (byte)0. It is up to the developer
		/// to check the value of IsFlagNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public override System.Byte? Flag
		{
			get
			{
				return this.entityData.Flag; 
			}
			
			set
			{
				if (this.entityData.Flag == value)
					return;
					
				OnColumnChanging(SanPhamColumn.Flag, this.entityData.Flag);
				this.entityData.Flag = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SanPhamColumn.Flag, this.entityData.Flag);
				OnPropertyChanged("Flag");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="CongTy"/>.
		/// </summary>
		/// <value>The source CongTy for IdSanPham.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual CongTy IdSanPhamSource
      	{
            get { return entityData.IdSanPhamSource; }
            set { entityData.IdSanPhamSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="LoaiSp"/>.
		/// </summary>
		/// <value>The source LoaiSp for IdLoaiSp.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual LoaiSp IdLoaiSpSource
      	{
            get { return entityData.IdLoaiSpSource; }
            set { entityData.IdLoaiSpSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of ThuocTinhSanPham objects
		///	which are related to this object through the relation FK_tbl_ThuocTinhSanPham_tbl_SanPham
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ThuocTinhSanPham> ThuocTinhSanPhamCollection
		{
			get { return entityData.ThuocTinhSanPhamCollection; }
			set { entityData.ThuocTinhSanPhamCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("TenSp", "Ten Sp", 255));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("MaSp", "Ma Sp", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("MoTaNgan", "Mo Ta Ngan", 255));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "tbl_SanPham"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"id_SanPham", "id_CongTy", "id_LoaiSP", "id_TuDien", "TenSP", "MaSP", "Gia", "MoTaNgan", "MoTaChiTiet", "AnhMinhHoa", "Flag"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SanPhamEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SanPham) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SanPham>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SanPham);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SanPham Entity 
		///</summary>
		public virtual SanPham Copy()
		{
			//shallow copy entity
			SanPham copy = new SanPham();
			copy.SuppressEntityEvents = true;
			copy.IdSanPham = this.IdSanPham;
			copy.OriginalIdSanPham = this.OriginalIdSanPham;
			copy.IdCongTy = this.IdCongTy;
			copy.IdLoaiSp = this.IdLoaiSp;
			copy.IdTuDien = this.IdTuDien;
			copy.TenSp = this.TenSp;
			copy.MaSp = this.MaSp;
			copy.Gia = this.Gia;
			copy.MoTaNgan = this.MoTaNgan;
			copy.MoTaChiTiet = this.MoTaChiTiet;
			copy.AnhMinhHoa = this.AnhMinhHoa;
			copy.Flag = this.Flag;
			
			copy.IdSanPhamSource = MakeCopyOf(this.IdSanPhamSource) as CongTy;
			copy.IdLoaiSpSource = MakeCopyOf(this.IdLoaiSpSource) as LoaiSp;
		
			//deep copy nested objects
			copy.ThuocTinhSanPhamCollection = (TList<ThuocTinhSanPham>) MakeCopyOf(this.ThuocTinhSanPhamCollection); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed SanPham Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SanPham DeepCopy()
		{
			return EntityHelper.Clone<SanPham>(this as SanPham);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SanPhamEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SanPhamEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SanPhamColumn column)
		{
			switch(column)
			{
					case SanPhamColumn.IdSanPham:
					return entityData.IdSanPham != _originalData.IdSanPham;
					case SanPhamColumn.IdCongTy:
					return entityData.IdCongTy != _originalData.IdCongTy;
					case SanPhamColumn.IdLoaiSp:
					return entityData.IdLoaiSp != _originalData.IdLoaiSp;
					case SanPhamColumn.IdTuDien:
					return entityData.IdTuDien != _originalData.IdTuDien;
					case SanPhamColumn.TenSp:
					return entityData.TenSp != _originalData.TenSp;
					case SanPhamColumn.MaSp:
					return entityData.MaSp != _originalData.MaSp;
					case SanPhamColumn.Gia:
					return entityData.Gia != _originalData.Gia;
					case SanPhamColumn.MoTaNgan:
					return entityData.MoTaNgan != _originalData.MoTaNgan;
					case SanPhamColumn.MoTaChiTiet:
					return entityData.MoTaChiTiet != _originalData.MoTaChiTiet;
					case SanPhamColumn.AnhMinhHoa:
					return entityData.AnhMinhHoa != _originalData.AnhMinhHoa;
					case SanPhamColumn.Flag:
					return entityData.Flag != _originalData.Flag;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.IdSanPham != _originalData.IdSanPham;
			result = result || entityData.IdCongTy != _originalData.IdCongTy;
			result = result || entityData.IdLoaiSp != _originalData.IdLoaiSp;
			result = result || entityData.IdTuDien != _originalData.IdTuDien;
			result = result || entityData.TenSp != _originalData.TenSp;
			result = result || entityData.MaSp != _originalData.MaSp;
			result = result || entityData.Gia != _originalData.Gia;
			result = result || entityData.MoTaNgan != _originalData.MoTaNgan;
			result = result || entityData.MoTaChiTiet != _originalData.MoTaChiTiet;
			result = result || entityData.AnhMinhHoa != _originalData.AnhMinhHoa;
			result = result || entityData.Flag != _originalData.Flag;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SanPhamBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is SanPhamBase)
				return Equals(this, (SanPhamBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SanPhamBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.IdSanPham.GetHashCode() ^ 
					((this.IdCongTy == null) ? string.Empty : this.IdCongTy.ToString()).GetHashCode() ^ 
					((this.IdLoaiSp == null) ? string.Empty : this.IdLoaiSp.ToString()).GetHashCode() ^ 
					((this.IdTuDien == null) ? string.Empty : this.IdTuDien.ToString()).GetHashCode() ^ 
					((this.TenSp == null) ? string.Empty : this.TenSp.ToString()).GetHashCode() ^ 
					((this.MaSp == null) ? string.Empty : this.MaSp.ToString()).GetHashCode() ^ 
					((this.Gia == null) ? string.Empty : this.Gia.ToString()).GetHashCode() ^ 
					((this.MoTaNgan == null) ? string.Empty : this.MoTaNgan.ToString()).GetHashCode() ^ 
					((this.MoTaChiTiet == null) ? string.Empty : this.MoTaChiTiet.ToString()).GetHashCode() ^ 
					((this.AnhMinhHoa == null) ? string.Empty : this.AnhMinhHoa.ToString()).GetHashCode() ^ 
					((this.Flag == null) ? string.Empty : this.Flag.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SanPhamBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SanPhamBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="SanPhamBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="SanPhamBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SanPhamBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(SanPhamBase Object1, SanPhamBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.IdSanPham != Object2.IdSanPham)
				equal = false;
			if ( Object1.IdCongTy != null && Object2.IdCongTy != null )
			{
				if (Object1.IdCongTy != Object2.IdCongTy)
					equal = false;
			}
			else if (Object1.IdCongTy == null ^ Object2.IdCongTy == null )
			{
				equal = false;
			}
			if ( Object1.IdLoaiSp != null && Object2.IdLoaiSp != null )
			{
				if (Object1.IdLoaiSp != Object2.IdLoaiSp)
					equal = false;
			}
			else if (Object1.IdLoaiSp == null ^ Object2.IdLoaiSp == null )
			{
				equal = false;
			}
			if ( Object1.IdTuDien != null && Object2.IdTuDien != null )
			{
				if (Object1.IdTuDien != Object2.IdTuDien)
					equal = false;
			}
			else if (Object1.IdTuDien == null ^ Object2.IdTuDien == null )
			{
				equal = false;
			}
			if ( Object1.TenSp != null && Object2.TenSp != null )
			{
				if (Object1.TenSp != Object2.TenSp)
					equal = false;
			}
			else if (Object1.TenSp == null ^ Object2.TenSp == null )
			{
				equal = false;
			}
			if ( Object1.MaSp != null && Object2.MaSp != null )
			{
				if (Object1.MaSp != Object2.MaSp)
					equal = false;
			}
			else if (Object1.MaSp == null ^ Object2.MaSp == null )
			{
				equal = false;
			}
			if ( Object1.Gia != null && Object2.Gia != null )
			{
				if (Object1.Gia != Object2.Gia)
					equal = false;
			}
			else if (Object1.Gia == null ^ Object2.Gia == null )
			{
				equal = false;
			}
			if ( Object1.MoTaNgan != null && Object2.MoTaNgan != null )
			{
				if (Object1.MoTaNgan != Object2.MoTaNgan)
					equal = false;
			}
			else if (Object1.MoTaNgan == null ^ Object2.MoTaNgan == null )
			{
				equal = false;
			}
			if ( Object1.MoTaChiTiet != null && Object2.MoTaChiTiet != null )
			{
				if (Object1.MoTaChiTiet != Object2.MoTaChiTiet)
					equal = false;
			}
			else if (Object1.MoTaChiTiet == null ^ Object2.MoTaChiTiet == null )
			{
				equal = false;
			}
			if ( Object1.AnhMinhHoa != null && Object2.AnhMinhHoa != null )
			{
				if (Object1.AnhMinhHoa != Object2.AnhMinhHoa)
					equal = false;
			}
			else if (Object1.AnhMinhHoa == null ^ Object2.AnhMinhHoa == null )
			{
				equal = false;
			}
			if ( Object1.Flag != null && Object2.Flag != null )
			{
				if (Object1.Flag != Object2.Flag)
					equal = false;
			}
			else if (Object1.Flag == null ^ Object2.Flag == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SanPhamBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SanPhamComparer GetComparer()
        {
            return new SanPhamComparer();
        }
        */

        // Comparer delegates back to SanPham
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SanPham rhs, SanPhamColumn which)
        {
            switch (which)
            {
            	
            	
            	case SanPhamColumn.IdSanPham:
            		return this.IdSanPham.CompareTo(rhs.IdSanPham);
            		
            		                 
            	
            	
            	case SanPhamColumn.IdCongTy:
            		return this.IdCongTy.Value.CompareTo(rhs.IdCongTy.Value);
            		
            		                 
            	
            	
            	case SanPhamColumn.IdLoaiSp:
            		return this.IdLoaiSp.Value.CompareTo(rhs.IdLoaiSp.Value);
            		
            		                 
            	
            	
            	case SanPhamColumn.IdTuDien:
            		return this.IdTuDien.Value.CompareTo(rhs.IdTuDien.Value);
            		
            		                 
            	
            	
            	case SanPhamColumn.TenSp:
            		return this.TenSp.CompareTo(rhs.TenSp);
            		
            		                 
            	
            	
            	case SanPhamColumn.MaSp:
            		return this.MaSp.CompareTo(rhs.MaSp);
            		
            		                 
            	
            	
            	case SanPhamColumn.Gia:
            		return this.Gia.Value.CompareTo(rhs.Gia.Value);
            		
            		                 
            	
            	
            	case SanPhamColumn.MoTaNgan:
            		return this.MoTaNgan.CompareTo(rhs.MoTaNgan);
            		
            		                 
            	
            	
            	case SanPhamColumn.MoTaChiTiet:
            		return this.MoTaChiTiet.CompareTo(rhs.MoTaChiTiet);
            		
            		                 
            	
            		                 
            	
            	
            	case SanPhamColumn.Flag:
            		return this.Flag.Value.CompareTo(rhs.Flag.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SanPhamKey> Members
		
		// member variable for the EntityId property
		private SanPhamKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SanPhamKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SanPhamKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SanPham")
					.Append("|").Append( this.IdSanPham.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{12}{11}- IdSanPham: {0}{11}- IdCongTy: {1}{11}- IdLoaiSp: {2}{11}- IdTuDien: {3}{11}- TenSp: {4}{11}- MaSp: {5}{11}- Gia: {6}{11}- MoTaNgan: {7}{11}- MoTaChiTiet: {8}{11}- AnhMinhHoa: {9}{11}- Flag: {10}{11}", 
				this.IdSanPham,
				(this.IdCongTy == null) ? string.Empty : this.IdCongTy.ToString(),
				(this.IdLoaiSp == null) ? string.Empty : this.IdLoaiSp.ToString(),
				(this.IdTuDien == null) ? string.Empty : this.IdTuDien.ToString(),
				(this.TenSp == null) ? string.Empty : this.TenSp.ToString(),
				(this.MaSp == null) ? string.Empty : this.MaSp.ToString(),
				(this.Gia == null) ? string.Empty : this.Gia.ToString(),
				(this.MoTaNgan == null) ? string.Empty : this.MoTaNgan.ToString(),
				(this.MoTaChiTiet == null) ? string.Empty : this.MoTaChiTiet.ToString(),
				(this.AnhMinhHoa == null) ? string.Empty : this.AnhMinhHoa.ToString(),
				(this.Flag == null) ? string.Empty : this.Flag.ToString(),
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'tbl_SanPham' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SanPhamEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// id_SanPham : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "tbl_SanPham"</remarks>
			public System.Int64 IdSanPham;
				
			/// <summary>
			/// keep a copy of the original so it can be used for editable primary keys.
			/// </summary>
			public System.Int64 OriginalIdSanPham;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// id_CongTy : 
		/// </summary>
		public System.Int64?		  IdCongTy = null;
		
		/// <summary>
		/// id_LoaiSP : 
		/// </summary>
		public System.Int64?		  IdLoaiSp = null;
		
		/// <summary>
		/// id_TuDien : MaSP, TenSP duoc lay tu bang Tu Dien
		/// </summary>
		public System.Int64?		  IdTuDien = null;
		
		/// <summary>
		/// TenSP : 
		/// </summary>
		public System.String		  TenSp = null;
		
		/// <summary>
		/// MaSP : 
		/// </summary>
		public System.String		  MaSp = null;
		
		/// <summary>
		/// Gia : 
		/// </summary>
		public System.Decimal?		  Gia = null;
		
		/// <summary>
		/// MoTaNgan : 
		/// </summary>
		public System.String		  MoTaNgan = null;
		
		/// <summary>
		/// MoTaChiTiet : 
		/// </summary>
		public System.String		  MoTaChiTiet = null;
		
		/// <summary>
		/// AnhMinhHoa : 
		/// </summary>
		public System.Byte[]		  AnhMinhHoa = null;
		
		/// <summary>
		/// Flag : 
		/// </summary>
		public System.Byte?		  Flag = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private CongTy _idSanPhamSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="CongTy"/>.
		/// </summary>
		/// <value>The source CongTy for IdSanPham.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual CongTy IdSanPhamSource
      	{
            get { return this._idSanPhamSource; }
            set { this._idSanPhamSource = value; }
      	}
		private LoaiSp _idLoaiSpSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="LoaiSp"/>.
		/// </summary>
		/// <value>The source LoaiSp for IdLoaiSp.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual LoaiSp IdLoaiSpSource
      	{
            get { return this._idLoaiSpSource; }
            set { this._idLoaiSpSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region ThuocTinhSanPhamCollection
		
		private TList<ThuocTinhSanPham> thuocTinhSanPhamIdSanPham;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation thuocTinhSanPhamIdSanPham
		/// </summary>	
		public TList<ThuocTinhSanPham> ThuocTinhSanPhamCollection
		{
			get
			{
				if (thuocTinhSanPhamIdSanPham == null)
				{
				thuocTinhSanPhamIdSanPham = new TList<ThuocTinhSanPham>();
				}
	
				return thuocTinhSanPhamIdSanPham;
			}
			set { thuocTinhSanPhamIdSanPham = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SanPhamEntityData _tmp = new SanPhamEntityData();
						
			_tmp.IdSanPham = this.IdSanPham;
			_tmp.OriginalIdSanPham = this.OriginalIdSanPham;
			
			_tmp.IdCongTy = this.IdCongTy;
			_tmp.IdLoaiSp = this.IdLoaiSp;
			_tmp.IdTuDien = this.IdTuDien;
			_tmp.TenSp = this.TenSp;
			_tmp.MaSp = this.MaSp;
			_tmp.Gia = this.Gia;
			_tmp.MoTaNgan = this.MoTaNgan;
			_tmp.MoTaChiTiet = this.MoTaChiTiet;
			_tmp.AnhMinhHoa = this.AnhMinhHoa;
			_tmp.Flag = this.Flag;
			
			#region Source Parent Composite Entities
			if (this.IdSanPhamSource != null)
				_tmp.IdSanPhamSource = MakeCopyOf(this.IdSanPhamSource) as CongTy;
			if (this.IdLoaiSpSource != null)
				_tmp.IdLoaiSpSource = MakeCopyOf(this.IdLoaiSpSource) as LoaiSp;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this.thuocTinhSanPhamIdSanPham != null)
				_tmp.ThuocTinhSanPhamCollection = (TList<ThuocTinhSanPham>) MakeCopyOf(this.ThuocTinhSanPhamCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SanPhamColumn"/> which has raised the event.</param>
		public void OnColumnChanging(SanPhamColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SanPhamColumn"/> which has raised the event.</param>
		public void OnColumnChanged(SanPhamColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SanPhamColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(SanPhamColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SanPhamEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SanPhamEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SanPhamColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(SanPhamColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SanPhamEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SanPhamEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SanPhamEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SanPham"/> object.
	/// </remarks>
	public class SanPhamEventArgs : System.EventArgs
	{
		private SanPhamColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SanPhamEventArgs class.
		///</summary>
		public SanPhamEventArgs(SanPhamColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SanPhamEventArgs class.
		///</summary>
		public SanPhamEventArgs(SanPhamColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SanPhamColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SanPhamColumn" />
		public SanPhamColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SanPham related events.
	///</summary>
	public delegate void SanPhamEventHandler(object sender, SanPhamEventArgs e);
	
	#region SanPhamComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SanPhamComparer : System.Collections.Generic.IComparer<SanPham>
	{
		SanPhamColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SanPhamComparer"/> class.
        /// </summary>
		public SanPhamComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SanPhamComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SanPhamComparer(SanPhamColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="SanPham"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="SanPham"/> to compare.</param>
        /// <param name="b">The second <c>SanPham</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SanPham a, SanPham b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SanPham entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SanPham a, SanPham b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SanPhamColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SanPhamKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SanPham"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SanPhamKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SanPhamKey class.
		/// </summary>
		public SanPhamKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SanPhamKey class.
		/// </summary>
		public SanPhamKey(SanPhamBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.IdSanPham = entity.IdSanPham;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SanPhamKey class.
		/// </summary>
		public SanPhamKey(System.Int64 idSanPham)
		{
			#region Init Properties

			this.IdSanPham = idSanPham;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SanPhamBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SanPhamBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the IdSanPham property
		private System.Int64 _idSanPham;
		
		/// <summary>
		/// Gets or sets the IdSanPham property.
		/// </summary>
		public System.Int64 IdSanPham
		{
			get { return _idSanPham; }
			set
			{
				if ( this.Entity != null )
					this.Entity.IdSanPham = value;
				
				_idSanPham = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				IdSanPham = ( values["IdSanPham"] != null ) ? (System.Int64) EntityUtil.ChangeType(values["IdSanPham"], typeof(System.Int64)) : (long)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("IdSanPham", IdSanPham);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("IdSanPham: {0}{1}",
								IdSanPham,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SanPhamColumn Enum
	
	/// <summary>
	/// Enumerate the SanPham columns.
	/// </summary>
	[Serializable]
	public enum SanPhamColumn : int
	{
		/// <summary>
		/// IdSanPham : 
		/// </summary>
		[EnumTextValue("id_SanPham")]
		[ColumnEnum("id_SanPham", typeof(System.Int64), System.Data.DbType.Int64, true, false, false)]
		IdSanPham = 1,
		/// <summary>
		/// IdCongTy : 
		/// </summary>
		[EnumTextValue("id_CongTy")]
		[ColumnEnum("id_CongTy", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		IdCongTy = 2,
		/// <summary>
		/// IdLoaiSp : 
		/// </summary>
		[EnumTextValue("id_LoaiSP")]
		[ColumnEnum("id_LoaiSP", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		IdLoaiSp = 3,
		/// <summary>
		/// IdTuDien : MaSP, TenSP duoc lay tu bang Tu Dien
		/// </summary>
		[EnumTextValue("id_TuDien")]
		[ColumnEnum("id_TuDien", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		IdTuDien = 4,
		/// <summary>
		/// TenSp : 
		/// </summary>
		[EnumTextValue("TenSP")]
		[ColumnEnum("TenSP", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		TenSp = 5,
		/// <summary>
		/// MaSp : 
		/// </summary>
		[EnumTextValue("MaSP")]
		[ColumnEnum("MaSP", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		MaSp = 6,
		/// <summary>
		/// Gia : 
		/// </summary>
		[EnumTextValue("Gia")]
		[ColumnEnum("Gia", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		Gia = 7,
		/// <summary>
		/// MoTaNgan : 
		/// </summary>
		[EnumTextValue("MoTaNgan")]
		[ColumnEnum("MoTaNgan", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		MoTaNgan = 8,
		/// <summary>
		/// MoTaChiTiet : 
		/// </summary>
		[EnumTextValue("MoTaChiTiet")]
		[ColumnEnum("MoTaChiTiet", typeof(System.String), System.Data.DbType.String, false, false, true)]
		MoTaChiTiet = 9,
		/// <summary>
		/// AnhMinhHoa : 
		/// </summary>
		[EnumTextValue("AnhMinhHoa")]
		[ColumnEnum("AnhMinhHoa", typeof(System.Byte[]), System.Data.DbType.Binary, false, false, true)]
		AnhMinhHoa = 10,
		/// <summary>
		/// Flag : 
		/// </summary>
		[EnumTextValue("Flag")]
		[ColumnEnum("Flag", typeof(System.Byte), System.Data.DbType.Byte, false, false, true)]
		Flag = 11
	}//End enum

	#endregion SanPhamColumn Enum

} // end namespace
