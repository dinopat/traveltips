
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file CongTy.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace traveltips.Entities
{
	///<summary>
	/// An object representation of the 'tbl_CongTy' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class CongTyBase : EntityBase, traveltips.Entities.ICongTy, IEntityId<CongTyKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private CongTyEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private CongTyEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private CongTyEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<CongTy> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event CongTyEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CongTyEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="CongTyBase"/> instance.
		///</summary>
		public CongTyBase()
		{
			this.entityData = new CongTyEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="CongTyBase"/> instance.
		///</summary>
		///<param name="idCongTy"></param>
		///<param name="idChuCongTy"></param>
		///<param name="idDanhMuc"></param>
		///<param name="idQuocGia"></param>
		///<param name="idThanhPho"></param>
		///<param name="idQuan"></param>
		///<param name="idDuong"></param>
		///<param name="idKhuVuc"></param>
		///<param name="soNha"></param>
		///<param name="dienThoaiCd"></param>
		///<param name="dienThoaiDd"></param>
		///<param name="fax"></param>
		///<param name="email"></param>
		///<param name="website"></param>
		///<param name="hinhThucTt"></param>
		///<param name="thoiGianPv">Luu duoi dang: Tu;den</param>
		///<param name="anhMinhHoa"></param>
		///<param name="ghiChu"></param>
		///<param name="moTaNgan"></param>
		///<param name="moTaChiTiet"></param>
		///<param name="flag"></param>
		public CongTyBase(System.Int64 idCongTy, System.Int64? idChuCongTy, System.Int64? idDanhMuc, 
			System.Int64? idQuocGia, System.Int64? idThanhPho, System.Int64? idQuan, System.Int64? idDuong, 
			System.Int64? idKhuVuc, System.String soNha, System.String dienThoaiCd, System.String dienThoaiDd, 
			System.String fax, System.String email, System.String website, System.String hinhThucTt, 
			System.String thoiGianPv, System.String anhMinhHoa, System.String ghiChu, System.String moTaNgan, 
			System.String moTaChiTiet, System.Byte? flag)
		{
			this.entityData = new CongTyEntityData();
			this.backupData = null;

			this.IdCongTy = idCongTy;
			this.IdChuCongTy = idChuCongTy;
			this.IdDanhMuc = idDanhMuc;
			this.IdQuocGia = idQuocGia;
			this.IdThanhPho = idThanhPho;
			this.IdQuan = idQuan;
			this.IdDuong = idDuong;
			this.IdKhuVuc = idKhuVuc;
			this.SoNha = soNha;
			this.DienThoaiCd = dienThoaiCd;
			this.DienThoaiDd = dienThoaiDd;
			this.Fax = fax;
			this.Email = email;
			this.Website = website;
			this.HinhThucTt = hinhThucTt;
			this.ThoiGianPv = thoiGianPv;
			this.AnhMinhHoa = anhMinhHoa;
			this.GhiChu = ghiChu;
			this.MoTaNgan = moTaNgan;
			this.MoTaChiTiet = moTaChiTiet;
			this.Flag = flag;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="CongTy"/> instance.
		///</summary>
		///<param name="idCongTy"></param>
		///<param name="idChuCongTy"></param>
		///<param name="idDanhMuc"></param>
		///<param name="idQuocGia"></param>
		///<param name="idThanhPho"></param>
		///<param name="idQuan"></param>
		///<param name="idDuong"></param>
		///<param name="idKhuVuc"></param>
		///<param name="soNha"></param>
		///<param name="dienThoaiCd"></param>
		///<param name="dienThoaiDd"></param>
		///<param name="fax"></param>
		///<param name="email"></param>
		///<param name="website"></param>
		///<param name="hinhThucTt"></param>
		///<param name="thoiGianPv">Luu duoi dang: Tu;den</param>
		///<param name="anhMinhHoa"></param>
		///<param name="ghiChu"></param>
		///<param name="moTaNgan"></param>
		///<param name="moTaChiTiet"></param>
		///<param name="flag"></param>
		public static CongTy CreateCongTy(System.Int64 idCongTy, System.Int64? idChuCongTy, System.Int64? idDanhMuc, 
			System.Int64? idQuocGia, System.Int64? idThanhPho, System.Int64? idQuan, System.Int64? idDuong, 
			System.Int64? idKhuVuc, System.String soNha, System.String dienThoaiCd, System.String dienThoaiDd, 
			System.String fax, System.String email, System.String website, System.String hinhThucTt, 
			System.String thoiGianPv, System.String anhMinhHoa, System.String ghiChu, System.String moTaNgan, 
			System.String moTaChiTiet, System.Byte? flag)
		{
			CongTy newCongTy = new CongTy();
			newCongTy.IdCongTy = idCongTy;
			newCongTy.IdChuCongTy = idChuCongTy;
			newCongTy.IdDanhMuc = idDanhMuc;
			newCongTy.IdQuocGia = idQuocGia;
			newCongTy.IdThanhPho = idThanhPho;
			newCongTy.IdQuan = idQuan;
			newCongTy.IdDuong = idDuong;
			newCongTy.IdKhuVuc = idKhuVuc;
			newCongTy.SoNha = soNha;
			newCongTy.DienThoaiCd = dienThoaiCd;
			newCongTy.DienThoaiDd = dienThoaiDd;
			newCongTy.Fax = fax;
			newCongTy.Email = email;
			newCongTy.Website = website;
			newCongTy.HinhThucTt = hinhThucTt;
			newCongTy.ThoiGianPv = thoiGianPv;
			newCongTy.AnhMinhHoa = anhMinhHoa;
			newCongTy.GhiChu = ghiChu;
			newCongTy.MoTaNgan = moTaNgan;
			newCongTy.MoTaChiTiet = moTaChiTiet;
			newCongTy.Flag = flag;
			return newCongTy;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the IdCongTy property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Int64 IdCongTy
		{
			get
			{
				return this.entityData.IdCongTy; 
			}
			
			set
			{
				if (this.entityData.IdCongTy == value)
					return;
					
				OnColumnChanging(CongTyColumn.IdCongTy, this.entityData.IdCongTy);
				this.entityData.IdCongTy = value;
				this.EntityId.IdCongTy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CongTyColumn.IdCongTy, this.entityData.IdCongTy);
				OnPropertyChanged("IdCongTy");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the id_CongTy property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the id_CongTy property.</remarks>
		/// <value>This type is bigint</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Int64 OriginalIdCongTy
		{
			get { return this.entityData.OriginalIdCongTy; }
			set { this.entityData.OriginalIdCongTy = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the IdChuCongTy property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsIdChuCongTyNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? IdChuCongTy
		{
			get
			{
				return this.entityData.IdChuCongTy; 
			}
			
			set
			{
				if (this.entityData.IdChuCongTy == value)
					return;
					
				OnColumnChanging(CongTyColumn.IdChuCongTy, this.entityData.IdChuCongTy);
				this.entityData.IdChuCongTy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CongTyColumn.IdChuCongTy, this.entityData.IdChuCongTy);
				OnPropertyChanged("IdChuCongTy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IdDanhMuc property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsIdDanhMucNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? IdDanhMuc
		{
			get
			{
				return this.entityData.IdDanhMuc; 
			}
			
			set
			{
				if (this.entityData.IdDanhMuc == value)
					return;
					
				OnColumnChanging(CongTyColumn.IdDanhMuc, this.entityData.IdDanhMuc);
				this.entityData.IdDanhMuc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CongTyColumn.IdDanhMuc, this.entityData.IdDanhMuc);
				OnPropertyChanged("IdDanhMuc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IdQuocGia property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsIdQuocGiaNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? IdQuocGia
		{
			get
			{
				return this.entityData.IdQuocGia; 
			}
			
			set
			{
				if (this.entityData.IdQuocGia == value)
					return;
					
				OnColumnChanging(CongTyColumn.IdQuocGia, this.entityData.IdQuocGia);
				this.entityData.IdQuocGia = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CongTyColumn.IdQuocGia, this.entityData.IdQuocGia);
				OnPropertyChanged("IdQuocGia");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IdThanhPho property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsIdThanhPhoNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? IdThanhPho
		{
			get
			{
				return this.entityData.IdThanhPho; 
			}
			
			set
			{
				if (this.entityData.IdThanhPho == value)
					return;
					
				OnColumnChanging(CongTyColumn.IdThanhPho, this.entityData.IdThanhPho);
				this.entityData.IdThanhPho = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CongTyColumn.IdThanhPho, this.entityData.IdThanhPho);
				OnPropertyChanged("IdThanhPho");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IdQuan property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsIdQuanNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? IdQuan
		{
			get
			{
				return this.entityData.IdQuan; 
			}
			
			set
			{
				if (this.entityData.IdQuan == value)
					return;
					
				OnColumnChanging(CongTyColumn.IdQuan, this.entityData.IdQuan);
				this.entityData.IdQuan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CongTyColumn.IdQuan, this.entityData.IdQuan);
				OnPropertyChanged("IdQuan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IdDuong property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsIdDuongNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? IdDuong
		{
			get
			{
				return this.entityData.IdDuong; 
			}
			
			set
			{
				if (this.entityData.IdDuong == value)
					return;
					
				OnColumnChanging(CongTyColumn.IdDuong, this.entityData.IdDuong);
				this.entityData.IdDuong = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CongTyColumn.IdDuong, this.entityData.IdDuong);
				OnPropertyChanged("IdDuong");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IdKhuVuc property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsIdKhuVucNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? IdKhuVuc
		{
			get
			{
				return this.entityData.IdKhuVuc; 
			}
			
			set
			{
				if (this.entityData.IdKhuVuc == value)
					return;
					
				OnColumnChanging(CongTyColumn.IdKhuVuc, this.entityData.IdKhuVuc);
				this.entityData.IdKhuVuc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CongTyColumn.IdKhuVuc, this.entityData.IdKhuVuc);
				OnPropertyChanged("IdKhuVuc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoNha property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String SoNha
		{
			get
			{
				return this.entityData.SoNha; 
			}
			
			set
			{
				if (this.entityData.SoNha == value)
					return;
					
				OnColumnChanging(CongTyColumn.SoNha, this.entityData.SoNha);
				this.entityData.SoNha = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CongTyColumn.SoNha, this.entityData.SoNha);
				OnPropertyChanged("SoNha");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DienThoaiCd property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String DienThoaiCd
		{
			get
			{
				return this.entityData.DienThoaiCd; 
			}
			
			set
			{
				if (this.entityData.DienThoaiCd == value)
					return;
					
				OnColumnChanging(CongTyColumn.DienThoaiCd, this.entityData.DienThoaiCd);
				this.entityData.DienThoaiCd = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CongTyColumn.DienThoaiCd, this.entityData.DienThoaiCd);
				OnPropertyChanged("DienThoaiCd");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DienThoaiDd property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String DienThoaiDd
		{
			get
			{
				return this.entityData.DienThoaiDd; 
			}
			
			set
			{
				if (this.entityData.DienThoaiDd == value)
					return;
					
				OnColumnChanging(CongTyColumn.DienThoaiDd, this.entityData.DienThoaiDd);
				this.entityData.DienThoaiDd = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CongTyColumn.DienThoaiDd, this.entityData.DienThoaiDd);
				OnPropertyChanged("DienThoaiDd");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Fax property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Fax
		{
			get
			{
				return this.entityData.Fax; 
			}
			
			set
			{
				if (this.entityData.Fax == value)
					return;
					
				OnColumnChanging(CongTyColumn.Fax, this.entityData.Fax);
				this.entityData.Fax = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CongTyColumn.Fax, this.entityData.Fax);
				OnPropertyChanged("Fax");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Email property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Email
		{
			get
			{
				return this.entityData.Email; 
			}
			
			set
			{
				if (this.entityData.Email == value)
					return;
					
				OnColumnChanging(CongTyColumn.Email, this.entityData.Email);
				this.entityData.Email = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CongTyColumn.Email, this.entityData.Email);
				OnPropertyChanged("Email");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Website property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Website
		{
			get
			{
				return this.entityData.Website; 
			}
			
			set
			{
				if (this.entityData.Website == value)
					return;
					
				OnColumnChanging(CongTyColumn.Website, this.entityData.Website);
				this.entityData.Website = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CongTyColumn.Website, this.entityData.Website);
				OnPropertyChanged("Website");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HinhThucTt property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String HinhThucTt
		{
			get
			{
				return this.entityData.HinhThucTt; 
			}
			
			set
			{
				if (this.entityData.HinhThucTt == value)
					return;
					
				OnColumnChanging(CongTyColumn.HinhThucTt, this.entityData.HinhThucTt);
				this.entityData.HinhThucTt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CongTyColumn.HinhThucTt, this.entityData.HinhThucTt);
				OnPropertyChanged("HinhThucTt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ThoiGianPv property. 
		///		Luu duoi dang: Tu;den
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute("Luu duoi dang: Tu;den"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String ThoiGianPv
		{
			get
			{
				return this.entityData.ThoiGianPv; 
			}
			
			set
			{
				if (this.entityData.ThoiGianPv == value)
					return;
					
				OnColumnChanging(CongTyColumn.ThoiGianPv, this.entityData.ThoiGianPv);
				this.entityData.ThoiGianPv = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CongTyColumn.ThoiGianPv, this.entityData.ThoiGianPv);
				OnPropertyChanged("ThoiGianPv");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AnhMinhHoa property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String AnhMinhHoa
		{
			get
			{
				return this.entityData.AnhMinhHoa; 
			}
			
			set
			{
				if (this.entityData.AnhMinhHoa == value)
					return;
					
				OnColumnChanging(CongTyColumn.AnhMinhHoa, this.entityData.AnhMinhHoa);
				this.entityData.AnhMinhHoa = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CongTyColumn.AnhMinhHoa, this.entityData.AnhMinhHoa);
				OnPropertyChanged("AnhMinhHoa");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GhiChu property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1000)]
		public virtual System.String GhiChu
		{
			get
			{
				return this.entityData.GhiChu; 
			}
			
			set
			{
				if (this.entityData.GhiChu == value)
					return;
					
				OnColumnChanging(CongTyColumn.GhiChu, this.entityData.GhiChu);
				this.entityData.GhiChu = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CongTyColumn.GhiChu, this.entityData.GhiChu);
				OnPropertyChanged("GhiChu");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MoTaNgan property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String MoTaNgan
		{
			get
			{
				return this.entityData.MoTaNgan; 
			}
			
			set
			{
				if (this.entityData.MoTaNgan == value)
					return;
					
				OnColumnChanging(CongTyColumn.MoTaNgan, this.entityData.MoTaNgan);
				this.entityData.MoTaNgan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CongTyColumn.MoTaNgan, this.entityData.MoTaNgan);
				OnPropertyChanged("MoTaNgan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MoTaChiTiet property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String MoTaChiTiet
		{
			get
			{
				return this.entityData.MoTaChiTiet; 
			}
			
			set
			{
				if (this.entityData.MoTaChiTiet == value)
					return;
					
				OnColumnChanging(CongTyColumn.MoTaChiTiet, this.entityData.MoTaChiTiet);
				this.entityData.MoTaChiTiet = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CongTyColumn.MoTaChiTiet, this.entityData.MoTaChiTiet);
				OnPropertyChanged("MoTaChiTiet");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Flag property. 
		///		
		/// </summary>
		/// <value>This type is tinyint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (byte)0. It is up to the developer
		/// to check the value of IsFlagNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public override System.Byte? Flag
		{
			get
			{
				return this.entityData.Flag; 
			}
			
			set
			{
				if (this.entityData.Flag == value)
					return;
					
				OnColumnChanging(CongTyColumn.Flag, this.entityData.Flag);
				this.entityData.Flag = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CongTyColumn.Flag, this.entityData.Flag);
				OnPropertyChanged("Flag");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="ChuCongTy"/>.
		/// </summary>
		/// <value>The source ChuCongTy for IdChuCongTy.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ChuCongTy IdChuCongTySource
      	{
            get { return entityData.IdChuCongTySource; }
            set { entityData.IdChuCongTySource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="DanhMuc"/>.
		/// </summary>
		/// <value>The source DanhMuc for IdDanhMuc.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual DanhMuc IdDanhMucSource
      	{
            get { return entityData.IdDanhMucSource; }
            set { entityData.IdDanhMucSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of Gallery objects
		///	which are related to this object through the relation FK_tbl_Gallery_tbl_CongTy
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Gallery> GalleryCollection
		{
			get { return entityData.GalleryCollection; }
			set { entityData.GalleryCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of TinTuc objects
		///	which are related to this object through the relation FK_tbl_TinTuc_tbl_CongTy
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<TinTuc> TinTucCollection
		{
			get { return entityData.TinTucCollection; }
			set { entityData.TinTucCollection = value; }	
		}

		/// <summary>
		///	Holds a DichVu object
		///	which is related to this object through the relation DichVu
		/// </summary>
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual DichVu DichVu
		{
			get { return entityData.DichVu; }
			set { entityData.DichVu = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Comment objects
		///	which are related to this object through the relation FK_tbl_Comment_tbl_CongTy
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Comment> CommentCollection
		{
			get { return entityData.CommentCollection; }
			set { entityData.CommentCollection = value; }	
		}

		/// <summary>
		///	Holds a SanPham object
		///	which is related to this object through the relation SanPham
		/// </summary>
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SanPham SanPham
		{
			get { return entityData.SanPham; }
			set { entityData.SanPham = value; }	
		}
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("SoNha", "So Nha", 10));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("DienThoaiCd", "Dien Thoai Cd", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("DienThoaiDd", "Dien Thoai Dd", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Fax", "Fax", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Email", "Email", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Website", "Website", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("HinhThucTt", "Hinh Thuc Tt", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ThoiGianPv", "Thoi Gian Pv", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("AnhMinhHoa", "Anh Minh Hoa", 500));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("GhiChu", "Ghi Chu", 1000));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("MoTaNgan", "Mo Ta Ngan", 500));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "tbl_CongTy"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"id_CongTy", "id_ChuCongTy", "id_DanhMuc", "id_QuocGia", "id_ThanhPho", "id_Quan", "id_Duong", "id_KhuVuc", "SoNha", "DienThoaiCD", "DienThoaiDD", "Fax", "Email", "Website", "HinhThucTT", "ThoiGianPV", "AnhMinhHoa", "GhiChu", "MoTaNgan", "MoTaChiTiet", "Flag"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as CongTyEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (CongTy) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<CongTy>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as CongTy);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed CongTy Entity 
		///</summary>
		public virtual CongTy Copy()
		{
			//shallow copy entity
			CongTy copy = new CongTy();
			copy.SuppressEntityEvents = true;
			copy.IdCongTy = this.IdCongTy;
			copy.OriginalIdCongTy = this.OriginalIdCongTy;
			copy.IdChuCongTy = this.IdChuCongTy;
			copy.IdDanhMuc = this.IdDanhMuc;
			copy.IdQuocGia = this.IdQuocGia;
			copy.IdThanhPho = this.IdThanhPho;
			copy.IdQuan = this.IdQuan;
			copy.IdDuong = this.IdDuong;
			copy.IdKhuVuc = this.IdKhuVuc;
			copy.SoNha = this.SoNha;
			copy.DienThoaiCd = this.DienThoaiCd;
			copy.DienThoaiDd = this.DienThoaiDd;
			copy.Fax = this.Fax;
			copy.Email = this.Email;
			copy.Website = this.Website;
			copy.HinhThucTt = this.HinhThucTt;
			copy.ThoiGianPv = this.ThoiGianPv;
			copy.AnhMinhHoa = this.AnhMinhHoa;
			copy.GhiChu = this.GhiChu;
			copy.MoTaNgan = this.MoTaNgan;
			copy.MoTaChiTiet = this.MoTaChiTiet;
			copy.Flag = this.Flag;
			
			copy.IdChuCongTySource = MakeCopyOf(this.IdChuCongTySource) as ChuCongTy;
			copy.IdDanhMucSource = MakeCopyOf(this.IdDanhMucSource) as DanhMuc;
		
			//deep copy nested objects
			copy.GalleryCollection = (TList<Gallery>) MakeCopyOf(this.GalleryCollection); 
			copy.TinTucCollection = (TList<TinTuc>) MakeCopyOf(this.TinTucCollection); 
			copy.DichVu = (DichVu) MakeCopyOf(this.DichVu); 
			copy.CommentCollection = (TList<Comment>) MakeCopyOf(this.CommentCollection); 
			copy.SanPham = (SanPham) MakeCopyOf(this.SanPham); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed CongTy Entity which is a deep copy of the current entity.
		///</summary>
		public virtual CongTy DeepCopy()
		{
			return EntityHelper.Clone<CongTy>(this as CongTy);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as CongTyEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as CongTyEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(CongTyColumn column)
		{
			switch(column)
			{
					case CongTyColumn.IdCongTy:
					return entityData.IdCongTy != _originalData.IdCongTy;
					case CongTyColumn.IdChuCongTy:
					return entityData.IdChuCongTy != _originalData.IdChuCongTy;
					case CongTyColumn.IdDanhMuc:
					return entityData.IdDanhMuc != _originalData.IdDanhMuc;
					case CongTyColumn.IdQuocGia:
					return entityData.IdQuocGia != _originalData.IdQuocGia;
					case CongTyColumn.IdThanhPho:
					return entityData.IdThanhPho != _originalData.IdThanhPho;
					case CongTyColumn.IdQuan:
					return entityData.IdQuan != _originalData.IdQuan;
					case CongTyColumn.IdDuong:
					return entityData.IdDuong != _originalData.IdDuong;
					case CongTyColumn.IdKhuVuc:
					return entityData.IdKhuVuc != _originalData.IdKhuVuc;
					case CongTyColumn.SoNha:
					return entityData.SoNha != _originalData.SoNha;
					case CongTyColumn.DienThoaiCd:
					return entityData.DienThoaiCd != _originalData.DienThoaiCd;
					case CongTyColumn.DienThoaiDd:
					return entityData.DienThoaiDd != _originalData.DienThoaiDd;
					case CongTyColumn.Fax:
					return entityData.Fax != _originalData.Fax;
					case CongTyColumn.Email:
					return entityData.Email != _originalData.Email;
					case CongTyColumn.Website:
					return entityData.Website != _originalData.Website;
					case CongTyColumn.HinhThucTt:
					return entityData.HinhThucTt != _originalData.HinhThucTt;
					case CongTyColumn.ThoiGianPv:
					return entityData.ThoiGianPv != _originalData.ThoiGianPv;
					case CongTyColumn.AnhMinhHoa:
					return entityData.AnhMinhHoa != _originalData.AnhMinhHoa;
					case CongTyColumn.GhiChu:
					return entityData.GhiChu != _originalData.GhiChu;
					case CongTyColumn.MoTaNgan:
					return entityData.MoTaNgan != _originalData.MoTaNgan;
					case CongTyColumn.MoTaChiTiet:
					return entityData.MoTaChiTiet != _originalData.MoTaChiTiet;
					case CongTyColumn.Flag:
					return entityData.Flag != _originalData.Flag;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.IdCongTy != _originalData.IdCongTy;
			result = result || entityData.IdChuCongTy != _originalData.IdChuCongTy;
			result = result || entityData.IdDanhMuc != _originalData.IdDanhMuc;
			result = result || entityData.IdQuocGia != _originalData.IdQuocGia;
			result = result || entityData.IdThanhPho != _originalData.IdThanhPho;
			result = result || entityData.IdQuan != _originalData.IdQuan;
			result = result || entityData.IdDuong != _originalData.IdDuong;
			result = result || entityData.IdKhuVuc != _originalData.IdKhuVuc;
			result = result || entityData.SoNha != _originalData.SoNha;
			result = result || entityData.DienThoaiCd != _originalData.DienThoaiCd;
			result = result || entityData.DienThoaiDd != _originalData.DienThoaiDd;
			result = result || entityData.Fax != _originalData.Fax;
			result = result || entityData.Email != _originalData.Email;
			result = result || entityData.Website != _originalData.Website;
			result = result || entityData.HinhThucTt != _originalData.HinhThucTt;
			result = result || entityData.ThoiGianPv != _originalData.ThoiGianPv;
			result = result || entityData.AnhMinhHoa != _originalData.AnhMinhHoa;
			result = result || entityData.GhiChu != _originalData.GhiChu;
			result = result || entityData.MoTaNgan != _originalData.MoTaNgan;
			result = result || entityData.MoTaChiTiet != _originalData.MoTaChiTiet;
			result = result || entityData.Flag != _originalData.Flag;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="CongTyBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is CongTyBase)
				return Equals(this, (CongTyBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="CongTyBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.IdCongTy.GetHashCode() ^ 
					((this.IdChuCongTy == null) ? string.Empty : this.IdChuCongTy.ToString()).GetHashCode() ^ 
					((this.IdDanhMuc == null) ? string.Empty : this.IdDanhMuc.ToString()).GetHashCode() ^ 
					((this.IdQuocGia == null) ? string.Empty : this.IdQuocGia.ToString()).GetHashCode() ^ 
					((this.IdThanhPho == null) ? string.Empty : this.IdThanhPho.ToString()).GetHashCode() ^ 
					((this.IdQuan == null) ? string.Empty : this.IdQuan.ToString()).GetHashCode() ^ 
					((this.IdDuong == null) ? string.Empty : this.IdDuong.ToString()).GetHashCode() ^ 
					((this.IdKhuVuc == null) ? string.Empty : this.IdKhuVuc.ToString()).GetHashCode() ^ 
					((this.SoNha == null) ? string.Empty : this.SoNha.ToString()).GetHashCode() ^ 
					((this.DienThoaiCd == null) ? string.Empty : this.DienThoaiCd.ToString()).GetHashCode() ^ 
					((this.DienThoaiDd == null) ? string.Empty : this.DienThoaiDd.ToString()).GetHashCode() ^ 
					((this.Fax == null) ? string.Empty : this.Fax.ToString()).GetHashCode() ^ 
					((this.Email == null) ? string.Empty : this.Email.ToString()).GetHashCode() ^ 
					((this.Website == null) ? string.Empty : this.Website.ToString()).GetHashCode() ^ 
					((this.HinhThucTt == null) ? string.Empty : this.HinhThucTt.ToString()).GetHashCode() ^ 
					((this.ThoiGianPv == null) ? string.Empty : this.ThoiGianPv.ToString()).GetHashCode() ^ 
					((this.AnhMinhHoa == null) ? string.Empty : this.AnhMinhHoa.ToString()).GetHashCode() ^ 
					((this.GhiChu == null) ? string.Empty : this.GhiChu.ToString()).GetHashCode() ^ 
					((this.MoTaNgan == null) ? string.Empty : this.MoTaNgan.ToString()).GetHashCode() ^ 
					((this.MoTaChiTiet == null) ? string.Empty : this.MoTaChiTiet.ToString()).GetHashCode() ^ 
					((this.Flag == null) ? string.Empty : this.Flag.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="CongTyBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(CongTyBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="CongTyBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="CongTyBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="CongTyBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(CongTyBase Object1, CongTyBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.IdCongTy != Object2.IdCongTy)
				equal = false;
			if ( Object1.IdChuCongTy != null && Object2.IdChuCongTy != null )
			{
				if (Object1.IdChuCongTy != Object2.IdChuCongTy)
					equal = false;
			}
			else if (Object1.IdChuCongTy == null ^ Object2.IdChuCongTy == null )
			{
				equal = false;
			}
			if ( Object1.IdDanhMuc != null && Object2.IdDanhMuc != null )
			{
				if (Object1.IdDanhMuc != Object2.IdDanhMuc)
					equal = false;
			}
			else if (Object1.IdDanhMuc == null ^ Object2.IdDanhMuc == null )
			{
				equal = false;
			}
			if ( Object1.IdQuocGia != null && Object2.IdQuocGia != null )
			{
				if (Object1.IdQuocGia != Object2.IdQuocGia)
					equal = false;
			}
			else if (Object1.IdQuocGia == null ^ Object2.IdQuocGia == null )
			{
				equal = false;
			}
			if ( Object1.IdThanhPho != null && Object2.IdThanhPho != null )
			{
				if (Object1.IdThanhPho != Object2.IdThanhPho)
					equal = false;
			}
			else if (Object1.IdThanhPho == null ^ Object2.IdThanhPho == null )
			{
				equal = false;
			}
			if ( Object1.IdQuan != null && Object2.IdQuan != null )
			{
				if (Object1.IdQuan != Object2.IdQuan)
					equal = false;
			}
			else if (Object1.IdQuan == null ^ Object2.IdQuan == null )
			{
				equal = false;
			}
			if ( Object1.IdDuong != null && Object2.IdDuong != null )
			{
				if (Object1.IdDuong != Object2.IdDuong)
					equal = false;
			}
			else if (Object1.IdDuong == null ^ Object2.IdDuong == null )
			{
				equal = false;
			}
			if ( Object1.IdKhuVuc != null && Object2.IdKhuVuc != null )
			{
				if (Object1.IdKhuVuc != Object2.IdKhuVuc)
					equal = false;
			}
			else if (Object1.IdKhuVuc == null ^ Object2.IdKhuVuc == null )
			{
				equal = false;
			}
			if ( Object1.SoNha != null && Object2.SoNha != null )
			{
				if (Object1.SoNha != Object2.SoNha)
					equal = false;
			}
			else if (Object1.SoNha == null ^ Object2.SoNha == null )
			{
				equal = false;
			}
			if ( Object1.DienThoaiCd != null && Object2.DienThoaiCd != null )
			{
				if (Object1.DienThoaiCd != Object2.DienThoaiCd)
					equal = false;
			}
			else if (Object1.DienThoaiCd == null ^ Object2.DienThoaiCd == null )
			{
				equal = false;
			}
			if ( Object1.DienThoaiDd != null && Object2.DienThoaiDd != null )
			{
				if (Object1.DienThoaiDd != Object2.DienThoaiDd)
					equal = false;
			}
			else if (Object1.DienThoaiDd == null ^ Object2.DienThoaiDd == null )
			{
				equal = false;
			}
			if ( Object1.Fax != null && Object2.Fax != null )
			{
				if (Object1.Fax != Object2.Fax)
					equal = false;
			}
			else if (Object1.Fax == null ^ Object2.Fax == null )
			{
				equal = false;
			}
			if ( Object1.Email != null && Object2.Email != null )
			{
				if (Object1.Email != Object2.Email)
					equal = false;
			}
			else if (Object1.Email == null ^ Object2.Email == null )
			{
				equal = false;
			}
			if ( Object1.Website != null && Object2.Website != null )
			{
				if (Object1.Website != Object2.Website)
					equal = false;
			}
			else if (Object1.Website == null ^ Object2.Website == null )
			{
				equal = false;
			}
			if ( Object1.HinhThucTt != null && Object2.HinhThucTt != null )
			{
				if (Object1.HinhThucTt != Object2.HinhThucTt)
					equal = false;
			}
			else if (Object1.HinhThucTt == null ^ Object2.HinhThucTt == null )
			{
				equal = false;
			}
			if ( Object1.ThoiGianPv != null && Object2.ThoiGianPv != null )
			{
				if (Object1.ThoiGianPv != Object2.ThoiGianPv)
					equal = false;
			}
			else if (Object1.ThoiGianPv == null ^ Object2.ThoiGianPv == null )
			{
				equal = false;
			}
			if ( Object1.AnhMinhHoa != null && Object2.AnhMinhHoa != null )
			{
				if (Object1.AnhMinhHoa != Object2.AnhMinhHoa)
					equal = false;
			}
			else if (Object1.AnhMinhHoa == null ^ Object2.AnhMinhHoa == null )
			{
				equal = false;
			}
			if ( Object1.GhiChu != null && Object2.GhiChu != null )
			{
				if (Object1.GhiChu != Object2.GhiChu)
					equal = false;
			}
			else if (Object1.GhiChu == null ^ Object2.GhiChu == null )
			{
				equal = false;
			}
			if ( Object1.MoTaNgan != null && Object2.MoTaNgan != null )
			{
				if (Object1.MoTaNgan != Object2.MoTaNgan)
					equal = false;
			}
			else if (Object1.MoTaNgan == null ^ Object2.MoTaNgan == null )
			{
				equal = false;
			}
			if ( Object1.MoTaChiTiet != null && Object2.MoTaChiTiet != null )
			{
				if (Object1.MoTaChiTiet != Object2.MoTaChiTiet)
					equal = false;
			}
			else if (Object1.MoTaChiTiet == null ^ Object2.MoTaChiTiet == null )
			{
				equal = false;
			}
			if ( Object1.Flag != null && Object2.Flag != null )
			{
				if (Object1.Flag != Object2.Flag)
					equal = false;
			}
			else if (Object1.Flag == null ^ Object2.Flag == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((CongTyBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static CongTyComparer GetComparer()
        {
            return new CongTyComparer();
        }
        */

        // Comparer delegates back to CongTy
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(CongTy rhs, CongTyColumn which)
        {
            switch (which)
            {
            	
            	
            	case CongTyColumn.IdCongTy:
            		return this.IdCongTy.CompareTo(rhs.IdCongTy);
            		
            		                 
            	
            	
            	case CongTyColumn.IdChuCongTy:
            		return this.IdChuCongTy.Value.CompareTo(rhs.IdChuCongTy.Value);
            		
            		                 
            	
            	
            	case CongTyColumn.IdDanhMuc:
            		return this.IdDanhMuc.Value.CompareTo(rhs.IdDanhMuc.Value);
            		
            		                 
            	
            	
            	case CongTyColumn.IdQuocGia:
            		return this.IdQuocGia.Value.CompareTo(rhs.IdQuocGia.Value);
            		
            		                 
            	
            	
            	case CongTyColumn.IdThanhPho:
            		return this.IdThanhPho.Value.CompareTo(rhs.IdThanhPho.Value);
            		
            		                 
            	
            	
            	case CongTyColumn.IdQuan:
            		return this.IdQuan.Value.CompareTo(rhs.IdQuan.Value);
            		
            		                 
            	
            	
            	case CongTyColumn.IdDuong:
            		return this.IdDuong.Value.CompareTo(rhs.IdDuong.Value);
            		
            		                 
            	
            	
            	case CongTyColumn.IdKhuVuc:
            		return this.IdKhuVuc.Value.CompareTo(rhs.IdKhuVuc.Value);
            		
            		                 
            	
            	
            	case CongTyColumn.SoNha:
            		return this.SoNha.CompareTo(rhs.SoNha);
            		
            		                 
            	
            	
            	case CongTyColumn.DienThoaiCd:
            		return this.DienThoaiCd.CompareTo(rhs.DienThoaiCd);
            		
            		                 
            	
            	
            	case CongTyColumn.DienThoaiDd:
            		return this.DienThoaiDd.CompareTo(rhs.DienThoaiDd);
            		
            		                 
            	
            	
            	case CongTyColumn.Fax:
            		return this.Fax.CompareTo(rhs.Fax);
            		
            		                 
            	
            	
            	case CongTyColumn.Email:
            		return this.Email.CompareTo(rhs.Email);
            		
            		                 
            	
            	
            	case CongTyColumn.Website:
            		return this.Website.CompareTo(rhs.Website);
            		
            		                 
            	
            	
            	case CongTyColumn.HinhThucTt:
            		return this.HinhThucTt.CompareTo(rhs.HinhThucTt);
            		
            		                 
            	
            	
            	case CongTyColumn.ThoiGianPv:
            		return this.ThoiGianPv.CompareTo(rhs.ThoiGianPv);
            		
            		                 
            	
            	
            	case CongTyColumn.AnhMinhHoa:
            		return this.AnhMinhHoa.CompareTo(rhs.AnhMinhHoa);
            		
            		                 
            	
            	
            	case CongTyColumn.GhiChu:
            		return this.GhiChu.CompareTo(rhs.GhiChu);
            		
            		                 
            	
            	
            	case CongTyColumn.MoTaNgan:
            		return this.MoTaNgan.CompareTo(rhs.MoTaNgan);
            		
            		                 
            	
            	
            	case CongTyColumn.MoTaChiTiet:
            		return this.MoTaChiTiet.CompareTo(rhs.MoTaChiTiet);
            		
            		                 
            	
            	
            	case CongTyColumn.Flag:
            		return this.Flag.Value.CompareTo(rhs.Flag.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<CongTyKey> Members
		
		// member variable for the EntityId property
		private CongTyKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual CongTyKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new CongTyKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("CongTy")
					.Append("|").Append( this.IdCongTy.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{22}{21}- IdCongTy: {0}{21}- IdChuCongTy: {1}{21}- IdDanhMuc: {2}{21}- IdQuocGia: {3}{21}- IdThanhPho: {4}{21}- IdQuan: {5}{21}- IdDuong: {6}{21}- IdKhuVuc: {7}{21}- SoNha: {8}{21}- DienThoaiCd: {9}{21}- DienThoaiDd: {10}{21}- Fax: {11}{21}- Email: {12}{21}- Website: {13}{21}- HinhThucTt: {14}{21}- ThoiGianPv: {15}{21}- AnhMinhHoa: {16}{21}- GhiChu: {17}{21}- MoTaNgan: {18}{21}- MoTaChiTiet: {19}{21}- Flag: {20}{21}", 
				this.IdCongTy,
				(this.IdChuCongTy == null) ? string.Empty : this.IdChuCongTy.ToString(),
				(this.IdDanhMuc == null) ? string.Empty : this.IdDanhMuc.ToString(),
				(this.IdQuocGia == null) ? string.Empty : this.IdQuocGia.ToString(),
				(this.IdThanhPho == null) ? string.Empty : this.IdThanhPho.ToString(),
				(this.IdQuan == null) ? string.Empty : this.IdQuan.ToString(),
				(this.IdDuong == null) ? string.Empty : this.IdDuong.ToString(),
				(this.IdKhuVuc == null) ? string.Empty : this.IdKhuVuc.ToString(),
				(this.SoNha == null) ? string.Empty : this.SoNha.ToString(),
				(this.DienThoaiCd == null) ? string.Empty : this.DienThoaiCd.ToString(),
				(this.DienThoaiDd == null) ? string.Empty : this.DienThoaiDd.ToString(),
				(this.Fax == null) ? string.Empty : this.Fax.ToString(),
				(this.Email == null) ? string.Empty : this.Email.ToString(),
				(this.Website == null) ? string.Empty : this.Website.ToString(),
				(this.HinhThucTt == null) ? string.Empty : this.HinhThucTt.ToString(),
				(this.ThoiGianPv == null) ? string.Empty : this.ThoiGianPv.ToString(),
				(this.AnhMinhHoa == null) ? string.Empty : this.AnhMinhHoa.ToString(),
				(this.GhiChu == null) ? string.Empty : this.GhiChu.ToString(),
				(this.MoTaNgan == null) ? string.Empty : this.MoTaNgan.ToString(),
				(this.MoTaChiTiet == null) ? string.Empty : this.MoTaChiTiet.ToString(),
				(this.Flag == null) ? string.Empty : this.Flag.ToString(),
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'tbl_CongTy' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class CongTyEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// id_CongTy : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "tbl_CongTy"</remarks>
			public System.Int64 IdCongTy;
				
			/// <summary>
			/// keep a copy of the original so it can be used for editable primary keys.
			/// </summary>
			public System.Int64 OriginalIdCongTy;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// id_ChuCongTy : 
		/// </summary>
		public System.Int64?		  IdChuCongTy = null;
		
		/// <summary>
		/// id_DanhMuc : 
		/// </summary>
		public System.Int64?		  IdDanhMuc = null;
		
		/// <summary>
		/// id_QuocGia : 
		/// </summary>
		public System.Int64?		  IdQuocGia = null;
		
		/// <summary>
		/// id_ThanhPho : 
		/// </summary>
		public System.Int64?		  IdThanhPho = null;
		
		/// <summary>
		/// id_Quan : 
		/// </summary>
		public System.Int64?		  IdQuan = null;
		
		/// <summary>
		/// id_Duong : 
		/// </summary>
		public System.Int64?		  IdDuong = null;
		
		/// <summary>
		/// id_KhuVuc : 
		/// </summary>
		public System.Int64?		  IdKhuVuc = null;
		
		/// <summary>
		/// SoNha : 
		/// </summary>
		public System.String		  SoNha = null;
		
		/// <summary>
		/// DienThoaiCD : 
		/// </summary>
		public System.String		  DienThoaiCd = null;
		
		/// <summary>
		/// DienThoaiDD : 
		/// </summary>
		public System.String		  DienThoaiDd = null;
		
		/// <summary>
		/// Fax : 
		/// </summary>
		public System.String		  Fax = null;
		
		/// <summary>
		/// Email : 
		/// </summary>
		public System.String		  Email = null;
		
		/// <summary>
		/// Website : 
		/// </summary>
		public System.String		  Website = null;
		
		/// <summary>
		/// HinhThucTT : 
		/// </summary>
		public System.String		  HinhThucTt = null;
		
		/// <summary>
		/// ThoiGianPV : Luu duoi dang: Tu;den
		/// </summary>
		public System.String		  ThoiGianPv = null;
		
		/// <summary>
		/// AnhMinhHoa : 
		/// </summary>
		public System.String		  AnhMinhHoa = null;
		
		/// <summary>
		/// GhiChu : 
		/// </summary>
		public System.String		  GhiChu = null;
		
		/// <summary>
		/// MoTaNgan : 
		/// </summary>
		public System.String		  MoTaNgan = null;
		
		/// <summary>
		/// MoTaChiTiet : 
		/// </summary>
		public System.String		  MoTaChiTiet = null;
		
		/// <summary>
		/// Flag : 
		/// </summary>
		public System.Byte?		  Flag = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private ChuCongTy _idChuCongTySource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ChuCongTy"/>.
		/// </summary>
		/// <value>The source ChuCongTy for IdChuCongTy.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual ChuCongTy IdChuCongTySource
      	{
            get { return this._idChuCongTySource; }
            set { this._idChuCongTySource = value; }
      	}
		private DanhMuc _idDanhMucSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="DanhMuc"/>.
		/// </summary>
		/// <value>The source DanhMuc for IdDanhMuc.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual DanhMuc IdDanhMucSource
      	{
            get { return this._idDanhMucSource; }
            set { this._idDanhMucSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region GalleryCollection
		
		private TList<Gallery> galleryIdCongTy;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation galleryIdCongTy
		/// </summary>	
		public TList<Gallery> GalleryCollection
		{
			get
			{
				if (galleryIdCongTy == null)
				{
				galleryIdCongTy = new TList<Gallery>();
				}
	
				return galleryIdCongTy;
			}
			set { galleryIdCongTy = value; }
		}
		
		#endregion

		#region TinTucCollection
		
		private TList<TinTuc> tinTucIdCongTy;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation tinTucIdCongTy
		/// </summary>	
		public TList<TinTuc> TinTucCollection
		{
			get
			{
				if (tinTucIdCongTy == null)
				{
				tinTucIdCongTy = new TList<TinTuc>();
				}
	
				return tinTucIdCongTy;
			}
			set { tinTucIdCongTy = value; }
		}
		
		#endregion

		#region DichVu
		
		private DichVu dichVuIdDichVu;
		
		/// <summary>
		///	Holds a  DichVu entity object
		///	which is related to this object through the relation dichVuIdDichVu
		/// </summary>
		public DichVu DichVu
		{
			get {		return dichVuIdDichVu;		}
			set { 	dichVuIdDichVu = value; 	}
		}
		
		#endregion 

		#region CommentCollection
		
		private TList<Comment> commentIdCongty;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation commentIdCongty
		/// </summary>	
		public TList<Comment> CommentCollection
		{
			get
			{
				if (commentIdCongty == null)
				{
				commentIdCongty = new TList<Comment>();
				}
	
				return commentIdCongty;
			}
			set { commentIdCongty = value; }
		}
		
		#endregion

		#region SanPham
		
		private SanPham sanPhamIdSanPham;
		
		/// <summary>
		///	Holds a  SanPham entity object
		///	which is related to this object through the relation sanPhamIdSanPham
		/// </summary>
		public SanPham SanPham
		{
			get {		return sanPhamIdSanPham;		}
			set { 	sanPhamIdSanPham = value; 	}
		}
		
		#endregion 

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			CongTyEntityData _tmp = new CongTyEntityData();
						
			_tmp.IdCongTy = this.IdCongTy;
			_tmp.OriginalIdCongTy = this.OriginalIdCongTy;
			
			_tmp.IdChuCongTy = this.IdChuCongTy;
			_tmp.IdDanhMuc = this.IdDanhMuc;
			_tmp.IdQuocGia = this.IdQuocGia;
			_tmp.IdThanhPho = this.IdThanhPho;
			_tmp.IdQuan = this.IdQuan;
			_tmp.IdDuong = this.IdDuong;
			_tmp.IdKhuVuc = this.IdKhuVuc;
			_tmp.SoNha = this.SoNha;
			_tmp.DienThoaiCd = this.DienThoaiCd;
			_tmp.DienThoaiDd = this.DienThoaiDd;
			_tmp.Fax = this.Fax;
			_tmp.Email = this.Email;
			_tmp.Website = this.Website;
			_tmp.HinhThucTt = this.HinhThucTt;
			_tmp.ThoiGianPv = this.ThoiGianPv;
			_tmp.AnhMinhHoa = this.AnhMinhHoa;
			_tmp.GhiChu = this.GhiChu;
			_tmp.MoTaNgan = this.MoTaNgan;
			_tmp.MoTaChiTiet = this.MoTaChiTiet;
			_tmp.Flag = this.Flag;
			
			#region Source Parent Composite Entities
			if (this.IdChuCongTySource != null)
				_tmp.IdChuCongTySource = MakeCopyOf(this.IdChuCongTySource) as ChuCongTy;
			if (this.IdDanhMucSource != null)
				_tmp.IdDanhMucSource = MakeCopyOf(this.IdDanhMucSource) as DanhMuc;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this.galleryIdCongTy != null)
				_tmp.GalleryCollection = (TList<Gallery>) MakeCopyOf(this.GalleryCollection); 
			if (this.tinTucIdCongTy != null)
				_tmp.TinTucCollection = (TList<TinTuc>) MakeCopyOf(this.TinTucCollection); 
			if (this.dichVuIdDichVu != null)
				_tmp.DichVu = (DichVu) MakeCopyOf(this.DichVu); 
			if (this.commentIdCongty != null)
				_tmp.CommentCollection = (TList<Comment>) MakeCopyOf(this.CommentCollection); 
			if (this.sanPhamIdSanPham != null)
				_tmp.SanPham = (SanPham) MakeCopyOf(this.SanPham); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CongTyColumn"/> which has raised the event.</param>
		public void OnColumnChanging(CongTyColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CongTyColumn"/> which has raised the event.</param>
		public void OnColumnChanged(CongTyColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CongTyColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(CongTyColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				CongTyEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new CongTyEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CongTyColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(CongTyColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				CongTyEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new CongTyEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region CongTyEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="CongTy"/> object.
	/// </remarks>
	public class CongTyEventArgs : System.EventArgs
	{
		private CongTyColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the CongTyEventArgs class.
		///</summary>
		public CongTyEventArgs(CongTyColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the CongTyEventArgs class.
		///</summary>
		public CongTyEventArgs(CongTyColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The CongTyColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="CongTyColumn" />
		public CongTyColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all CongTy related events.
	///</summary>
	public delegate void CongTyEventHandler(object sender, CongTyEventArgs e);
	
	#region CongTyComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class CongTyComparer : System.Collections.Generic.IComparer<CongTy>
	{
		CongTyColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:CongTyComparer"/> class.
        /// </summary>
		public CongTyComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:CongTyComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public CongTyComparer(CongTyColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="CongTy"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="CongTy"/> to compare.</param>
        /// <param name="b">The second <c>CongTy</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(CongTy a, CongTy b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(CongTy entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(CongTy a, CongTy b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public CongTyColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region CongTyKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="CongTy"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class CongTyKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the CongTyKey class.
		/// </summary>
		public CongTyKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the CongTyKey class.
		/// </summary>
		public CongTyKey(CongTyBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.IdCongTy = entity.IdCongTy;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the CongTyKey class.
		/// </summary>
		public CongTyKey(System.Int64 idCongTy)
		{
			#region Init Properties

			this.IdCongTy = idCongTy;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private CongTyBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public CongTyBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the IdCongTy property
		private System.Int64 _idCongTy;
		
		/// <summary>
		/// Gets or sets the IdCongTy property.
		/// </summary>
		public System.Int64 IdCongTy
		{
			get { return _idCongTy; }
			set
			{
				if ( this.Entity != null )
					this.Entity.IdCongTy = value;
				
				_idCongTy = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				IdCongTy = ( values["IdCongTy"] != null ) ? (System.Int64) EntityUtil.ChangeType(values["IdCongTy"], typeof(System.Int64)) : (long)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("IdCongTy", IdCongTy);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("IdCongTy: {0}{1}",
								IdCongTy,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region CongTyColumn Enum
	
	/// <summary>
	/// Enumerate the CongTy columns.
	/// </summary>
	[Serializable]
	public enum CongTyColumn : int
	{
		/// <summary>
		/// IdCongTy : 
		/// </summary>
		[EnumTextValue("id_CongTy")]
		[ColumnEnum("id_CongTy", typeof(System.Int64), System.Data.DbType.Int64, true, false, false)]
		IdCongTy = 1,
		/// <summary>
		/// IdChuCongTy : 
		/// </summary>
		[EnumTextValue("id_ChuCongTy")]
		[ColumnEnum("id_ChuCongTy", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		IdChuCongTy = 2,
		/// <summary>
		/// IdDanhMuc : 
		/// </summary>
		[EnumTextValue("id_DanhMuc")]
		[ColumnEnum("id_DanhMuc", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		IdDanhMuc = 3,
		/// <summary>
		/// IdQuocGia : 
		/// </summary>
		[EnumTextValue("id_QuocGia")]
		[ColumnEnum("id_QuocGia", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		IdQuocGia = 4,
		/// <summary>
		/// IdThanhPho : 
		/// </summary>
		[EnumTextValue("id_ThanhPho")]
		[ColumnEnum("id_ThanhPho", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		IdThanhPho = 5,
		/// <summary>
		/// IdQuan : 
		/// </summary>
		[EnumTextValue("id_Quan")]
		[ColumnEnum("id_Quan", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		IdQuan = 6,
		/// <summary>
		/// IdDuong : 
		/// </summary>
		[EnumTextValue("id_Duong")]
		[ColumnEnum("id_Duong", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		IdDuong = 7,
		/// <summary>
		/// IdKhuVuc : 
		/// </summary>
		[EnumTextValue("id_KhuVuc")]
		[ColumnEnum("id_KhuVuc", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		IdKhuVuc = 8,
		/// <summary>
		/// SoNha : 
		/// </summary>
		[EnumTextValue("SoNha")]
		[ColumnEnum("SoNha", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		SoNha = 9,
		/// <summary>
		/// DienThoaiCd : 
		/// </summary>
		[EnumTextValue("DienThoaiCD")]
		[ColumnEnum("DienThoaiCD", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		DienThoaiCd = 10,
		/// <summary>
		/// DienThoaiDd : 
		/// </summary>
		[EnumTextValue("DienThoaiDD")]
		[ColumnEnum("DienThoaiDD", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		DienThoaiDd = 11,
		/// <summary>
		/// Fax : 
		/// </summary>
		[EnumTextValue("Fax")]
		[ColumnEnum("Fax", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Fax = 12,
		/// <summary>
		/// Email : 
		/// </summary>
		[EnumTextValue("Email")]
		[ColumnEnum("Email", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Email = 13,
		/// <summary>
		/// Website : 
		/// </summary>
		[EnumTextValue("Website")]
		[ColumnEnum("Website", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Website = 14,
		/// <summary>
		/// HinhThucTt : 
		/// </summary>
		[EnumTextValue("HinhThucTT")]
		[ColumnEnum("HinhThucTT", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		HinhThucTt = 15,
		/// <summary>
		/// ThoiGianPv : Luu duoi dang: Tu;den
		/// </summary>
		[EnumTextValue("ThoiGianPV")]
		[ColumnEnum("ThoiGianPV", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		ThoiGianPv = 16,
		/// <summary>
		/// AnhMinhHoa : 
		/// </summary>
		[EnumTextValue("AnhMinhHoa")]
		[ColumnEnum("AnhMinhHoa", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 500)]
		AnhMinhHoa = 17,
		/// <summary>
		/// GhiChu : 
		/// </summary>
		[EnumTextValue("GhiChu")]
		[ColumnEnum("GhiChu", typeof(System.String), System.Data.DbType.String, false, false, true, 1000)]
		GhiChu = 18,
		/// <summary>
		/// MoTaNgan : 
		/// </summary>
		[EnumTextValue("MoTaNgan")]
		[ColumnEnum("MoTaNgan", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		MoTaNgan = 19,
		/// <summary>
		/// MoTaChiTiet : 
		/// </summary>
		[EnumTextValue("MoTaChiTiet")]
		[ColumnEnum("MoTaChiTiet", typeof(System.String), System.Data.DbType.String, false, false, true)]
		MoTaChiTiet = 20,
		/// <summary>
		/// Flag : 
		/// </summary>
		[EnumTextValue("Flag")]
		[ColumnEnum("Flag", typeof(System.Byte), System.Data.DbType.Byte, false, false, true)]
		Flag = 21
	}//End enum

	#endregion CongTyColumn Enum

} // end namespace
