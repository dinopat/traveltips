<?xml version="1.0"?>
<doc>
    <assembly>
        <name>traveltips.Services</name>
    </assembly>
    <members>
        <member name="T:traveltips.Services.ThanhPhoService">
            <summary>
             An component type implementation of the 'tbl_ThanhPho' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:traveltips.Services.ThanhPhoServiceBase">
            <summary>
             An object representation of the 'tbl_ThanhPho' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ThanhPho.cs file instead.
             All custom implementations should be done in the <see cref="T:traveltips.Entities.ThanhPho"/> class.
             </remarks>
        </member>
        <member name="T:traveltips.Services.ServiceBase`2">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:traveltips.Services.ServiceBaseCore`2">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:traveltips.Services.IComponentService">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="P:traveltips.Services.IComponentService.ProcessorList">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:traveltips.Services.IComponentService.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:traveltips.Services.IComponentService.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="E:traveltips.Services.IComponentService.ProcessStarting">
            <summary>
            Event to indicate that a processor is about to begin.
            </summary>
        </member>
        <member name="E:traveltips.Services.IComponentService.ProcessEnded">
            <summary>
            Event to indicate that a processor has just ended.
            </summary>
        </member>
        <member name="M:traveltips.Services.ServiceBaseCore`2.Execute">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:traveltips.Services.ServiceBaseCore`2.Execute(System.Boolean)">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:traveltips.Services.ServiceBaseCore`2.OnProcessStarting(traveltips.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:traveltips.Services.ServiceBaseCore`2.OnProcessEnded(traveltips.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:traveltips.Services.ServiceBaseCore`2.Get(`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:traveltips.Services.ServiceBaseCore`2.GetAll">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:traveltips.Services.ServiceBaseCore`2.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:traveltips.Services.ServiceBaseCore`2.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:traveltips.Services.ServiceBaseCore`2.Insert(`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:traveltips.Services.ServiceBaseCore`2.BulkInsert(traveltips.Entities.TList{`0})">
            <summary>
            Efficiently inserts multiple rows into the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to insert.</param>
        </member>
        <member name="M:traveltips.Services.ServiceBaseCore`2.Update(`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:traveltips.Services.ServiceBaseCore`2.Delete(`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:traveltips.Services.ServiceBaseCore`2.Save(`0)">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:traveltips.Services.ServiceBaseCore`2.DeepLoad(`0,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[],traveltips.DAO.Bases.DeepSession)">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
            <param name="innerList">A collection of child types for easy access.</param>
        </member>
        <member name="M:traveltips.Services.ServiceBaseCore`2.DeepLoad(traveltips.Entities.TList{`0},System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:traveltips.Services.ServiceBaseCore`2.DeepSave(`0)">
            <summary>
            Deep Save the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:traveltips.Services.ServiceBaseCore`2.DeepSave(`0,traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:traveltips.Services.ServiceBaseCore`2.DeepSave(`0,traveltips.DAO.DeepSaveType,System.Type[],System.Collections.Hashtable)">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep save functionality.
            </remarks>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="M:traveltips.Services.ServiceBaseCore`2.DeepSave(traveltips.Entities.TList{`0},traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="P:traveltips.Services.ServiceBaseCore`2.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:traveltips.Services.ServiceBaseCore`2.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:traveltips.Services.ServiceBaseCore`2.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:traveltips.Services.ServiceBaseCore`2.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:traveltips.Services.ServiceBaseCore`2.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:traveltips.Services.ServiceBaseCore`2.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:traveltips.Services.ServiceBaseCore`2.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="E:traveltips.Services.ServiceBaseCore`2.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:traveltips.Services.ServiceBaseCore`2.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:traveltips.Entities.ThanhPho"/> instance .
            </summary>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.CreateThanhPho(System.Nullable{System.Int64},System.String,System.String,System.String,System.Nullable{System.Byte})">
            <summary>
             A simple factory method to create a new <see cref="T:traveltips.Entities.ThanhPho"/> instance.
            </summary>
            <param name="idQuocGia"></param>
            <param name="tenTp"></param>
            <param name="maTp"></param>
            <param name="mota"></param>
            <param name="flag"></param>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.GetByIdQuocGia(System.Nullable{System.Int64})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the FK_tbl_ThanhPho_tbl_QuocGia key.
            	FK_tbl_ThanhPho_tbl_QuocGia Description: 
            </summary>
            <param name="idQuocGia"></param>
            <returns>Returns a generic collection of ThanhPho objects.</returns>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.GetByIdQuocGia(System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the FK_tbl_ThanhPho_tbl_QuocGia key.
            	FK_tbl_ThanhPho_tbl_QuocGia Description: 
            </summary>
            <param name="idQuocGia"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:traveltips.Entities.TList`1"/> of <c>ThanhPho</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.Get(traveltips.Entities.ThanhPhoKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.GetByIdThanhPho(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_ThanhPho index.
            </summary>
            <param name="idThanhPho"></param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.ThanhPho"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.GetByIdThanhPho(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_ThanhPho index.
            </summary>
            <param name="idThanhPho"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.ThanhPho"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:traveltips.Entities.ThanhPho"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:traveltips.Entities.ThanhPho"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:traveltips.Entities.TList`1"/> </returns>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ThanhPho</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ThanhPho</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:traveltips.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ThanhPho</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ThanhPho} of <c>ThanhPho</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.Find(traveltips.DAO.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ThanhPho</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ThanhPho</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ThanhPho</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.Insert(traveltips.Entities.ThanhPho)">
            <summary>
            	public virtualmethod that Inserts a ThanhPho object into the datasource using a transaction.
            </summary>
            <param name="entity">ThanhPho object to Insert.</param>
            <remarks>After Inserting into the datasource, the ThanhPho object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ThanhPho entity = new ThanhPho();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ThanhPhoService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.Insert(traveltips.Entities.TList{traveltips.Entities.ThanhPho})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ThanhPho</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ThanhPho</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ThanhPho.
             <code><![CDATA[
             TList<ThanhPho> list = new TList<ThanhPho>();
             ThanhPho entity = new ThanhPho();
             entity.StringProperty = "foo";
             ThanhPho entity2 = new ThanhPho();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ThanhPhoService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.Update(traveltips.Entities.ThanhPho)">
            <summary>
            	public virtualmethod that Updates a ThanhPho object into the datasource using a transaction.
            </summary>
            <param name="entity">ThanhPho object to Update.</param>
            <remarks>After Updateing into the datasource, the ThanhPho object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ThanhPho entity = ThanhPhoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ThanhPhoService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.Update(traveltips.Entities.TList{traveltips.Entities.ThanhPho})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ThanhPho</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ThanhPho</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ThanhPho.
             <code><![CDATA[
             TList<ThanhPho> list = new TList<ThanhPho>();
             ThanhPho entity = new ThanhPho();
             entity.StringProperty = "foo";
             ThanhPho entity2 = new ThanhPho();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ThanhPhoService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.Save(traveltips.Entities.ThanhPho)">
            <summary>
            	public virtualmethod that Saves a ThanhPho object into the datasource using a transaction.
            </summary>
            <param name="entity">ThanhPho object to Save.</param>
            <remarks>After Saveing into the datasource, the ThanhPho object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ThanhPho entity = ThanhPhoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ThanhPhoService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.Save(traveltips.Entities.TList{traveltips.Entities.ThanhPho})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ThanhPho</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ThanhPho</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ThanhPho.
             <code><![CDATA[
             TList<ThanhPho> list = new TList<ThanhPho>();
             ThanhPho entity = new ThanhPho();
             entity.StringProperty = "foo";
             ThanhPho entity2 = new ThanhPho();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ThanhPhoService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.Delete(traveltips.Entities.ThanhPho)">
            <summary>
            	public virtualmethod that Deletes a ThanhPho object into the datasource using a transaction.
            </summary>
            <param name="entity">ThanhPho object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ThanhPho object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ThanhPho entity = ThanhPhoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ThanhPhoService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.Delete(traveltips.Entities.TList{traveltips.Entities.ThanhPho})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ThanhPho</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ThanhPho</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ThanhPho.
             <code><![CDATA[
             TList<ThanhPho> list = new TList<ThanhPho>();
             ThanhPho entity = new ThanhPho();
             entity.StringProperty = "foo";
             ThanhPho entity2 = new ThanhPho();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ThanhPhoService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.Delete(traveltips.Entities.ThanhPhoKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 idThanhPho
            </summary>
            <param name="idThanhPho">ThanhPho pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.DeepLoadByIdThanhPho(System.Int64,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:traveltips.Entities.ThanhPho"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <param name="idThanhPho"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ThanhPho Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.ThanhPho"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.DeepLoad(traveltips.Entities.ThanhPho)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ThanhPho Object</param>
            <remarks>
            <seealso cref="M:traveltips.Services.ThanhPhoServiceBase.DeepLoad(traveltips.Entities.ThanhPho)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.DeepLoad(traveltips.Entities.ThanhPho,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.ThanhPhoServiceBase.DeepLoad(traveltips.Entities.ThanhPho)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ThanhPho Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.DeepLoad(traveltips.Entities.ThanhPho,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:traveltips.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:traveltips.Entities.ThanhPho"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ThanhPho Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.ThanhPho})">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.ThanhPhoServiceBase.DeepLoad(traveltips.Entities.ThanhPho)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.ThanhPho},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.ThanhPhoServiceBase.DeepLoad(traveltips.Entities.ThanhPho)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.ThanhPho},System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:traveltips.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:traveltips.DAO.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:traveltips.Entities.ThanhPho"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.DeepSave(traveltips.Entities.ThanhPho)">
            <summary>
            public virtualDeep Saves the <see cref="T:traveltips.Entities.ThanhPho"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ThanhPho Object</param>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.DeepSave(traveltips.Entities.ThanhPho,traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ThanhPho object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ThanhPho Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ThanhPho</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.ThanhPho})">
            <summary>
            Deep Save the entire <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ThanhPho} Object</param>
        </member>
        <member name="M:traveltips.Services.ThanhPhoServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.ThanhPho},traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:traveltips.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ThanhPho Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:traveltips.Services.ThanhPhoServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:traveltips.Services.ThanhPhoService.#ctor">
            <summary>
            Initializes a new instance of the ThanhPhoService class.
            </summary>
        </member>
        <member name="T:traveltips.Services.LabelNnServiceBase">
            <summary>
             An object representation of the 'tbl_LabelNN' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the LabelNn.cs file instead.
             All custom implementations should be done in the <see cref="T:traveltips.Entities.LabelNn"/> class.
             </remarks>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:traveltips.Entities.LabelNn"/> instance .
            </summary>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.CreateLabelNn(System.String,System.String,System.String,System.Nullable{System.Byte})">
            <summary>
             A simple factory method to create a new <see cref="T:traveltips.Entities.LabelNn"/> instance.
            </summary>
            <param name="maLabel"></param>
            <param name="tenLabel"></param>
            <param name="moTa"></param>
            <param name="flag"></param>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.Get(traveltips.Entities.LabelNnKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.GetByIdLabel(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_Label index.
            </summary>
            <param name="idLabel"></param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.LabelNn"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.GetByIdLabel(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_Label index.
            </summary>
            <param name="idLabel"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.LabelNn"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:traveltips.Entities.LabelNn"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:traveltips.Entities.LabelNn"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:traveltips.Entities.TList`1"/> </returns>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>LabelNn</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>LabelNn</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:traveltips.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>LabelNn</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{LabelNn} of <c>LabelNn</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.Find(traveltips.DAO.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>LabelNn</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>LabelNn</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>LabelNn</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.Insert(traveltips.Entities.LabelNn)">
            <summary>
            	public virtualmethod that Inserts a LabelNn object into the datasource using a transaction.
            </summary>
            <param name="entity">LabelNn object to Insert.</param>
            <remarks>After Inserting into the datasource, the LabelNn object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            LabelNn entity = new LabelNn();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	LabelNnService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.Insert(traveltips.Entities.TList{traveltips.Entities.LabelNn})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LabelNn</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>LabelNn</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of LabelNn.
             <code><![CDATA[
             TList<LabelNn> list = new TList<LabelNn>();
             LabelNn entity = new LabelNn();
             entity.StringProperty = "foo";
             LabelNn entity2 = new LabelNn();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LabelNnService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.Update(traveltips.Entities.LabelNn)">
            <summary>
            	public virtualmethod that Updates a LabelNn object into the datasource using a transaction.
            </summary>
            <param name="entity">LabelNn object to Update.</param>
            <remarks>After Updateing into the datasource, the LabelNn object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            LabelNn entity = LabelNnService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	LabelNnService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.Update(traveltips.Entities.TList{traveltips.Entities.LabelNn})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LabelNn</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>LabelNn</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of LabelNn.
             <code><![CDATA[
             TList<LabelNn> list = new TList<LabelNn>();
             LabelNn entity = new LabelNn();
             entity.StringProperty = "foo";
             LabelNn entity2 = new LabelNn();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LabelNnService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.Save(traveltips.Entities.LabelNn)">
            <summary>
            	public virtualmethod that Saves a LabelNn object into the datasource using a transaction.
            </summary>
            <param name="entity">LabelNn object to Save.</param>
            <remarks>After Saveing into the datasource, the LabelNn object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            LabelNn entity = LabelNnService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	LabelNnService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.Save(traveltips.Entities.TList{traveltips.Entities.LabelNn})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LabelNn</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>LabelNn</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of LabelNn.
             <code><![CDATA[
             TList<LabelNn> list = new TList<LabelNn>();
             LabelNn entity = new LabelNn();
             entity.StringProperty = "foo";
             LabelNn entity2 = new LabelNn();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LabelNnService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.Delete(traveltips.Entities.LabelNn)">
            <summary>
            	public virtualmethod that Deletes a LabelNn object into the datasource using a transaction.
            </summary>
            <param name="entity">LabelNn object to Delete.</param>
            <remarks>After Deleteing into the datasource, the LabelNn object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            LabelNn entity = LabelNnService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	LabelNnService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.Delete(traveltips.Entities.TList{traveltips.Entities.LabelNn})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LabelNn</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>LabelNn</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of LabelNn.
             <code><![CDATA[
             TList<LabelNn> list = new TList<LabelNn>();
             LabelNn entity = new LabelNn();
             entity.StringProperty = "foo";
             LabelNn entity2 = new LabelNn();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LabelNnService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.Delete(traveltips.Entities.LabelNnKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 idLabel
            </summary>
            <param name="idLabel">LabelNn pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.DeepLoadByIdLabel(System.Int64,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:traveltips.Entities.LabelNn"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <param name="idLabel"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LabelNn Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.LabelNn"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.DeepLoad(traveltips.Entities.LabelNn)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">LabelNn Object</param>
            <remarks>
            <seealso cref="M:traveltips.Services.LabelNnServiceBase.DeepLoad(traveltips.Entities.LabelNn)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.DeepLoad(traveltips.Entities.LabelNn,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.LabelNnServiceBase.DeepLoad(traveltips.Entities.LabelNn)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">LabelNn Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.DeepLoad(traveltips.Entities.LabelNn,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:traveltips.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:traveltips.Entities.LabelNn"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LabelNn Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.LabelNn})">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.LabelNnServiceBase.DeepLoad(traveltips.Entities.LabelNn)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.LabelNn},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.LabelNnServiceBase.DeepLoad(traveltips.Entities.LabelNn)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.LabelNn},System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:traveltips.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:traveltips.DAO.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:traveltips.Entities.LabelNn"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.DeepSave(traveltips.Entities.LabelNn)">
            <summary>
            public virtualDeep Saves the <see cref="T:traveltips.Entities.LabelNn"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">LabelNn Object</param>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.DeepSave(traveltips.Entities.LabelNn,traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the LabelNn object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">LabelNn Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>LabelNn</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.LabelNn})">
            <summary>
            Deep Save the entire <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{LabelNn} Object</param>
        </member>
        <member name="M:traveltips.Services.LabelNnServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.LabelNn},traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:traveltips.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LabelNn Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:traveltips.Services.LabelNnServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:traveltips.Services.DanhMucService">
            <summary>
             An component type implementation of the 'tbl_DanhMuc' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:traveltips.Services.DanhMucServiceBase">
            <summary>
             An object representation of the 'tbl_DanhMuc' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the DanhMuc.cs file instead.
             All custom implementations should be done in the <see cref="T:traveltips.Entities.DanhMuc"/> class.
             </remarks>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:traveltips.Entities.DanhMuc"/> instance .
            </summary>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.CreateDanhMuc(System.Nullable{System.Int64},System.String,System.String,System.String,System.Nullable{System.Byte})">
            <summary>
             A simple factory method to create a new <see cref="T:traveltips.Entities.DanhMuc"/> instance.
            </summary>
            <param name="idDmCha"></param>
            <param name="tenDanhMuc"></param>
            <param name="maDanhMuc"></param>
            <param name="moTa"></param>
            <param name="flag"></param>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.Get(traveltips.Entities.DanhMucKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.GetByIdDanhMuc(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_DanhMuc index.
            </summary>
            <param name="idDanhMuc"></param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.DanhMuc"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.GetByIdDanhMuc(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_DanhMuc index.
            </summary>
            <param name="idDanhMuc"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.DanhMuc"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:traveltips.Entities.DanhMuc"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:traveltips.Entities.DanhMuc"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:traveltips.Entities.TList`1"/> </returns>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DanhMuc</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DanhMuc</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:traveltips.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DanhMuc</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{DanhMuc} of <c>DanhMuc</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.Find(traveltips.DAO.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>DanhMuc</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>DanhMuc</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>DanhMuc</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.Insert(traveltips.Entities.DanhMuc)">
            <summary>
            	public virtualmethod that Inserts a DanhMuc object into the datasource using a transaction.
            </summary>
            <param name="entity">DanhMuc object to Insert.</param>
            <remarks>After Inserting into the datasource, the DanhMuc object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            DanhMuc entity = new DanhMuc();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	DanhMucService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.Insert(traveltips.Entities.TList{traveltips.Entities.DanhMuc})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DanhMuc</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>DanhMuc</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of DanhMuc.
             <code><![CDATA[
             TList<DanhMuc> list = new TList<DanhMuc>();
             DanhMuc entity = new DanhMuc();
             entity.StringProperty = "foo";
             DanhMuc entity2 = new DanhMuc();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DanhMucService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.Update(traveltips.Entities.DanhMuc)">
            <summary>
            	public virtualmethod that Updates a DanhMuc object into the datasource using a transaction.
            </summary>
            <param name="entity">DanhMuc object to Update.</param>
            <remarks>After Updateing into the datasource, the DanhMuc object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            DanhMuc entity = DanhMucService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	DanhMucService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.Update(traveltips.Entities.TList{traveltips.Entities.DanhMuc})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DanhMuc</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>DanhMuc</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of DanhMuc.
             <code><![CDATA[
             TList<DanhMuc> list = new TList<DanhMuc>();
             DanhMuc entity = new DanhMuc();
             entity.StringProperty = "foo";
             DanhMuc entity2 = new DanhMuc();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DanhMucService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.Save(traveltips.Entities.DanhMuc)">
            <summary>
            	public virtualmethod that Saves a DanhMuc object into the datasource using a transaction.
            </summary>
            <param name="entity">DanhMuc object to Save.</param>
            <remarks>After Saveing into the datasource, the DanhMuc object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            DanhMuc entity = DanhMucService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	DanhMucService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.Save(traveltips.Entities.TList{traveltips.Entities.DanhMuc})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DanhMuc</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>DanhMuc</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of DanhMuc.
             <code><![CDATA[
             TList<DanhMuc> list = new TList<DanhMuc>();
             DanhMuc entity = new DanhMuc();
             entity.StringProperty = "foo";
             DanhMuc entity2 = new DanhMuc();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DanhMucService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.Delete(traveltips.Entities.DanhMuc)">
            <summary>
            	public virtualmethod that Deletes a DanhMuc object into the datasource using a transaction.
            </summary>
            <param name="entity">DanhMuc object to Delete.</param>
            <remarks>After Deleteing into the datasource, the DanhMuc object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            DanhMuc entity = DanhMucService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	DanhMucService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.Delete(traveltips.Entities.TList{traveltips.Entities.DanhMuc})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DanhMuc</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>DanhMuc</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of DanhMuc.
             <code><![CDATA[
             TList<DanhMuc> list = new TList<DanhMuc>();
             DanhMuc entity = new DanhMuc();
             entity.StringProperty = "foo";
             DanhMuc entity2 = new DanhMuc();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DanhMucService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.Delete(traveltips.Entities.DanhMucKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 idDanhMuc
            </summary>
            <param name="idDanhMuc">DanhMuc pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.DeepLoadByIdDanhMuc(System.Int64,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:traveltips.Entities.DanhMuc"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <param name="idDanhMuc"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">DanhMuc Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.DanhMuc"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.DeepLoad(traveltips.Entities.DanhMuc)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">DanhMuc Object</param>
            <remarks>
            <seealso cref="M:traveltips.Services.DanhMucServiceBase.DeepLoad(traveltips.Entities.DanhMuc)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.DeepLoad(traveltips.Entities.DanhMuc,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.DanhMucServiceBase.DeepLoad(traveltips.Entities.DanhMuc)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">DanhMuc Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.DeepLoad(traveltips.Entities.DanhMuc,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:traveltips.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:traveltips.Entities.DanhMuc"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">DanhMuc Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.DanhMuc})">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.DanhMucServiceBase.DeepLoad(traveltips.Entities.DanhMuc)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.DanhMuc},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.DanhMucServiceBase.DeepLoad(traveltips.Entities.DanhMuc)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.DanhMuc},System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:traveltips.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:traveltips.DAO.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:traveltips.Entities.DanhMuc"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.DeepSave(traveltips.Entities.DanhMuc)">
            <summary>
            public virtualDeep Saves the <see cref="T:traveltips.Entities.DanhMuc"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">DanhMuc Object</param>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.DeepSave(traveltips.Entities.DanhMuc,traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the DanhMuc object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">DanhMuc Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>DanhMuc</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.DanhMuc})">
            <summary>
            Deep Save the entire <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{DanhMuc} Object</param>
        </member>
        <member name="M:traveltips.Services.DanhMucServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.DanhMuc},traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:traveltips.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">DanhMuc Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:traveltips.Services.DanhMucServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:traveltips.Services.DanhMucService.#ctor">
            <summary>
            Initializes a new instance of the DanhMucService class.
            </summary>
        </member>
        <member name="T:traveltips.Services.QuanService">
            <summary>
             An component type implementation of the 'tbl_Quan' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:traveltips.Services.QuanServiceBase">
            <summary>
             An object representation of the 'tbl_Quan' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Quan.cs file instead.
             All custom implementations should be done in the <see cref="T:traveltips.Entities.Quan"/> class.
             </remarks>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:traveltips.Entities.Quan"/> instance .
            </summary>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.CreateQuan(System.Nullable{System.Int64},System.String,System.String,System.String,System.Nullable{System.Byte})">
            <summary>
             A simple factory method to create a new <see cref="T:traveltips.Entities.Quan"/> instance.
            </summary>
            <param name="idThanhPho"></param>
            <param name="tenQuan"></param>
            <param name="maQuan"></param>
            <param name="moTa"></param>
            <param name="flag"></param>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.GetByIdThanhPho(System.Nullable{System.Int64})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the FK_tbl_Quan_tbl_ThanhPho key.
            	FK_tbl_Quan_tbl_ThanhPho Description: 
            </summary>
            <param name="idThanhPho"></param>
            <returns>Returns a generic collection of Quan objects.</returns>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.GetByIdThanhPho(System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the FK_tbl_Quan_tbl_ThanhPho key.
            	FK_tbl_Quan_tbl_ThanhPho Description: 
            </summary>
            <param name="idThanhPho"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:traveltips.Entities.TList`1"/> of <c>Quan</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.Get(traveltips.Entities.QuanKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.GetByIdQuan(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_Quan index.
            </summary>
            <param name="idQuan"></param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.Quan"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.GetByIdQuan(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_Quan index.
            </summary>
            <param name="idQuan"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.Quan"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:traveltips.Entities.Quan"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:traveltips.Entities.Quan"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:traveltips.Entities.TList`1"/> </returns>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Quan</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Quan</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:traveltips.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Quan</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Quan} of <c>Quan</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.Find(traveltips.DAO.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Quan</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Quan</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Quan</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.Insert(traveltips.Entities.Quan)">
            <summary>
            	public virtualmethod that Inserts a Quan object into the datasource using a transaction.
            </summary>
            <param name="entity">Quan object to Insert.</param>
            <remarks>After Inserting into the datasource, the Quan object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Quan entity = new Quan();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	QuanService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.Insert(traveltips.Entities.TList{traveltips.Entities.Quan})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Quan</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Quan</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Quan.
             <code><![CDATA[
             TList<Quan> list = new TList<Quan>();
             Quan entity = new Quan();
             entity.StringProperty = "foo";
             Quan entity2 = new Quan();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuanService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.Update(traveltips.Entities.Quan)">
            <summary>
            	public virtualmethod that Updates a Quan object into the datasource using a transaction.
            </summary>
            <param name="entity">Quan object to Update.</param>
            <remarks>After Updateing into the datasource, the Quan object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Quan entity = QuanService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	QuanService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.Update(traveltips.Entities.TList{traveltips.Entities.Quan})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Quan</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Quan</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Quan.
             <code><![CDATA[
             TList<Quan> list = new TList<Quan>();
             Quan entity = new Quan();
             entity.StringProperty = "foo";
             Quan entity2 = new Quan();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuanService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.Save(traveltips.Entities.Quan)">
            <summary>
            	public virtualmethod that Saves a Quan object into the datasource using a transaction.
            </summary>
            <param name="entity">Quan object to Save.</param>
            <remarks>After Saveing into the datasource, the Quan object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Quan entity = QuanService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	QuanService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.Save(traveltips.Entities.TList{traveltips.Entities.Quan})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Quan</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Quan</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Quan.
             <code><![CDATA[
             TList<Quan> list = new TList<Quan>();
             Quan entity = new Quan();
             entity.StringProperty = "foo";
             Quan entity2 = new Quan();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuanService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.Delete(traveltips.Entities.Quan)">
            <summary>
            	public virtualmethod that Deletes a Quan object into the datasource using a transaction.
            </summary>
            <param name="entity">Quan object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Quan object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Quan entity = QuanService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	QuanService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.Delete(traveltips.Entities.TList{traveltips.Entities.Quan})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Quan</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Quan</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Quan.
             <code><![CDATA[
             TList<Quan> list = new TList<Quan>();
             Quan entity = new Quan();
             entity.StringProperty = "foo";
             Quan entity2 = new Quan();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuanService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.Delete(traveltips.Entities.QuanKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 idQuan
            </summary>
            <param name="idQuan">Quan pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.DeepLoadByIdQuan(System.Int64,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:traveltips.Entities.Quan"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <param name="idQuan"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Quan Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.Quan"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.DeepLoad(traveltips.Entities.Quan)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Quan Object</param>
            <remarks>
            <seealso cref="M:traveltips.Services.QuanServiceBase.DeepLoad(traveltips.Entities.Quan)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.DeepLoad(traveltips.Entities.Quan,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.QuanServiceBase.DeepLoad(traveltips.Entities.Quan)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Quan Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.DeepLoad(traveltips.Entities.Quan,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:traveltips.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:traveltips.Entities.Quan"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Quan Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.Quan})">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.QuanServiceBase.DeepLoad(traveltips.Entities.Quan)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.Quan},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.QuanServiceBase.DeepLoad(traveltips.Entities.Quan)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.Quan},System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:traveltips.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:traveltips.DAO.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:traveltips.Entities.Quan"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.DeepSave(traveltips.Entities.Quan)">
            <summary>
            public virtualDeep Saves the <see cref="T:traveltips.Entities.Quan"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Quan Object</param>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.DeepSave(traveltips.Entities.Quan,traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Quan object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Quan Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Quan</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.Quan})">
            <summary>
            Deep Save the entire <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Quan} Object</param>
        </member>
        <member name="M:traveltips.Services.QuanServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.Quan},traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:traveltips.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Quan Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:traveltips.Services.QuanServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:traveltips.Services.QuanService.#ctor">
            <summary>
            Initializes a new instance of the QuanService class.
            </summary>
        </member>
        <member name="T:traveltips.Services.CommentServiceBase">
            <summary>
             An object representation of the 'tbl_Comment' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Comment.cs file instead.
             All custom implementations should be done in the <see cref="T:traveltips.Entities.Comment"/> class.
             </remarks>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:traveltips.Entities.Comment"/> instance .
            </summary>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.CreateComment(System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Byte})">
            <summary>
             A simple factory method to create a new <see cref="T:traveltips.Entities.Comment"/> instance.
            </summary>
            <param name="idUser"></param>
            <param name="idCongty"></param>
            <param name="tieuDe">Id trong table Label</param>
            <param name="noiDung">id truy xuat trong bang Label</param>
            <param name="flag"></param>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.GetByIdCongty(System.Nullable{System.Int64})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the FK_tbl_Comment_tbl_CongTy key.
            	FK_tbl_Comment_tbl_CongTy Description: 
            </summary>
            <param name="idCongty"></param>
            <returns>Returns a generic collection of Comment objects.</returns>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.GetByIdCongty(System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the FK_tbl_Comment_tbl_CongTy key.
            	FK_tbl_Comment_tbl_CongTy Description: 
            </summary>
            <param name="idCongty"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:traveltips.Entities.TList`1"/> of <c>Comment</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.GetByIdUser(System.Nullable{System.Int64})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the FK_tbl_Comment_tbl_User key.
            	FK_tbl_Comment_tbl_User Description: 
            </summary>
            <param name="idUser"></param>
            <returns>Returns a generic collection of Comment objects.</returns>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.GetByIdUser(System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the FK_tbl_Comment_tbl_User key.
            	FK_tbl_Comment_tbl_User Description: 
            </summary>
            <param name="idUser"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:traveltips.Entities.TList`1"/> of <c>Comment</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.Get(traveltips.Entities.CommentKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.GetByIdComment(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_Feedback index.
            </summary>
            <param name="idComment"></param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.Comment"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.GetByIdComment(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_Feedback index.
            </summary>
            <param name="idComment"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.Comment"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:traveltips.Entities.Comment"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:traveltips.Entities.Comment"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:traveltips.Entities.TList`1"/> </returns>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Comment</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Comment</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:traveltips.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Comment</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Comment} of <c>Comment</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.Find(traveltips.DAO.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Comment</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Comment</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Comment</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.Insert(traveltips.Entities.Comment)">
            <summary>
            	public virtualmethod that Inserts a Comment object into the datasource using a transaction.
            </summary>
            <param name="entity">Comment object to Insert.</param>
            <remarks>After Inserting into the datasource, the Comment object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Comment entity = new Comment();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CommentService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.Insert(traveltips.Entities.TList{traveltips.Entities.Comment})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Comment</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Comment</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Comment.
             <code><![CDATA[
             TList<Comment> list = new TList<Comment>();
             Comment entity = new Comment();
             entity.StringProperty = "foo";
             Comment entity2 = new Comment();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CommentService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.Update(traveltips.Entities.Comment)">
            <summary>
            	public virtualmethod that Updates a Comment object into the datasource using a transaction.
            </summary>
            <param name="entity">Comment object to Update.</param>
            <remarks>After Updateing into the datasource, the Comment object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Comment entity = CommentService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CommentService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.Update(traveltips.Entities.TList{traveltips.Entities.Comment})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Comment</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Comment</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Comment.
             <code><![CDATA[
             TList<Comment> list = new TList<Comment>();
             Comment entity = new Comment();
             entity.StringProperty = "foo";
             Comment entity2 = new Comment();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CommentService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.Save(traveltips.Entities.Comment)">
            <summary>
            	public virtualmethod that Saves a Comment object into the datasource using a transaction.
            </summary>
            <param name="entity">Comment object to Save.</param>
            <remarks>After Saveing into the datasource, the Comment object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Comment entity = CommentService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CommentService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.Save(traveltips.Entities.TList{traveltips.Entities.Comment})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Comment</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Comment</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Comment.
             <code><![CDATA[
             TList<Comment> list = new TList<Comment>();
             Comment entity = new Comment();
             entity.StringProperty = "foo";
             Comment entity2 = new Comment();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CommentService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.Delete(traveltips.Entities.Comment)">
            <summary>
            	public virtualmethod that Deletes a Comment object into the datasource using a transaction.
            </summary>
            <param name="entity">Comment object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Comment object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Comment entity = CommentService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CommentService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.Delete(traveltips.Entities.TList{traveltips.Entities.Comment})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Comment</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Comment</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Comment.
             <code><![CDATA[
             TList<Comment> list = new TList<Comment>();
             Comment entity = new Comment();
             entity.StringProperty = "foo";
             Comment entity2 = new Comment();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CommentService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.Delete(traveltips.Entities.CommentKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 idComment
            </summary>
            <param name="idComment">Comment pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.DeepLoadByIdComment(System.Int64,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:traveltips.Entities.Comment"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <param name="idComment"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Comment Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.Comment"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.DeepLoad(traveltips.Entities.Comment)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Comment Object</param>
            <remarks>
            <seealso cref="M:traveltips.Services.CommentServiceBase.DeepLoad(traveltips.Entities.Comment)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.DeepLoad(traveltips.Entities.Comment,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.CommentServiceBase.DeepLoad(traveltips.Entities.Comment)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Comment Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.DeepLoad(traveltips.Entities.Comment,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:traveltips.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:traveltips.Entities.Comment"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Comment Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.Comment})">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.CommentServiceBase.DeepLoad(traveltips.Entities.Comment)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.Comment},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.CommentServiceBase.DeepLoad(traveltips.Entities.Comment)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.Comment},System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:traveltips.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:traveltips.DAO.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:traveltips.Entities.Comment"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.DeepSave(traveltips.Entities.Comment)">
            <summary>
            public virtualDeep Saves the <see cref="T:traveltips.Entities.Comment"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Comment Object</param>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.DeepSave(traveltips.Entities.Comment,traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Comment object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Comment Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Comment</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.Comment})">
            <summary>
            Deep Save the entire <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Comment} Object</param>
        </member>
        <member name="M:traveltips.Services.CommentServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.Comment},traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:traveltips.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Comment Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:traveltips.Services.CommentServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:traveltips.Services.CommentService">
            <summary>
             An component type implementation of the 'tbl_Comment' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:traveltips.Services.CommentService.#ctor">
            <summary>
            Initializes a new instance of the CommentService class.
            </summary>
        </member>
        <member name="T:traveltips.Services.DichVuServiceBase">
            <summary>
             An object representation of the 'tbl_DichVu' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the DichVu.cs file instead.
             All custom implementations should be done in the <see cref="T:traveltips.Entities.DichVu"/> class.
             </remarks>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:traveltips.Entities.DichVu"/> instance .
            </summary>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.CreateDichVu(System.Nullable{System.Int64},System.String,System.String,System.String,System.String,System.Nullable{System.Byte})">
            <summary>
             A simple factory method to create a new <see cref="T:traveltips.Entities.DichVu"/> instance.
            </summary>
            <param name="idCongTy"></param>
            <param name="tenDv"></param>
            <param name="maDv"></param>
            <param name="motaNgan"></param>
            <param name="motaChiTiet"></param>
            <param name="flag"></param>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.Get(traveltips.Entities.DichVuKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.GetByIdDichVu(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_DichVu index.
            </summary>
            <param name="idDichVu"></param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.DichVu"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.GetByIdDichVu(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_DichVu index.
            </summary>
            <param name="idDichVu"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.DichVu"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:traveltips.Entities.DichVu"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:traveltips.Entities.DichVu"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:traveltips.Entities.TList`1"/> </returns>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DichVu</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DichVu</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:traveltips.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DichVu</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{DichVu} of <c>DichVu</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.Find(traveltips.DAO.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>DichVu</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>DichVu</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>DichVu</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.Insert(traveltips.Entities.DichVu)">
            <summary>
            	public virtualmethod that Inserts a DichVu object into the datasource using a transaction.
            </summary>
            <param name="entity">DichVu object to Insert.</param>
            <remarks>After Inserting into the datasource, the DichVu object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            DichVu entity = new DichVu();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	DichVuService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.Insert(traveltips.Entities.TList{traveltips.Entities.DichVu})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DichVu</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>DichVu</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of DichVu.
             <code><![CDATA[
             TList<DichVu> list = new TList<DichVu>();
             DichVu entity = new DichVu();
             entity.StringProperty = "foo";
             DichVu entity2 = new DichVu();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DichVuService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.Update(traveltips.Entities.DichVu)">
            <summary>
            	public virtualmethod that Updates a DichVu object into the datasource using a transaction.
            </summary>
            <param name="entity">DichVu object to Update.</param>
            <remarks>After Updateing into the datasource, the DichVu object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            DichVu entity = DichVuService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	DichVuService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.Update(traveltips.Entities.TList{traveltips.Entities.DichVu})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DichVu</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>DichVu</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of DichVu.
             <code><![CDATA[
             TList<DichVu> list = new TList<DichVu>();
             DichVu entity = new DichVu();
             entity.StringProperty = "foo";
             DichVu entity2 = new DichVu();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DichVuService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.Save(traveltips.Entities.DichVu)">
            <summary>
            	public virtualmethod that Saves a DichVu object into the datasource using a transaction.
            </summary>
            <param name="entity">DichVu object to Save.</param>
            <remarks>After Saveing into the datasource, the DichVu object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            DichVu entity = DichVuService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	DichVuService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.Save(traveltips.Entities.TList{traveltips.Entities.DichVu})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DichVu</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>DichVu</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of DichVu.
             <code><![CDATA[
             TList<DichVu> list = new TList<DichVu>();
             DichVu entity = new DichVu();
             entity.StringProperty = "foo";
             DichVu entity2 = new DichVu();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DichVuService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.Delete(traveltips.Entities.DichVu)">
            <summary>
            	public virtualmethod that Deletes a DichVu object into the datasource using a transaction.
            </summary>
            <param name="entity">DichVu object to Delete.</param>
            <remarks>After Deleteing into the datasource, the DichVu object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            DichVu entity = DichVuService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	DichVuService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.Delete(traveltips.Entities.TList{traveltips.Entities.DichVu})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DichVu</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>DichVu</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of DichVu.
             <code><![CDATA[
             TList<DichVu> list = new TList<DichVu>();
             DichVu entity = new DichVu();
             entity.StringProperty = "foo";
             DichVu entity2 = new DichVu();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DichVuService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.Delete(traveltips.Entities.DichVuKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 idDichVu
            </summary>
            <param name="idDichVu">DichVu pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.DeepLoadByIdDichVu(System.Int64,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:traveltips.Entities.DichVu"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <param name="idDichVu"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">DichVu Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.DichVu"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.DeepLoad(traveltips.Entities.DichVu)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">DichVu Object</param>
            <remarks>
            <seealso cref="M:traveltips.Services.DichVuServiceBase.DeepLoad(traveltips.Entities.DichVu)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.DeepLoad(traveltips.Entities.DichVu,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.DichVuServiceBase.DeepLoad(traveltips.Entities.DichVu)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">DichVu Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.DeepLoad(traveltips.Entities.DichVu,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:traveltips.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:traveltips.Entities.DichVu"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">DichVu Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.DichVu})">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.DichVuServiceBase.DeepLoad(traveltips.Entities.DichVu)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.DichVu},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.DichVuServiceBase.DeepLoad(traveltips.Entities.DichVu)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.DichVu},System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:traveltips.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:traveltips.DAO.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:traveltips.Entities.DichVu"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.DeepSave(traveltips.Entities.DichVu)">
            <summary>
            public virtualDeep Saves the <see cref="T:traveltips.Entities.DichVu"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">DichVu Object</param>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.DeepSave(traveltips.Entities.DichVu,traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the DichVu object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">DichVu Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>DichVu</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.DichVu})">
            <summary>
            Deep Save the entire <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{DichVu} Object</param>
        </member>
        <member name="M:traveltips.Services.DichVuServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.DichVu},traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:traveltips.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">DichVu Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:traveltips.Services.DichVuServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:traveltips.Services.ServiceResult">
            <summary>
            The class provides a notification pattern for the processor execution.
            </summary>
        </member>
        <member name="P:traveltips.Services.ServiceResult.HasErrors">
            <summary>
               Determines whethere the containing service, has errors.
            </summary>
        </member>
        <member name="P:traveltips.Services.ServiceResult.Error">
            <summary>
               Provides a string of errors accumulated with a new line of delimeted errors.
            </summary>
        </member>
        <member name="P:traveltips.Services.ServiceResult.ProcessBrokenRuleLists">
            <summary>
               Provides an aggregated group of BrokenRuleList for each of the executed processes.
            </summary>
        </member>
        <member name="P:traveltips.Services.ServiceResult.ProcessorResultList">
            <summary>
               Determines whethere the containing processs results that were enlisted in the service.
            </summary>
        </member>
        <member name="P:traveltips.Services.ServiceResult.ExceptionList">
             <summary>
            	Provides the List of UnHandled Exceptions that occured during processing.
             </summary>
            <value>A list of rules that were broken in the process</value>		
        </member>
        <member name="T:traveltips.Services.TuDienService">
            <summary>
             An component type implementation of the 'tbl_TuDien' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:traveltips.Services.TuDienServiceBase">
            <summary>
             An object representation of the 'tbl_TuDien' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the TuDien.cs file instead.
             All custom implementations should be done in the <see cref="T:traveltips.Entities.TuDien"/> class.
             </remarks>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:traveltips.Entities.TuDien"/> instance .
            </summary>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.CreateTuDien(System.Nullable{System.Int64},System.String,System.String,System.String,System.String,System.Nullable{System.Byte})">
            <summary>
             A simple factory method to create a new <see cref="T:traveltips.Entities.TuDien"/> instance.
            </summary>
            <param name="idDanhMuc"></param>
            <param name="tenTu"></param>
            <param name="maTu"></param>
            <param name="nhomTu">NhomTu: Dai dien cho mot nhom nhat dinh phai co tu dien (phuc vu cho viec Load len theo nhom). Vi du: Mon An, Thuc Uong, Quoc Gia, Tinh, Thanh Pho,......</param>
            <param name="moTa"></param>
            <param name="flag"></param>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.Get(traveltips.Entities.TuDienKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.GetByIdTuDien(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_TuDien index.
            </summary>
            <param name="idTuDien"></param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.TuDien"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.GetByIdTuDien(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_TuDien index.
            </summary>
            <param name="idTuDien"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.TuDien"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:traveltips.Entities.TuDien"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:traveltips.Entities.TuDien"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:traveltips.Entities.TList`1"/> </returns>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TuDien</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TuDien</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:traveltips.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TuDien</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{TuDien} of <c>TuDien</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.Find(traveltips.DAO.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>TuDien</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>TuDien</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>TuDien</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.Insert(traveltips.Entities.TuDien)">
            <summary>
            	public virtualmethod that Inserts a TuDien object into the datasource using a transaction.
            </summary>
            <param name="entity">TuDien object to Insert.</param>
            <remarks>After Inserting into the datasource, the TuDien object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            TuDien entity = new TuDien();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	TuDienService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.Insert(traveltips.Entities.TList{traveltips.Entities.TuDien})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TuDien</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>TuDien</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of TuDien.
             <code><![CDATA[
             TList<TuDien> list = new TList<TuDien>();
             TuDien entity = new TuDien();
             entity.StringProperty = "foo";
             TuDien entity2 = new TuDien();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TuDienService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.Update(traveltips.Entities.TuDien)">
            <summary>
            	public virtualmethod that Updates a TuDien object into the datasource using a transaction.
            </summary>
            <param name="entity">TuDien object to Update.</param>
            <remarks>After Updateing into the datasource, the TuDien object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            TuDien entity = TuDienService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	TuDienService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.Update(traveltips.Entities.TList{traveltips.Entities.TuDien})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TuDien</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>TuDien</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of TuDien.
             <code><![CDATA[
             TList<TuDien> list = new TList<TuDien>();
             TuDien entity = new TuDien();
             entity.StringProperty = "foo";
             TuDien entity2 = new TuDien();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TuDienService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.Save(traveltips.Entities.TuDien)">
            <summary>
            	public virtualmethod that Saves a TuDien object into the datasource using a transaction.
            </summary>
            <param name="entity">TuDien object to Save.</param>
            <remarks>After Saveing into the datasource, the TuDien object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            TuDien entity = TuDienService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	TuDienService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.Save(traveltips.Entities.TList{traveltips.Entities.TuDien})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TuDien</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>TuDien</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of TuDien.
             <code><![CDATA[
             TList<TuDien> list = new TList<TuDien>();
             TuDien entity = new TuDien();
             entity.StringProperty = "foo";
             TuDien entity2 = new TuDien();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TuDienService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.Delete(traveltips.Entities.TuDien)">
            <summary>
            	public virtualmethod that Deletes a TuDien object into the datasource using a transaction.
            </summary>
            <param name="entity">TuDien object to Delete.</param>
            <remarks>After Deleteing into the datasource, the TuDien object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            TuDien entity = TuDienService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	TuDienService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.Delete(traveltips.Entities.TList{traveltips.Entities.TuDien})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TuDien</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>TuDien</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of TuDien.
             <code><![CDATA[
             TList<TuDien> list = new TList<TuDien>();
             TuDien entity = new TuDien();
             entity.StringProperty = "foo";
             TuDien entity2 = new TuDien();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TuDienService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.Delete(traveltips.Entities.TuDienKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 idTuDien
            </summary>
            <param name="idTuDien">TuDien pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.DeepLoadByIdTuDien(System.Int64,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:traveltips.Entities.TuDien"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <param name="idTuDien"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">TuDien Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.TuDien"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.DeepLoad(traveltips.Entities.TuDien)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">TuDien Object</param>
            <remarks>
            <seealso cref="M:traveltips.Services.TuDienServiceBase.DeepLoad(traveltips.Entities.TuDien)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.DeepLoad(traveltips.Entities.TuDien,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.TuDienServiceBase.DeepLoad(traveltips.Entities.TuDien)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">TuDien Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.DeepLoad(traveltips.Entities.TuDien,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:traveltips.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:traveltips.Entities.TuDien"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">TuDien Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.TuDien})">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.TuDienServiceBase.DeepLoad(traveltips.Entities.TuDien)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.TuDien},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.TuDienServiceBase.DeepLoad(traveltips.Entities.TuDien)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.TuDien},System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:traveltips.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:traveltips.DAO.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:traveltips.Entities.TuDien"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.DeepSave(traveltips.Entities.TuDien)">
            <summary>
            public virtualDeep Saves the <see cref="T:traveltips.Entities.TuDien"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">TuDien Object</param>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.DeepSave(traveltips.Entities.TuDien,traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the TuDien object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">TuDien Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>TuDien</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.TuDien})">
            <summary>
            Deep Save the entire <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{TuDien} Object</param>
        </member>
        <member name="M:traveltips.Services.TuDienServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.TuDien},traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:traveltips.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">TuDien Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:traveltips.Services.TuDienServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:traveltips.Services.TuDienService.#ctor">
            <summary>
            Initializes a new instance of the TuDienService class.
            </summary>
        </member>
        <member name="T:traveltips.Services.QuocGiaServiceBase">
            <summary>
             An object representation of the 'tbl_QuocGia' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the QuocGia.cs file instead.
             All custom implementations should be done in the <see cref="T:traveltips.Entities.QuocGia"/> class.
             </remarks>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:traveltips.Entities.QuocGia"/> instance .
            </summary>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.CreateQuocGia(System.String,System.String,System.String,System.Nullable{System.Byte})">
            <summary>
             A simple factory method to create a new <see cref="T:traveltips.Entities.QuocGia"/> instance.
            </summary>
            <param name="tenQg"></param>
            <param name="maQg"></param>
            <param name="moTa"></param>
            <param name="flag"></param>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.Get(traveltips.Entities.QuocGiaKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.GetByIdQuocGia(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_QuocGia index.
            </summary>
            <param name="idQuocGia"></param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.QuocGia"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.GetByIdQuocGia(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_QuocGia index.
            </summary>
            <param name="idQuocGia"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.QuocGia"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:traveltips.Entities.QuocGia"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:traveltips.Entities.QuocGia"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:traveltips.Entities.TList`1"/> </returns>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>QuocGia</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>QuocGia</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:traveltips.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>QuocGia</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{QuocGia} of <c>QuocGia</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.Find(traveltips.DAO.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>QuocGia</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>QuocGia</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>QuocGia</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.Insert(traveltips.Entities.QuocGia)">
            <summary>
            	public virtualmethod that Inserts a QuocGia object into the datasource using a transaction.
            </summary>
            <param name="entity">QuocGia object to Insert.</param>
            <remarks>After Inserting into the datasource, the QuocGia object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            QuocGia entity = new QuocGia();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	QuocGiaService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.Insert(traveltips.Entities.TList{traveltips.Entities.QuocGia})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuocGia</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>QuocGia</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of QuocGia.
             <code><![CDATA[
             TList<QuocGia> list = new TList<QuocGia>();
             QuocGia entity = new QuocGia();
             entity.StringProperty = "foo";
             QuocGia entity2 = new QuocGia();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuocGiaService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.Update(traveltips.Entities.QuocGia)">
            <summary>
            	public virtualmethod that Updates a QuocGia object into the datasource using a transaction.
            </summary>
            <param name="entity">QuocGia object to Update.</param>
            <remarks>After Updateing into the datasource, the QuocGia object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            QuocGia entity = QuocGiaService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	QuocGiaService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.Update(traveltips.Entities.TList{traveltips.Entities.QuocGia})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuocGia</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>QuocGia</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of QuocGia.
             <code><![CDATA[
             TList<QuocGia> list = new TList<QuocGia>();
             QuocGia entity = new QuocGia();
             entity.StringProperty = "foo";
             QuocGia entity2 = new QuocGia();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuocGiaService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.Save(traveltips.Entities.QuocGia)">
            <summary>
            	public virtualmethod that Saves a QuocGia object into the datasource using a transaction.
            </summary>
            <param name="entity">QuocGia object to Save.</param>
            <remarks>After Saveing into the datasource, the QuocGia object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            QuocGia entity = QuocGiaService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	QuocGiaService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.Save(traveltips.Entities.TList{traveltips.Entities.QuocGia})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuocGia</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>QuocGia</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of QuocGia.
             <code><![CDATA[
             TList<QuocGia> list = new TList<QuocGia>();
             QuocGia entity = new QuocGia();
             entity.StringProperty = "foo";
             QuocGia entity2 = new QuocGia();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuocGiaService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.Delete(traveltips.Entities.QuocGia)">
            <summary>
            	public virtualmethod that Deletes a QuocGia object into the datasource using a transaction.
            </summary>
            <param name="entity">QuocGia object to Delete.</param>
            <remarks>After Deleteing into the datasource, the QuocGia object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            QuocGia entity = QuocGiaService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	QuocGiaService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.Delete(traveltips.Entities.TList{traveltips.Entities.QuocGia})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuocGia</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>QuocGia</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of QuocGia.
             <code><![CDATA[
             TList<QuocGia> list = new TList<QuocGia>();
             QuocGia entity = new QuocGia();
             entity.StringProperty = "foo";
             QuocGia entity2 = new QuocGia();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuocGiaService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.Delete(traveltips.Entities.QuocGiaKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 idQuocGia
            </summary>
            <param name="idQuocGia">QuocGia pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.DeepLoadByIdQuocGia(System.Int64,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:traveltips.Entities.QuocGia"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <param name="idQuocGia"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QuocGia Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.QuocGia"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.DeepLoad(traveltips.Entities.QuocGia)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">QuocGia Object</param>
            <remarks>
            <seealso cref="M:traveltips.Services.QuocGiaServiceBase.DeepLoad(traveltips.Entities.QuocGia)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.DeepLoad(traveltips.Entities.QuocGia,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.QuocGiaServiceBase.DeepLoad(traveltips.Entities.QuocGia)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">QuocGia Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.DeepLoad(traveltips.Entities.QuocGia,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:traveltips.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:traveltips.Entities.QuocGia"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QuocGia Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.QuocGia})">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.QuocGiaServiceBase.DeepLoad(traveltips.Entities.QuocGia)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.QuocGia},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.QuocGiaServiceBase.DeepLoad(traveltips.Entities.QuocGia)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.QuocGia},System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:traveltips.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:traveltips.DAO.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:traveltips.Entities.QuocGia"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.DeepSave(traveltips.Entities.QuocGia)">
            <summary>
            public virtualDeep Saves the <see cref="T:traveltips.Entities.QuocGia"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">QuocGia Object</param>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.DeepSave(traveltips.Entities.QuocGia,traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the QuocGia object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">QuocGia Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>QuocGia</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.QuocGia})">
            <summary>
            Deep Save the entire <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{QuocGia} Object</param>
        </member>
        <member name="M:traveltips.Services.QuocGiaServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.QuocGia},traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:traveltips.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">QuocGia Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:traveltips.Services.QuocGiaServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:traveltips.Services.GalleryServiceBase">
            <summary>
             An object representation of the 'tbl_Gallery' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Gallery.cs file instead.
             All custom implementations should be done in the <see cref="T:traveltips.Entities.Gallery"/> class.
             </remarks>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:traveltips.Entities.Gallery"/> instance .
            </summary>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.CreateGallery(System.Nullable{System.Int64},System.String,System.String,System.String,System.Nullable{System.Byte})">
            <summary>
             A simple factory method to create a new <see cref="T:traveltips.Entities.Gallery"/> instance.
            </summary>
            <param name="idCongTy"></param>
            <param name="tenAnh"></param>
            <param name="duongDan"></param>
            <param name="moTa"></param>
            <param name="flag"></param>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.GetByIdCongTy(System.Nullable{System.Int64})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the FK_tbl_Gallery_tbl_CongTy key.
            	FK_tbl_Gallery_tbl_CongTy Description: 
            </summary>
            <param name="idCongTy"></param>
            <returns>Returns a generic collection of Gallery objects.</returns>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.GetByIdCongTy(System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the FK_tbl_Gallery_tbl_CongTy key.
            	FK_tbl_Gallery_tbl_CongTy Description: 
            </summary>
            <param name="idCongTy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:traveltips.Entities.TList`1"/> of <c>Gallery</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.Get(traveltips.Entities.GalleryKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.GetByIdGallery(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_Gallery index.
            </summary>
            <param name="idGallery"></param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.Gallery"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.GetByIdGallery(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_Gallery index.
            </summary>
            <param name="idGallery"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.Gallery"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:traveltips.Entities.Gallery"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:traveltips.Entities.Gallery"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:traveltips.Entities.TList`1"/> </returns>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Gallery</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Gallery</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:traveltips.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Gallery</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Gallery} of <c>Gallery</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.Find(traveltips.DAO.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Gallery</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Gallery</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Gallery</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.Insert(traveltips.Entities.Gallery)">
            <summary>
            	public virtualmethod that Inserts a Gallery object into the datasource using a transaction.
            </summary>
            <param name="entity">Gallery object to Insert.</param>
            <remarks>After Inserting into the datasource, the Gallery object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Gallery entity = new Gallery();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	GalleryService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.Insert(traveltips.Entities.TList{traveltips.Entities.Gallery})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Gallery</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Gallery</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Gallery.
             <code><![CDATA[
             TList<Gallery> list = new TList<Gallery>();
             Gallery entity = new Gallery();
             entity.StringProperty = "foo";
             Gallery entity2 = new Gallery();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GalleryService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.Update(traveltips.Entities.Gallery)">
            <summary>
            	public virtualmethod that Updates a Gallery object into the datasource using a transaction.
            </summary>
            <param name="entity">Gallery object to Update.</param>
            <remarks>After Updateing into the datasource, the Gallery object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Gallery entity = GalleryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	GalleryService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.Update(traveltips.Entities.TList{traveltips.Entities.Gallery})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Gallery</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Gallery</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Gallery.
             <code><![CDATA[
             TList<Gallery> list = new TList<Gallery>();
             Gallery entity = new Gallery();
             entity.StringProperty = "foo";
             Gallery entity2 = new Gallery();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GalleryService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.Save(traveltips.Entities.Gallery)">
            <summary>
            	public virtualmethod that Saves a Gallery object into the datasource using a transaction.
            </summary>
            <param name="entity">Gallery object to Save.</param>
            <remarks>After Saveing into the datasource, the Gallery object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Gallery entity = GalleryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	GalleryService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.Save(traveltips.Entities.TList{traveltips.Entities.Gallery})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Gallery</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Gallery</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Gallery.
             <code><![CDATA[
             TList<Gallery> list = new TList<Gallery>();
             Gallery entity = new Gallery();
             entity.StringProperty = "foo";
             Gallery entity2 = new Gallery();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GalleryService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.Delete(traveltips.Entities.Gallery)">
            <summary>
            	public virtualmethod that Deletes a Gallery object into the datasource using a transaction.
            </summary>
            <param name="entity">Gallery object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Gallery object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Gallery entity = GalleryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	GalleryService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.Delete(traveltips.Entities.TList{traveltips.Entities.Gallery})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Gallery</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Gallery</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Gallery.
             <code><![CDATA[
             TList<Gallery> list = new TList<Gallery>();
             Gallery entity = new Gallery();
             entity.StringProperty = "foo";
             Gallery entity2 = new Gallery();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GalleryService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.Delete(traveltips.Entities.GalleryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 idGallery
            </summary>
            <param name="idGallery">Gallery pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.DeepLoadByIdGallery(System.Int64,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:traveltips.Entities.Gallery"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <param name="idGallery"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Gallery Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.Gallery"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.DeepLoad(traveltips.Entities.Gallery)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Gallery Object</param>
            <remarks>
            <seealso cref="M:traveltips.Services.GalleryServiceBase.DeepLoad(traveltips.Entities.Gallery)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.DeepLoad(traveltips.Entities.Gallery,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.GalleryServiceBase.DeepLoad(traveltips.Entities.Gallery)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Gallery Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.DeepLoad(traveltips.Entities.Gallery,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:traveltips.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:traveltips.Entities.Gallery"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Gallery Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.Gallery})">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.GalleryServiceBase.DeepLoad(traveltips.Entities.Gallery)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.Gallery},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.GalleryServiceBase.DeepLoad(traveltips.Entities.Gallery)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.Gallery},System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:traveltips.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:traveltips.DAO.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:traveltips.Entities.Gallery"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.DeepSave(traveltips.Entities.Gallery)">
            <summary>
            public virtualDeep Saves the <see cref="T:traveltips.Entities.Gallery"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Gallery Object</param>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.DeepSave(traveltips.Entities.Gallery,traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Gallery object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Gallery Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Gallery</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.Gallery})">
            <summary>
            Deep Save the entire <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Gallery} Object</param>
        </member>
        <member name="M:traveltips.Services.GalleryServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.Gallery},traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:traveltips.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Gallery Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:traveltips.Services.GalleryServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:traveltips.Services.SecurityContext`1">
            <summary>
            The class that is available in case role based security is required at runtime.  
            It will be made availabe through the entities themselves.
            </summary>
        </member>
        <member name="M:traveltips.Services.SecurityContext`1.#ctor">
            <summary>
            Initializes a new instance of the SecurityContext class.
            </summary>
        </member>
        <member name="M:traveltips.Services.SecurityContext`1.IsAuthorized(System.String)">
            <summary>
            Determine whether user is authorized for the rule based on the rule provider
            </summary>
        </member>
        <member name="P:traveltips.Services.SecurityContext`1.Identity">
            <summary>
            The Current IIdentity .
            </summary>
        </member>
        <member name="P:traveltips.Services.SecurityContext`1.Profile">
            <summary>
            The Current Profile .
            </summary>
        </member>
        <member name="P:traveltips.Services.SecurityContext`1.Principal">
            <summary>
             The Current IPrincipal .
            </summary>
        </member>
        <member name="P:traveltips.Services.SecurityContext`1.RuleProvider">
            <summary>
             The Current Authorization Rule Provider
            </summary>
        </member>
        <member name="T:traveltips.Services.ContextView`2">
            <summary>
            Used to create a general view of the current context.  
            Useful for firing events and giving the UI a picture of 
            current State of Operation.
            </summary>
            <typeparam name="Entity">The Entity object</typeparam>
            <typeparam name="Domain">Type that holds </typeparam>
        </member>
        <member name="M:traveltips.Services.ContextView`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:traveltips.Services.ContextView`2"/> class.
            </summary>
        </member>
        <member name="M:traveltips.Services.ContextView`2.#ctor(`0,traveltips.Services.SecurityContext{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:traveltips.Services.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
        </member>
        <member name="M:traveltips.Services.ContextView`2.#ctor(`0,traveltips.Services.SecurityContext{`0},traveltips.DAO.TransactionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:traveltips.Services.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
            <param name="transactionManager">The transaction manager.</param>
        </member>
        <member name="P:traveltips.Services.ContextView`2.PersistingObject">
            <summary>
            Gets or sets the persisting object.
            </summary>
            <value>The persisting object.</value>
        </member>
        <member name="P:traveltips.Services.ContextView`2.SecurityContext">
            <summary>
            Gets or sets the security context.
            </summary>
            <value>The security context.</value>
        </member>
        <member name="P:traveltips.Services.ContextView`2.TransactionManager">
            <summary>
            Gets or sets the transaction manager.
            </summary>
            <value>The transaction manager.</value>
        </member>
        <member name="T:traveltips.Services.IProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:traveltips.Services.IProcessorResult.AddBrokenRulesList(System.Type,traveltips.Entities.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:traveltips.Services.IProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:traveltips.Services.IProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="P:traveltips.Services.IProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation.
            </summary>
        </member>
        <member name="T:traveltips.Services.CongTyServiceBase">
            <summary>
             An object representation of the 'tbl_CongTy' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the CongTy.cs file instead.
             All custom implementations should be done in the <see cref="T:traveltips.Entities.CongTy"/> class.
             </remarks>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:traveltips.Entities.CongTy"/> instance .
            </summary>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.CreateCongTy(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Byte})">
            <summary>
             A simple factory method to create a new <see cref="T:traveltips.Entities.CongTy"/> instance.
            </summary>
            <param name="idChuCongTy"></param>
            <param name="idDanhMuc"></param>
            <param name="idQuocGia"></param>
            <param name="idThanhPho"></param>
            <param name="idQuan"></param>
            <param name="idDuong"></param>
            <param name="idKhuVuc"></param>
            <param name="soNha"></param>
            <param name="dienThoaiCd"></param>
            <param name="dienThoaiDd"></param>
            <param name="fax"></param>
            <param name="email"></param>
            <param name="website"></param>
            <param name="hinhThucTt"></param>
            <param name="thoiGianPv">Luu duoi dang: Tu;den</param>
            <param name="anhMinhHoa"></param>
            <param name="ghiChu"></param>
            <param name="moTaNgan"></param>
            <param name="moTaChiTiet"></param>
            <param name="flag"></param>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.GetByIdChuCongTy(System.Nullable{System.Int64})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the FK_tbl_CongTy_tbl_ChuCongTy key.
            	FK_tbl_CongTy_tbl_ChuCongTy Description: 
            </summary>
            <param name="idChuCongTy"></param>
            <returns>Returns a generic collection of CongTy objects.</returns>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.GetByIdChuCongTy(System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the FK_tbl_CongTy_tbl_ChuCongTy key.
            	FK_tbl_CongTy_tbl_ChuCongTy Description: 
            </summary>
            <param name="idChuCongTy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:traveltips.Entities.TList`1"/> of <c>CongTy</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.GetByIdDanhMuc(System.Nullable{System.Int64})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the FK_tbl_CongTy_tbl_DanhMuc key.
            	FK_tbl_CongTy_tbl_DanhMuc Description: 
            </summary>
            <param name="idDanhMuc"></param>
            <returns>Returns a generic collection of CongTy objects.</returns>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.GetByIdDanhMuc(System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the FK_tbl_CongTy_tbl_DanhMuc key.
            	FK_tbl_CongTy_tbl_DanhMuc Description: 
            </summary>
            <param name="idDanhMuc"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:traveltips.Entities.TList`1"/> of <c>CongTy</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.Get(traveltips.Entities.CongTyKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.GetByIdCongTy(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_CongTy index.
            </summary>
            <param name="idCongTy"></param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.CongTy"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.GetByIdCongTy(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_CongTy index.
            </summary>
            <param name="idCongTy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.CongTy"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:traveltips.Entities.CongTy"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:traveltips.Entities.CongTy"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:traveltips.Entities.TList`1"/> </returns>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CongTy</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CongTy</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:traveltips.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CongTy</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{CongTy} of <c>CongTy</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.Find(traveltips.DAO.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>CongTy</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>CongTy</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CongTy</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.Insert(traveltips.Entities.CongTy)">
            <summary>
            	public virtualmethod that Inserts a CongTy object into the datasource using a transaction.
            </summary>
            <param name="entity">CongTy object to Insert.</param>
            <remarks>After Inserting into the datasource, the CongTy object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            CongTy entity = new CongTy();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CongTyService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.Insert(traveltips.Entities.TList{traveltips.Entities.CongTy})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CongTy</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>CongTy</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of CongTy.
             <code><![CDATA[
             TList<CongTy> list = new TList<CongTy>();
             CongTy entity = new CongTy();
             entity.StringProperty = "foo";
             CongTy entity2 = new CongTy();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CongTyService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.Update(traveltips.Entities.CongTy)">
            <summary>
            	public virtualmethod that Updates a CongTy object into the datasource using a transaction.
            </summary>
            <param name="entity">CongTy object to Update.</param>
            <remarks>After Updateing into the datasource, the CongTy object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            CongTy entity = CongTyService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CongTyService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.Update(traveltips.Entities.TList{traveltips.Entities.CongTy})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CongTy</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>CongTy</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of CongTy.
             <code><![CDATA[
             TList<CongTy> list = new TList<CongTy>();
             CongTy entity = new CongTy();
             entity.StringProperty = "foo";
             CongTy entity2 = new CongTy();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CongTyService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.Save(traveltips.Entities.CongTy)">
            <summary>
            	public virtualmethod that Saves a CongTy object into the datasource using a transaction.
            </summary>
            <param name="entity">CongTy object to Save.</param>
            <remarks>After Saveing into the datasource, the CongTy object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            CongTy entity = CongTyService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CongTyService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.Save(traveltips.Entities.TList{traveltips.Entities.CongTy})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CongTy</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>CongTy</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of CongTy.
             <code><![CDATA[
             TList<CongTy> list = new TList<CongTy>();
             CongTy entity = new CongTy();
             entity.StringProperty = "foo";
             CongTy entity2 = new CongTy();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CongTyService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.Delete(traveltips.Entities.CongTy)">
            <summary>
            	public virtualmethod that Deletes a CongTy object into the datasource using a transaction.
            </summary>
            <param name="entity">CongTy object to Delete.</param>
            <remarks>After Deleteing into the datasource, the CongTy object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            CongTy entity = CongTyService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CongTyService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.Delete(traveltips.Entities.TList{traveltips.Entities.CongTy})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CongTy</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>CongTy</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of CongTy.
             <code><![CDATA[
             TList<CongTy> list = new TList<CongTy>();
             CongTy entity = new CongTy();
             entity.StringProperty = "foo";
             CongTy entity2 = new CongTy();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CongTyService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.Delete(traveltips.Entities.CongTyKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 idCongTy
            </summary>
            <param name="idCongTy">CongTy pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.DeepLoadByIdCongTy(System.Int64,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:traveltips.Entities.CongTy"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <param name="idCongTy"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CongTy Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.CongTy"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.DeepLoad(traveltips.Entities.CongTy)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">CongTy Object</param>
            <remarks>
            <seealso cref="M:traveltips.Services.CongTyServiceBase.DeepLoad(traveltips.Entities.CongTy)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.DeepLoad(traveltips.Entities.CongTy,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.CongTyServiceBase.DeepLoad(traveltips.Entities.CongTy)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">CongTy Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.DeepLoad(traveltips.Entities.CongTy,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:traveltips.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:traveltips.Entities.CongTy"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CongTy Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.CongTy})">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.CongTyServiceBase.DeepLoad(traveltips.Entities.CongTy)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.CongTy},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.CongTyServiceBase.DeepLoad(traveltips.Entities.CongTy)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.CongTy},System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:traveltips.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:traveltips.DAO.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:traveltips.Entities.CongTy"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.DeepSave(traveltips.Entities.CongTy)">
            <summary>
            public virtualDeep Saves the <see cref="T:traveltips.Entities.CongTy"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">CongTy Object</param>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.DeepSave(traveltips.Entities.CongTy,traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the CongTy object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">CongTy Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>CongTy</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.CongTy})">
            <summary>
            Deep Save the entire <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{CongTy} Object</param>
        </member>
        <member name="M:traveltips.Services.CongTyServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.CongTy},traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:traveltips.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CongTy Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:traveltips.Services.CongTyServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:traveltips.Services.LoaiSpServiceBase">
            <summary>
             An object representation of the 'tbl_LoaiSP' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the LoaiSp.cs file instead.
             All custom implementations should be done in the <see cref="T:traveltips.Entities.LoaiSp"/> class.
             </remarks>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:traveltips.Entities.LoaiSp"/> instance .
            </summary>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.CreateLoaiSp(System.Nullable{System.Int64},System.String,System.String,System.String,System.Nullable{System.Byte})">
            <summary>
             A simple factory method to create a new <see cref="T:traveltips.Entities.LoaiSp"/> instance.
            </summary>
            <param name="idLoaiSpCha"></param>
            <param name="tenLoaiSp"></param>
            <param name="maLoaiSp"></param>
            <param name="moTa"></param>
            <param name="flag"></param>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.Get(traveltips.Entities.LoaiSpKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.GetByIdLoaiSp(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_LoaiSP index.
            </summary>
            <param name="idLoaiSp"></param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.LoaiSp"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.GetByIdLoaiSp(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_LoaiSP index.
            </summary>
            <param name="idLoaiSp"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.LoaiSp"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:traveltips.Entities.LoaiSp"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:traveltips.Entities.LoaiSp"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:traveltips.Entities.TList`1"/> </returns>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>LoaiSp</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>LoaiSp</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:traveltips.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>LoaiSp</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{LoaiSp} of <c>LoaiSp</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.Find(traveltips.DAO.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>LoaiSp</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>LoaiSp</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>LoaiSp</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.Insert(traveltips.Entities.LoaiSp)">
            <summary>
            	public virtualmethod that Inserts a LoaiSp object into the datasource using a transaction.
            </summary>
            <param name="entity">LoaiSp object to Insert.</param>
            <remarks>After Inserting into the datasource, the LoaiSp object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            LoaiSp entity = new LoaiSp();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	LoaiSpService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.Insert(traveltips.Entities.TList{traveltips.Entities.LoaiSp})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LoaiSp</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>LoaiSp</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of LoaiSp.
             <code><![CDATA[
             TList<LoaiSp> list = new TList<LoaiSp>();
             LoaiSp entity = new LoaiSp();
             entity.StringProperty = "foo";
             LoaiSp entity2 = new LoaiSp();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LoaiSpService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.Update(traveltips.Entities.LoaiSp)">
            <summary>
            	public virtualmethod that Updates a LoaiSp object into the datasource using a transaction.
            </summary>
            <param name="entity">LoaiSp object to Update.</param>
            <remarks>After Updateing into the datasource, the LoaiSp object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            LoaiSp entity = LoaiSpService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	LoaiSpService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.Update(traveltips.Entities.TList{traveltips.Entities.LoaiSp})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LoaiSp</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>LoaiSp</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of LoaiSp.
             <code><![CDATA[
             TList<LoaiSp> list = new TList<LoaiSp>();
             LoaiSp entity = new LoaiSp();
             entity.StringProperty = "foo";
             LoaiSp entity2 = new LoaiSp();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LoaiSpService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.Save(traveltips.Entities.LoaiSp)">
            <summary>
            	public virtualmethod that Saves a LoaiSp object into the datasource using a transaction.
            </summary>
            <param name="entity">LoaiSp object to Save.</param>
            <remarks>After Saveing into the datasource, the LoaiSp object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            LoaiSp entity = LoaiSpService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	LoaiSpService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.Save(traveltips.Entities.TList{traveltips.Entities.LoaiSp})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LoaiSp</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>LoaiSp</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of LoaiSp.
             <code><![CDATA[
             TList<LoaiSp> list = new TList<LoaiSp>();
             LoaiSp entity = new LoaiSp();
             entity.StringProperty = "foo";
             LoaiSp entity2 = new LoaiSp();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LoaiSpService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.Delete(traveltips.Entities.LoaiSp)">
            <summary>
            	public virtualmethod that Deletes a LoaiSp object into the datasource using a transaction.
            </summary>
            <param name="entity">LoaiSp object to Delete.</param>
            <remarks>After Deleteing into the datasource, the LoaiSp object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            LoaiSp entity = LoaiSpService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	LoaiSpService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.Delete(traveltips.Entities.TList{traveltips.Entities.LoaiSp})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LoaiSp</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>LoaiSp</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of LoaiSp.
             <code><![CDATA[
             TList<LoaiSp> list = new TList<LoaiSp>();
             LoaiSp entity = new LoaiSp();
             entity.StringProperty = "foo";
             LoaiSp entity2 = new LoaiSp();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LoaiSpService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.Delete(traveltips.Entities.LoaiSpKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 idLoaiSp
            </summary>
            <param name="idLoaiSp">LoaiSp pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.DeepLoadByIdLoaiSp(System.Int64,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:traveltips.Entities.LoaiSp"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <param name="idLoaiSp"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LoaiSp Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.LoaiSp"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.DeepLoad(traveltips.Entities.LoaiSp)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">LoaiSp Object</param>
            <remarks>
            <seealso cref="M:traveltips.Services.LoaiSpServiceBase.DeepLoad(traveltips.Entities.LoaiSp)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.DeepLoad(traveltips.Entities.LoaiSp,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.LoaiSpServiceBase.DeepLoad(traveltips.Entities.LoaiSp)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">LoaiSp Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.DeepLoad(traveltips.Entities.LoaiSp,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:traveltips.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:traveltips.Entities.LoaiSp"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LoaiSp Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.LoaiSp})">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.LoaiSpServiceBase.DeepLoad(traveltips.Entities.LoaiSp)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.LoaiSp},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.LoaiSpServiceBase.DeepLoad(traveltips.Entities.LoaiSp)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.LoaiSp},System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:traveltips.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:traveltips.DAO.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:traveltips.Entities.LoaiSp"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.DeepSave(traveltips.Entities.LoaiSp)">
            <summary>
            public virtualDeep Saves the <see cref="T:traveltips.Entities.LoaiSp"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">LoaiSp Object</param>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.DeepSave(traveltips.Entities.LoaiSp,traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the LoaiSp object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">LoaiSp Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>LoaiSp</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.LoaiSp})">
            <summary>
            Deep Save the entire <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{LoaiSp} Object</param>
        </member>
        <member name="M:traveltips.Services.LoaiSpServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.LoaiSp},traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:traveltips.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LoaiSp Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:traveltips.Services.LoaiSpServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:traveltips.Services.ConnectionScope">
            <summary>
            Provides storage of global database connection information.
            </summary>
        </member>
        <member name="M:traveltips.Services.ConnectionScope.#ctor">
            <summary>
            Initializes a new instance of the ConnectionScope class.
            </summary>
        </member>
        <member name="M:traveltips.Services.ConnectionScope.NewThread(System.Threading.ThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:traveltips.Services.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:traveltips.Services.ConnectionScope.NewThread(System.Threading.ParameterizedThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:traveltips.Services.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:traveltips.Services.ConnectionScope.EnqueueOnThreadPool(System.Threading.ThreadStart)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:traveltips.Services.ConnectionScope.EnqueueOnThreadPool(System.Threading.ParameterizedThreadStart,System.Object)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <param name="state">An object containing data to be used by the method.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:traveltips.Services.ConnectionScope.Copy(traveltips.Services.ConnectionScope)">
            <summary>
            Copies the values from the specified <paramref name="scope"/> object
            to the <see cref="T:traveltips.Services.ConnectionScope"/> used by the current thread.
            </summary>
            <param name="scope">A <see cref="T:traveltips.Services.ConnectionScope"/> object.</param>
        </member>
        <member name="M:traveltips.Services.ConnectionScope.ValidateOrCreateTransaction">
            <summary>
            Validates an existing <c cref="P:traveltips.Services.ConnectionScope.TransactionManager"/> if one exists,
            otherwise creates a new <c cref="P:traveltips.Services.ConnectionScope.TransactionManager"/> to use.
            </summary>
        </member>
        <member name="M:traveltips.Services.ConnectionScope.ValidateOrCreateTransaction(System.Boolean)">
            <summary>
            Validates an existing <c cref="P:traveltips.Services.ConnectionScope.TransactionManager"/> if one exists,
            otherwise creates a new <c cref="P:traveltips.Services.ConnectionScope.TransactionManager"/> to use.
            </summary>
            <param name="createTransaction">determines whether to create a new transaction</param>
        </member>
        <member name="M:traveltips.Services.ConnectionScope.CreateTransaction">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>.
            </summary>
        </member>
        <member name="M:traveltips.Services.ConnectionScope.CreateTransaction(System.Data.IsolationLevel)">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>
            with the specified <c cref="T:System.Data.IsolationLevel"/>.
            </summary>
            <param name="level">Determines which <c cref="T:System.Data.IsolationLevel"/> to use for the transaction.</param>
        </member>
        <member name="M:traveltips.Services.ConnectionScope.Complete">
             <summary>
             Completes this unit of work instance of the current transaction.  
             Commits the transaction,  Cleans up Connection, 
             Disposes of TransactionManager which performs unmanaged cleanup.
             </summary>
             <example>
                 try
                 {
                     using (ConnectionScope.CreateTransaction())
                     {
                         // or use ConnectionScope.ValidateOrCreateTransaction(true) 
                         // if you prefer to dynamically check for an existing transaction
                         AccountService.Save(account);
                         LedgerService.Save(generalEntry);
             
                         //Commit and Cleanup your transaction
                         bool result = ConnectionScope.Complete();
                     }
                 }
                 catch (Exception ex)
                 {
                     // when creating the transaction via the 
                     // using (ConnectionScope.CreateTransaction()) construct, 
                     // there's no need to rollback, handled by 
                     // ConnectionScope Dispose Method.
             
                     Logger.Write(ex.Message);
                 }
            </example>
        </member>
        <member name="M:traveltips.Services.ConnectionScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="F:traveltips.Services.ConnectionScope.connectionStringKey">
            <summary>
            The ConnectionStringKey member variable.
            </summary>
        </member>
        <member name="F:traveltips.Services.ConnectionScope.dynamicConnectionString">
            <summary>
            The DynamicConnectionString member variable.
            </summary>
        </member>
        <member name="F:traveltips.Services.ConnectionScope.transactionManager">
            <summary>
            The TransactionManager member variable.
            </summary>
        </member>
        <member name="F:traveltips.Services.ConnectionScope.dataProvider">
            <summary>
            The NetTiersProvider member variable.
            </summary>
        </member>
        <member name="P:traveltips.Services.ConnectionScope.Current">
            <summary>
            Gets a reference to the ConnectionScope object for the current thread.
            </summary>
        </member>
        <member name="P:traveltips.Services.ConnectionScope.ConnectionStringKey">
            <summary>
            Gets or sets the ConnectionStringKey property.
            </summary>
        </member>
        <member name="P:traveltips.Services.ConnectionScope.DynamicConnectionString">
            <summary>
            Gets or sets the DynamicConnectionString property.
            </summary>
        </member>
        <member name="P:traveltips.Services.ConnectionScope.TransactionManager">
            <summary>
            Gets or sets the TransactionManager property.
            </summary>
        </member>
        <member name="P:traveltips.Services.ConnectionScope.DataProvider">
             <summary>
             Gets or Sets the Current DataProvider property of the <c>ConnectionScope</c> Object.
             </summary>
             <remarks>
             To use a dynamic connection, you must set both the 
             DynamicConnectionString and a unique ConnectionStringKey properties;
            </remarks>
        </member>
        <member name="P:traveltips.Services.ConnectionScope.HasTransaction">
            <summary>
            Determines if Current Connections is in a Transaction.
            </summary>
        </member>
        <member name="T:traveltips.Services.UserService">
            <summary>
             An component type implementation of the 'tbl_User' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:traveltips.Services.UserServiceBase">
            <summary>
             An object representation of the 'tbl_User' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the User.cs file instead.
             All custom implementations should be done in the <see cref="T:traveltips.Entities.User"/> class.
             </remarks>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:traveltips.Entities.User"/> instance .
            </summary>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.CreateUser(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Byte})">
            <summary>
             A simple factory method to create a new <see cref="T:traveltips.Entities.User"/> instance.
            </summary>
            <param name="tenDangNhap"></param>
            <param name="password"></param>
            <param name="hoTen"></param>
            <param name="email"></param>
            <param name="diaChi"></param>
            <param name="dienThoai"></param>
            <param name="website"></param>
            <param name="avatar"></param>
            <param name="flag"></param>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.Get(traveltips.Entities.UserKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.GetByIdUser(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_User index.
            </summary>
            <param name="idUser"></param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.User"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.GetByIdUser(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_User index.
            </summary>
            <param name="idUser"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.User"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:traveltips.Entities.User"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:traveltips.Entities.User"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:traveltips.Entities.TList`1"/> </returns>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:traveltips.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{User} of <c>User</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.Find(traveltips.DAO.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.Insert(traveltips.Entities.User)">
            <summary>
            	public virtualmethod that Inserts a User object into the datasource using a transaction.
            </summary>
            <param name="entity">User object to Insert.</param>
            <remarks>After Inserting into the datasource, the User object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            User entity = new User();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	UserService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.Insert(traveltips.Entities.TList{traveltips.Entities.User})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>User</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>User</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of User.
             <code><![CDATA[
             TList<User> list = new TList<User>();
             User entity = new User();
             entity.StringProperty = "foo";
             User entity2 = new User();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.Update(traveltips.Entities.User)">
            <summary>
            	public virtualmethod that Updates a User object into the datasource using a transaction.
            </summary>
            <param name="entity">User object to Update.</param>
            <remarks>After Updateing into the datasource, the User object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            User entity = UserService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	UserService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.Update(traveltips.Entities.TList{traveltips.Entities.User})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>User</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>User</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of User.
             <code><![CDATA[
             TList<User> list = new TList<User>();
             User entity = new User();
             entity.StringProperty = "foo";
             User entity2 = new User();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.Save(traveltips.Entities.User)">
            <summary>
            	public virtualmethod that Saves a User object into the datasource using a transaction.
            </summary>
            <param name="entity">User object to Save.</param>
            <remarks>After Saveing into the datasource, the User object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            User entity = UserService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	UserService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.Save(traveltips.Entities.TList{traveltips.Entities.User})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>User</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>User</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of User.
             <code><![CDATA[
             TList<User> list = new TList<User>();
             User entity = new User();
             entity.StringProperty = "foo";
             User entity2 = new User();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.Delete(traveltips.Entities.User)">
            <summary>
            	public virtualmethod that Deletes a User object into the datasource using a transaction.
            </summary>
            <param name="entity">User object to Delete.</param>
            <remarks>After Deleteing into the datasource, the User object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            User entity = UserService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	UserService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.Delete(traveltips.Entities.TList{traveltips.Entities.User})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>User</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>User</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of User.
             <code><![CDATA[
             TList<User> list = new TList<User>();
             User entity = new User();
             entity.StringProperty = "foo";
             User entity2 = new User();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.Delete(traveltips.Entities.UserKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 idUser
            </summary>
            <param name="idUser">User pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.DeepLoadByIdUser(System.Int64,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:traveltips.Entities.User"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <param name="idUser"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">User Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.User"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.DeepLoad(traveltips.Entities.User)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">User Object</param>
            <remarks>
            <seealso cref="M:traveltips.Services.UserServiceBase.DeepLoad(traveltips.Entities.User)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.DeepLoad(traveltips.Entities.User,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.UserServiceBase.DeepLoad(traveltips.Entities.User)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">User Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.DeepLoad(traveltips.Entities.User,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:traveltips.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:traveltips.Entities.User"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">User Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.User})">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.UserServiceBase.DeepLoad(traveltips.Entities.User)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.User},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.UserServiceBase.DeepLoad(traveltips.Entities.User)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.User},System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:traveltips.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:traveltips.DAO.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:traveltips.Entities.User"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.DeepSave(traveltips.Entities.User)">
            <summary>
            public virtualDeep Saves the <see cref="T:traveltips.Entities.User"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">User Object</param>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.DeepSave(traveltips.Entities.User,traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the User object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">User Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>User</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.User})">
            <summary>
            Deep Save the entire <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{User} Object</param>
        </member>
        <member name="M:traveltips.Services.UserServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.User},traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:traveltips.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">User Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:traveltips.Services.UserServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:traveltips.Services.UserService.#ctor">
            <summary>
            Initializes a new instance of the UserService class.
            </summary>
        </member>
        <member name="T:traveltips.Services.SanPhamServiceBase">
            <summary>
             An object representation of the 'tbl_SanPham' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the SanPham.cs file instead.
             All custom implementations should be done in the <see cref="T:traveltips.Entities.SanPham"/> class.
             </remarks>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:traveltips.Entities.SanPham"/> instance .
            </summary>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.CreateSanPham(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Decimal},System.String,System.String,System.Byte[],System.Nullable{System.Byte})">
            <summary>
             A simple factory method to create a new <see cref="T:traveltips.Entities.SanPham"/> instance.
            </summary>
            <param name="idCongTy"></param>
            <param name="idLoaiSp"></param>
            <param name="idTuDien">MaSP, TenSP duoc lay tu bang Tu Dien</param>
            <param name="tenSp"></param>
            <param name="maSp"></param>
            <param name="gia"></param>
            <param name="moTaNgan"></param>
            <param name="moTaChiTiet"></param>
            <param name="anhMinhHoa"></param>
            <param name="flag"></param>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.GetByIdLoaiSp(System.Nullable{System.Int64})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the FK_tbl_SanPham_tbl_LoaiSP key.
            	FK_tbl_SanPham_tbl_LoaiSP Description: 
            </summary>
            <param name="idLoaiSp"></param>
            <returns>Returns a generic collection of SanPham objects.</returns>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.GetByIdLoaiSp(System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the FK_tbl_SanPham_tbl_LoaiSP key.
            	FK_tbl_SanPham_tbl_LoaiSP Description: 
            </summary>
            <param name="idLoaiSp"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:traveltips.Entities.TList`1"/> of <c>SanPham</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.Get(traveltips.Entities.SanPhamKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.GetByIdSanPham(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_SanPham index.
            </summary>
            <param name="idSanPham"></param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.SanPham"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.GetByIdSanPham(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_SanPham index.
            </summary>
            <param name="idSanPham"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.SanPham"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:traveltips.Entities.SanPham"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:traveltips.Entities.SanPham"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:traveltips.Entities.TList`1"/> </returns>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SanPham</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SanPham</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:traveltips.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SanPham</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{SanPham} of <c>SanPham</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.Find(traveltips.DAO.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>SanPham</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>SanPham</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SanPham</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.Insert(traveltips.Entities.SanPham)">
            <summary>
            	public virtualmethod that Inserts a SanPham object into the datasource using a transaction.
            </summary>
            <param name="entity">SanPham object to Insert.</param>
            <remarks>After Inserting into the datasource, the SanPham object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            SanPham entity = new SanPham();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	SanPhamService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.Insert(traveltips.Entities.TList{traveltips.Entities.SanPham})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SanPham</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>SanPham</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of SanPham.
             <code><![CDATA[
             TList<SanPham> list = new TList<SanPham>();
             SanPham entity = new SanPham();
             entity.StringProperty = "foo";
             SanPham entity2 = new SanPham();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SanPhamService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.Update(traveltips.Entities.SanPham)">
            <summary>
            	public virtualmethod that Updates a SanPham object into the datasource using a transaction.
            </summary>
            <param name="entity">SanPham object to Update.</param>
            <remarks>After Updateing into the datasource, the SanPham object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            SanPham entity = SanPhamService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	SanPhamService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.Update(traveltips.Entities.TList{traveltips.Entities.SanPham})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SanPham</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>SanPham</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of SanPham.
             <code><![CDATA[
             TList<SanPham> list = new TList<SanPham>();
             SanPham entity = new SanPham();
             entity.StringProperty = "foo";
             SanPham entity2 = new SanPham();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SanPhamService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.Save(traveltips.Entities.SanPham)">
            <summary>
            	public virtualmethod that Saves a SanPham object into the datasource using a transaction.
            </summary>
            <param name="entity">SanPham object to Save.</param>
            <remarks>After Saveing into the datasource, the SanPham object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            SanPham entity = SanPhamService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	SanPhamService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.Save(traveltips.Entities.TList{traveltips.Entities.SanPham})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SanPham</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>SanPham</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of SanPham.
             <code><![CDATA[
             TList<SanPham> list = new TList<SanPham>();
             SanPham entity = new SanPham();
             entity.StringProperty = "foo";
             SanPham entity2 = new SanPham();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SanPhamService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.Delete(traveltips.Entities.SanPham)">
            <summary>
            	public virtualmethod that Deletes a SanPham object into the datasource using a transaction.
            </summary>
            <param name="entity">SanPham object to Delete.</param>
            <remarks>After Deleteing into the datasource, the SanPham object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            SanPham entity = SanPhamService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	SanPhamService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.Delete(traveltips.Entities.TList{traveltips.Entities.SanPham})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SanPham</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>SanPham</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of SanPham.
             <code><![CDATA[
             TList<SanPham> list = new TList<SanPham>();
             SanPham entity = new SanPham();
             entity.StringProperty = "foo";
             SanPham entity2 = new SanPham();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SanPhamService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.Delete(traveltips.Entities.SanPhamKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 idSanPham
            </summary>
            <param name="idSanPham">SanPham pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.DeepLoadByIdSanPham(System.Int64,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:traveltips.Entities.SanPham"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <param name="idSanPham"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SanPham Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.SanPham"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.DeepLoad(traveltips.Entities.SanPham)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">SanPham Object</param>
            <remarks>
            <seealso cref="M:traveltips.Services.SanPhamServiceBase.DeepLoad(traveltips.Entities.SanPham)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.DeepLoad(traveltips.Entities.SanPham,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.SanPhamServiceBase.DeepLoad(traveltips.Entities.SanPham)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">SanPham Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.DeepLoad(traveltips.Entities.SanPham,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:traveltips.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:traveltips.Entities.SanPham"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SanPham Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.SanPham})">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.SanPhamServiceBase.DeepLoad(traveltips.Entities.SanPham)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.SanPham},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.SanPhamServiceBase.DeepLoad(traveltips.Entities.SanPham)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.SanPham},System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:traveltips.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:traveltips.DAO.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:traveltips.Entities.SanPham"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.DeepSave(traveltips.Entities.SanPham)">
            <summary>
            public virtualDeep Saves the <see cref="T:traveltips.Entities.SanPham"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">SanPham Object</param>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.DeepSave(traveltips.Entities.SanPham,traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the SanPham object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">SanPham Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>SanPham</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.SanPham})">
            <summary>
            Deep Save the entire <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{SanPham} Object</param>
        </member>
        <member name="M:traveltips.Services.SanPhamServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.SanPham},traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:traveltips.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">SanPham Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:traveltips.Services.SanPhamServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:traveltips.Services.LabelNnService">
            <summary>
             An component type implementation of the 'tbl_LabelNN' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:traveltips.Services.LabelNnService.#ctor">
            <summary>
            Initializes a new instance of the LabelNnService class.
            </summary>
        </member>
        <member name="T:traveltips.Services.ThuocTinhSanPhamServiceBase">
            <summary>
             An object representation of the 'tbl_ThuocTinhSanPham' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ThuocTinhSanPham.cs file instead.
             All custom implementations should be done in the <see cref="T:traveltips.Entities.ThuocTinhSanPham"/> class.
             </remarks>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:traveltips.Entities.ThuocTinhSanPham"/> instance .
            </summary>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.CreateThuocTinhSanPham(System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Byte})">
            <summary>
             A simple factory method to create a new <see cref="T:traveltips.Entities.ThuocTinhSanPham"/> instance.
            </summary>
            <param name="idSanPham"></param>
            <param name="idThuocTinh"></param>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="flag"></param>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.GetByIdSanPham(System.Nullable{System.Int64})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the FK_tbl_ThuocTinhSanPham_tbl_SanPham key.
            	FK_tbl_ThuocTinhSanPham_tbl_SanPham Description: 
            </summary>
            <param name="idSanPham"></param>
            <returns>Returns a generic collection of ThuocTinhSanPham objects.</returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.GetByIdSanPham(System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the FK_tbl_ThuocTinhSanPham_tbl_SanPham key.
            	FK_tbl_ThuocTinhSanPham_tbl_SanPham Description: 
            </summary>
            <param name="idSanPham"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:traveltips.Entities.TList`1"/> of <c>ThuocTinhSanPham</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.GetByIdThuocTinh(System.Nullable{System.Int64})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the FK_tbl_ThuocTinhSanPham_tbl_ThuocTinh key.
            	FK_tbl_ThuocTinhSanPham_tbl_ThuocTinh Description: 
            </summary>
            <param name="idThuocTinh"></param>
            <returns>Returns a generic collection of ThuocTinhSanPham objects.</returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.GetByIdThuocTinh(System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the FK_tbl_ThuocTinhSanPham_tbl_ThuocTinh key.
            	FK_tbl_ThuocTinhSanPham_tbl_ThuocTinh Description: 
            </summary>
            <param name="idThuocTinh"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:traveltips.Entities.TList`1"/> of <c>ThuocTinhSanPham</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.Get(traveltips.Entities.ThuocTinhSanPhamKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.GetByIdTtsp(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_ThuocTinhSanPham index.
            </summary>
            <param name="idTtsp"></param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.ThuocTinhSanPham"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.GetByIdTtsp(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_ThuocTinhSanPham index.
            </summary>
            <param name="idTtsp"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.ThuocTinhSanPham"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:traveltips.Entities.ThuocTinhSanPham"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:traveltips.Entities.ThuocTinhSanPham"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:traveltips.Entities.TList`1"/> </returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ThuocTinhSanPham</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ThuocTinhSanPham</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:traveltips.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ThuocTinhSanPham</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ThuocTinhSanPham} of <c>ThuocTinhSanPham</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.Find(traveltips.DAO.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ThuocTinhSanPham</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ThuocTinhSanPham</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ThuocTinhSanPham</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.Insert(traveltips.Entities.ThuocTinhSanPham)">
            <summary>
            	public virtualmethod that Inserts a ThuocTinhSanPham object into the datasource using a transaction.
            </summary>
            <param name="entity">ThuocTinhSanPham object to Insert.</param>
            <remarks>After Inserting into the datasource, the ThuocTinhSanPham object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ThuocTinhSanPham entity = new ThuocTinhSanPham();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ThuocTinhSanPhamService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.Insert(traveltips.Entities.TList{traveltips.Entities.ThuocTinhSanPham})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ThuocTinhSanPham</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ThuocTinhSanPham</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ThuocTinhSanPham.
             <code><![CDATA[
             TList<ThuocTinhSanPham> list = new TList<ThuocTinhSanPham>();
             ThuocTinhSanPham entity = new ThuocTinhSanPham();
             entity.StringProperty = "foo";
             ThuocTinhSanPham entity2 = new ThuocTinhSanPham();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ThuocTinhSanPhamService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.Update(traveltips.Entities.ThuocTinhSanPham)">
            <summary>
            	public virtualmethod that Updates a ThuocTinhSanPham object into the datasource using a transaction.
            </summary>
            <param name="entity">ThuocTinhSanPham object to Update.</param>
            <remarks>After Updateing into the datasource, the ThuocTinhSanPham object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ThuocTinhSanPham entity = ThuocTinhSanPhamService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ThuocTinhSanPhamService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.Update(traveltips.Entities.TList{traveltips.Entities.ThuocTinhSanPham})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ThuocTinhSanPham</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ThuocTinhSanPham</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ThuocTinhSanPham.
             <code><![CDATA[
             TList<ThuocTinhSanPham> list = new TList<ThuocTinhSanPham>();
             ThuocTinhSanPham entity = new ThuocTinhSanPham();
             entity.StringProperty = "foo";
             ThuocTinhSanPham entity2 = new ThuocTinhSanPham();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ThuocTinhSanPhamService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.Save(traveltips.Entities.ThuocTinhSanPham)">
            <summary>
            	public virtualmethod that Saves a ThuocTinhSanPham object into the datasource using a transaction.
            </summary>
            <param name="entity">ThuocTinhSanPham object to Save.</param>
            <remarks>After Saveing into the datasource, the ThuocTinhSanPham object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ThuocTinhSanPham entity = ThuocTinhSanPhamService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ThuocTinhSanPhamService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.Save(traveltips.Entities.TList{traveltips.Entities.ThuocTinhSanPham})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ThuocTinhSanPham</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ThuocTinhSanPham</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ThuocTinhSanPham.
             <code><![CDATA[
             TList<ThuocTinhSanPham> list = new TList<ThuocTinhSanPham>();
             ThuocTinhSanPham entity = new ThuocTinhSanPham();
             entity.StringProperty = "foo";
             ThuocTinhSanPham entity2 = new ThuocTinhSanPham();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ThuocTinhSanPhamService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.Delete(traveltips.Entities.ThuocTinhSanPham)">
            <summary>
            	public virtualmethod that Deletes a ThuocTinhSanPham object into the datasource using a transaction.
            </summary>
            <param name="entity">ThuocTinhSanPham object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ThuocTinhSanPham object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ThuocTinhSanPham entity = ThuocTinhSanPhamService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ThuocTinhSanPhamService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.Delete(traveltips.Entities.TList{traveltips.Entities.ThuocTinhSanPham})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ThuocTinhSanPham</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ThuocTinhSanPham</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ThuocTinhSanPham.
             <code><![CDATA[
             TList<ThuocTinhSanPham> list = new TList<ThuocTinhSanPham>();
             ThuocTinhSanPham entity = new ThuocTinhSanPham();
             entity.StringProperty = "foo";
             ThuocTinhSanPham entity2 = new ThuocTinhSanPham();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ThuocTinhSanPhamService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.Delete(traveltips.Entities.ThuocTinhSanPhamKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 idTtsp
            </summary>
            <param name="idTtsp">ThuocTinhSanPham pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.DeepLoadByIdTtsp(System.Int64,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:traveltips.Entities.ThuocTinhSanPham"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <param name="idTtsp"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ThuocTinhSanPham Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.ThuocTinhSanPham"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.DeepLoad(traveltips.Entities.ThuocTinhSanPham)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ThuocTinhSanPham Object</param>
            <remarks>
            <seealso cref="M:traveltips.Services.ThuocTinhSanPhamServiceBase.DeepLoad(traveltips.Entities.ThuocTinhSanPham)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.DeepLoad(traveltips.Entities.ThuocTinhSanPham,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.ThuocTinhSanPhamServiceBase.DeepLoad(traveltips.Entities.ThuocTinhSanPham)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ThuocTinhSanPham Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.DeepLoad(traveltips.Entities.ThuocTinhSanPham,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:traveltips.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:traveltips.Entities.ThuocTinhSanPham"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ThuocTinhSanPham Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.ThuocTinhSanPham})">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.ThuocTinhSanPhamServiceBase.DeepLoad(traveltips.Entities.ThuocTinhSanPham)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.ThuocTinhSanPham},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.ThuocTinhSanPhamServiceBase.DeepLoad(traveltips.Entities.ThuocTinhSanPham)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.ThuocTinhSanPham},System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:traveltips.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:traveltips.DAO.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:traveltips.Entities.ThuocTinhSanPham"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.DeepSave(traveltips.Entities.ThuocTinhSanPham)">
            <summary>
            public virtualDeep Saves the <see cref="T:traveltips.Entities.ThuocTinhSanPham"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ThuocTinhSanPham Object</param>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.DeepSave(traveltips.Entities.ThuocTinhSanPham,traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ThuocTinhSanPham object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ThuocTinhSanPham Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ThuocTinhSanPham</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.ThuocTinhSanPham})">
            <summary>
            Deep Save the entire <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ThuocTinhSanPham} Object</param>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.ThuocTinhSanPham},traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:traveltips.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ThuocTinhSanPham Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:traveltips.Services.ThuocTinhSanPhamServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:traveltips.Services.ThuocTinhService">
            <summary>
             An component type implementation of the 'tbl_ThuocTinh' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:traveltips.Services.ThuocTinhServiceBase">
            <summary>
             An object representation of the 'tbl_ThuocTinh' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ThuocTinh.cs file instead.
             All custom implementations should be done in the <see cref="T:traveltips.Entities.ThuocTinh"/> class.
             </remarks>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:traveltips.Entities.ThuocTinh"/> instance .
            </summary>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.CreateThuocTinh(System.String,System.String,System.Nullable{System.Byte})">
            <summary>
             A simple factory method to create a new <see cref="T:traveltips.Entities.ThuocTinh"/> instance.
            </summary>
            <param name="tenThuocTinh"></param>
            <param name="maThuocTinh"></param>
            <param name="flag"></param>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.Get(traveltips.Entities.ThuocTinhKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.GetByIdThuocTinh(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_ThuocTinh index.
            </summary>
            <param name="idThuocTinh"></param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.ThuocTinh"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.GetByIdThuocTinh(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_ThuocTinh index.
            </summary>
            <param name="idThuocTinh"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.ThuocTinh"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:traveltips.Entities.ThuocTinh"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:traveltips.Entities.ThuocTinh"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:traveltips.Entities.TList`1"/> </returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ThuocTinh</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ThuocTinh</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:traveltips.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ThuocTinh</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ThuocTinh} of <c>ThuocTinh</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.Find(traveltips.DAO.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ThuocTinh</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ThuocTinh</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ThuocTinh</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.Insert(traveltips.Entities.ThuocTinh)">
            <summary>
            	public virtualmethod that Inserts a ThuocTinh object into the datasource using a transaction.
            </summary>
            <param name="entity">ThuocTinh object to Insert.</param>
            <remarks>After Inserting into the datasource, the ThuocTinh object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ThuocTinh entity = new ThuocTinh();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ThuocTinhService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.Insert(traveltips.Entities.TList{traveltips.Entities.ThuocTinh})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ThuocTinh</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ThuocTinh</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ThuocTinh.
             <code><![CDATA[
             TList<ThuocTinh> list = new TList<ThuocTinh>();
             ThuocTinh entity = new ThuocTinh();
             entity.StringProperty = "foo";
             ThuocTinh entity2 = new ThuocTinh();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ThuocTinhService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.Update(traveltips.Entities.ThuocTinh)">
            <summary>
            	public virtualmethod that Updates a ThuocTinh object into the datasource using a transaction.
            </summary>
            <param name="entity">ThuocTinh object to Update.</param>
            <remarks>After Updateing into the datasource, the ThuocTinh object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ThuocTinh entity = ThuocTinhService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ThuocTinhService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.Update(traveltips.Entities.TList{traveltips.Entities.ThuocTinh})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ThuocTinh</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ThuocTinh</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ThuocTinh.
             <code><![CDATA[
             TList<ThuocTinh> list = new TList<ThuocTinh>();
             ThuocTinh entity = new ThuocTinh();
             entity.StringProperty = "foo";
             ThuocTinh entity2 = new ThuocTinh();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ThuocTinhService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.Save(traveltips.Entities.ThuocTinh)">
            <summary>
            	public virtualmethod that Saves a ThuocTinh object into the datasource using a transaction.
            </summary>
            <param name="entity">ThuocTinh object to Save.</param>
            <remarks>After Saveing into the datasource, the ThuocTinh object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ThuocTinh entity = ThuocTinhService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ThuocTinhService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.Save(traveltips.Entities.TList{traveltips.Entities.ThuocTinh})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ThuocTinh</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ThuocTinh</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ThuocTinh.
             <code><![CDATA[
             TList<ThuocTinh> list = new TList<ThuocTinh>();
             ThuocTinh entity = new ThuocTinh();
             entity.StringProperty = "foo";
             ThuocTinh entity2 = new ThuocTinh();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ThuocTinhService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.Delete(traveltips.Entities.ThuocTinh)">
            <summary>
            	public virtualmethod that Deletes a ThuocTinh object into the datasource using a transaction.
            </summary>
            <param name="entity">ThuocTinh object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ThuocTinh object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ThuocTinh entity = ThuocTinhService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ThuocTinhService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.Delete(traveltips.Entities.TList{traveltips.Entities.ThuocTinh})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ThuocTinh</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ThuocTinh</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ThuocTinh.
             <code><![CDATA[
             TList<ThuocTinh> list = new TList<ThuocTinh>();
             ThuocTinh entity = new ThuocTinh();
             entity.StringProperty = "foo";
             ThuocTinh entity2 = new ThuocTinh();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ThuocTinhService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.Delete(traveltips.Entities.ThuocTinhKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 idThuocTinh
            </summary>
            <param name="idThuocTinh">ThuocTinh pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.DeepLoadByIdThuocTinh(System.Int64,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:traveltips.Entities.ThuocTinh"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <param name="idThuocTinh"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ThuocTinh Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.ThuocTinh"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.DeepLoad(traveltips.Entities.ThuocTinh)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ThuocTinh Object</param>
            <remarks>
            <seealso cref="M:traveltips.Services.ThuocTinhServiceBase.DeepLoad(traveltips.Entities.ThuocTinh)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.DeepLoad(traveltips.Entities.ThuocTinh,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.ThuocTinhServiceBase.DeepLoad(traveltips.Entities.ThuocTinh)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ThuocTinh Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.DeepLoad(traveltips.Entities.ThuocTinh,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:traveltips.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:traveltips.Entities.ThuocTinh"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ThuocTinh Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.ThuocTinh})">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.ThuocTinhServiceBase.DeepLoad(traveltips.Entities.ThuocTinh)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.ThuocTinh},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.ThuocTinhServiceBase.DeepLoad(traveltips.Entities.ThuocTinh)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.ThuocTinh},System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:traveltips.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:traveltips.DAO.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:traveltips.Entities.ThuocTinh"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.DeepSave(traveltips.Entities.ThuocTinh)">
            <summary>
            public virtualDeep Saves the <see cref="T:traveltips.Entities.ThuocTinh"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ThuocTinh Object</param>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.DeepSave(traveltips.Entities.ThuocTinh,traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ThuocTinh object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ThuocTinh Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ThuocTinh</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.ThuocTinh})">
            <summary>
            Deep Save the entire <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ThuocTinh} Object</param>
        </member>
        <member name="M:traveltips.Services.ThuocTinhServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.ThuocTinh},traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:traveltips.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ThuocTinh Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:traveltips.Services.ThuocTinhServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:traveltips.Services.ThuocTinhService.#ctor">
            <summary>
            Initializes a new instance of the ThuocTinhService class.
            </summary>
        </member>
        <member name="T:traveltips.Services.GalleryService">
            <summary>
             An component type implementation of the 'tbl_Gallery' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:traveltips.Services.GalleryService.#ctor">
            <summary>
            Initializes a new instance of the GalleryService class.
            </summary>
        </member>
        <member name="T:traveltips.Services.DuongService">
            <summary>
             An component type implementation of the 'tbl_Duong' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:traveltips.Services.DuongServiceBase">
            <summary>
             An object representation of the 'tbl_Duong' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Duong.cs file instead.
             All custom implementations should be done in the <see cref="T:traveltips.Entities.Duong"/> class.
             </remarks>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:traveltips.Entities.Duong"/> instance .
            </summary>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.CreateDuong(System.Nullable{System.Int64},System.String,System.Byte[],System.String,System.Nullable{System.Byte})">
            <summary>
             A simple factory method to create a new <see cref="T:traveltips.Entities.Duong"/> instance.
            </summary>
            <param name="idQuan"></param>
            <param name="tenDuong"></param>
            <param name="maDuong"></param>
            <param name="moTa"></param>
            <param name="flag"></param>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.GetByIdQuan(System.Nullable{System.Int64})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the FK_tbl_Duong_tbl_Quan key.
            	FK_tbl_Duong_tbl_Quan Description: 
            </summary>
            <param name="idQuan"></param>
            <returns>Returns a generic collection of Duong objects.</returns>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.GetByIdQuan(System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the FK_tbl_Duong_tbl_Quan key.
            	FK_tbl_Duong_tbl_Quan Description: 
            </summary>
            <param name="idQuan"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:traveltips.Entities.TList`1"/> of <c>Duong</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.Get(traveltips.Entities.DuongKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.GetByIdDuong(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_Duong index.
            </summary>
            <param name="idDuong"></param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.Duong"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.GetByIdDuong(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_Duong index.
            </summary>
            <param name="idDuong"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.Duong"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:traveltips.Entities.Duong"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:traveltips.Entities.Duong"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:traveltips.Entities.TList`1"/> </returns>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Duong</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Duong</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:traveltips.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Duong</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Duong} of <c>Duong</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.Find(traveltips.DAO.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Duong</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Duong</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Duong</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.Insert(traveltips.Entities.Duong)">
            <summary>
            	public virtualmethod that Inserts a Duong object into the datasource using a transaction.
            </summary>
            <param name="entity">Duong object to Insert.</param>
            <remarks>After Inserting into the datasource, the Duong object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Duong entity = new Duong();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	DuongService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.Insert(traveltips.Entities.TList{traveltips.Entities.Duong})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Duong</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Duong</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Duong.
             <code><![CDATA[
             TList<Duong> list = new TList<Duong>();
             Duong entity = new Duong();
             entity.StringProperty = "foo";
             Duong entity2 = new Duong();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DuongService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.Update(traveltips.Entities.Duong)">
            <summary>
            	public virtualmethod that Updates a Duong object into the datasource using a transaction.
            </summary>
            <param name="entity">Duong object to Update.</param>
            <remarks>After Updateing into the datasource, the Duong object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Duong entity = DuongService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	DuongService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.Update(traveltips.Entities.TList{traveltips.Entities.Duong})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Duong</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Duong</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Duong.
             <code><![CDATA[
             TList<Duong> list = new TList<Duong>();
             Duong entity = new Duong();
             entity.StringProperty = "foo";
             Duong entity2 = new Duong();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DuongService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.Save(traveltips.Entities.Duong)">
            <summary>
            	public virtualmethod that Saves a Duong object into the datasource using a transaction.
            </summary>
            <param name="entity">Duong object to Save.</param>
            <remarks>After Saveing into the datasource, the Duong object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Duong entity = DuongService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	DuongService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.Save(traveltips.Entities.TList{traveltips.Entities.Duong})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Duong</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Duong</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Duong.
             <code><![CDATA[
             TList<Duong> list = new TList<Duong>();
             Duong entity = new Duong();
             entity.StringProperty = "foo";
             Duong entity2 = new Duong();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DuongService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.Delete(traveltips.Entities.Duong)">
            <summary>
            	public virtualmethod that Deletes a Duong object into the datasource using a transaction.
            </summary>
            <param name="entity">Duong object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Duong object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Duong entity = DuongService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	DuongService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.Delete(traveltips.Entities.TList{traveltips.Entities.Duong})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Duong</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Duong</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Duong.
             <code><![CDATA[
             TList<Duong> list = new TList<Duong>();
             Duong entity = new Duong();
             entity.StringProperty = "foo";
             Duong entity2 = new Duong();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DuongService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.Delete(traveltips.Entities.DuongKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 idDuong
            </summary>
            <param name="idDuong">Duong pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.DeepLoadByIdDuong(System.Int64,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:traveltips.Entities.Duong"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <param name="idDuong"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Duong Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.Duong"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.DeepLoad(traveltips.Entities.Duong)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Duong Object</param>
            <remarks>
            <seealso cref="M:traveltips.Services.DuongServiceBase.DeepLoad(traveltips.Entities.Duong)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.DeepLoad(traveltips.Entities.Duong,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.DuongServiceBase.DeepLoad(traveltips.Entities.Duong)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Duong Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.DeepLoad(traveltips.Entities.Duong,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:traveltips.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:traveltips.Entities.Duong"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Duong Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.Duong})">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.DuongServiceBase.DeepLoad(traveltips.Entities.Duong)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.Duong},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.DuongServiceBase.DeepLoad(traveltips.Entities.Duong)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.Duong},System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:traveltips.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:traveltips.DAO.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:traveltips.Entities.Duong"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.DeepSave(traveltips.Entities.Duong)">
            <summary>
            public virtualDeep Saves the <see cref="T:traveltips.Entities.Duong"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Duong Object</param>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.DeepSave(traveltips.Entities.Duong,traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Duong object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Duong Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Duong</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.Duong})">
            <summary>
            Deep Save the entire <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Duong} Object</param>
        </member>
        <member name="M:traveltips.Services.DuongServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.Duong},traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:traveltips.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Duong Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:traveltips.Services.DuongServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:traveltips.Services.DuongService.#ctor">
            <summary>
            Initializes a new instance of the DuongService class.
            </summary>
        </member>
        <member name="T:traveltips.Services.ChuCongTyService">
            <summary>
             An component type implementation of the 'tbl_ChuCongTy' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:traveltips.Services.ChuCongTyServiceBase">
            <summary>
             An object representation of the 'tbl_ChuCongTy' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ChuCongTy.cs file instead.
             All custom implementations should be done in the <see cref="T:traveltips.Entities.ChuCongTy"/> class.
             </remarks>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:traveltips.Entities.ChuCongTy"/> instance .
            </summary>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.CreateChuCongTy(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Byte})">
            <summary>
             A simple factory method to create a new <see cref="T:traveltips.Entities.ChuCongTy"/> instance.
            </summary>
            <param name="tenChuCongTy"></param>
            <param name="tenCongTy"></param>
            <param name="tenDangNhap"></param>
            <param name="password"></param>
            <param name="diaChi"></param>
            <param name="dienThoaiCd"></param>
            <param name="dienThoaiDd"></param>
            <param name="ngayTao"></param>
            <param name="ngayKetThuc"></param>
            <param name="flag"></param>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.Get(traveltips.Entities.ChuCongTyKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.GetByIdChuCongTy(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_ChuCongTy index.
            </summary>
            <param name="idChuCongTy"></param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.ChuCongTy"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.GetByIdChuCongTy(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_ChuCongTy index.
            </summary>
            <param name="idChuCongTy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.ChuCongTy"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:traveltips.Entities.ChuCongTy"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:traveltips.Entities.ChuCongTy"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:traveltips.Entities.TList`1"/> </returns>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ChuCongTy</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ChuCongTy</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:traveltips.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ChuCongTy</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ChuCongTy} of <c>ChuCongTy</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.Find(traveltips.DAO.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ChuCongTy</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ChuCongTy</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ChuCongTy</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.Insert(traveltips.Entities.ChuCongTy)">
            <summary>
            	public virtualmethod that Inserts a ChuCongTy object into the datasource using a transaction.
            </summary>
            <param name="entity">ChuCongTy object to Insert.</param>
            <remarks>After Inserting into the datasource, the ChuCongTy object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ChuCongTy entity = new ChuCongTy();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ChuCongTyService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.Insert(traveltips.Entities.TList{traveltips.Entities.ChuCongTy})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ChuCongTy</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ChuCongTy</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ChuCongTy.
             <code><![CDATA[
             TList<ChuCongTy> list = new TList<ChuCongTy>();
             ChuCongTy entity = new ChuCongTy();
             entity.StringProperty = "foo";
             ChuCongTy entity2 = new ChuCongTy();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ChuCongTyService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.Update(traveltips.Entities.ChuCongTy)">
            <summary>
            	public virtualmethod that Updates a ChuCongTy object into the datasource using a transaction.
            </summary>
            <param name="entity">ChuCongTy object to Update.</param>
            <remarks>After Updateing into the datasource, the ChuCongTy object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ChuCongTy entity = ChuCongTyService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ChuCongTyService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.Update(traveltips.Entities.TList{traveltips.Entities.ChuCongTy})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ChuCongTy</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ChuCongTy</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ChuCongTy.
             <code><![CDATA[
             TList<ChuCongTy> list = new TList<ChuCongTy>();
             ChuCongTy entity = new ChuCongTy();
             entity.StringProperty = "foo";
             ChuCongTy entity2 = new ChuCongTy();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ChuCongTyService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.Save(traveltips.Entities.ChuCongTy)">
            <summary>
            	public virtualmethod that Saves a ChuCongTy object into the datasource using a transaction.
            </summary>
            <param name="entity">ChuCongTy object to Save.</param>
            <remarks>After Saveing into the datasource, the ChuCongTy object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ChuCongTy entity = ChuCongTyService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ChuCongTyService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.Save(traveltips.Entities.TList{traveltips.Entities.ChuCongTy})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ChuCongTy</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ChuCongTy</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ChuCongTy.
             <code><![CDATA[
             TList<ChuCongTy> list = new TList<ChuCongTy>();
             ChuCongTy entity = new ChuCongTy();
             entity.StringProperty = "foo";
             ChuCongTy entity2 = new ChuCongTy();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ChuCongTyService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.Delete(traveltips.Entities.ChuCongTy)">
            <summary>
            	public virtualmethod that Deletes a ChuCongTy object into the datasource using a transaction.
            </summary>
            <param name="entity">ChuCongTy object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ChuCongTy object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ChuCongTy entity = ChuCongTyService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ChuCongTyService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.Delete(traveltips.Entities.TList{traveltips.Entities.ChuCongTy})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ChuCongTy</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ChuCongTy</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ChuCongTy.
             <code><![CDATA[
             TList<ChuCongTy> list = new TList<ChuCongTy>();
             ChuCongTy entity = new ChuCongTy();
             entity.StringProperty = "foo";
             ChuCongTy entity2 = new ChuCongTy();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ChuCongTyService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.Delete(traveltips.Entities.ChuCongTyKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 idChuCongTy
            </summary>
            <param name="idChuCongTy">ChuCongTy pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.DeepLoadByIdChuCongTy(System.Int64,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:traveltips.Entities.ChuCongTy"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <param name="idChuCongTy"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ChuCongTy Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.ChuCongTy"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.DeepLoad(traveltips.Entities.ChuCongTy)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ChuCongTy Object</param>
            <remarks>
            <seealso cref="M:traveltips.Services.ChuCongTyServiceBase.DeepLoad(traveltips.Entities.ChuCongTy)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.DeepLoad(traveltips.Entities.ChuCongTy,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.ChuCongTyServiceBase.DeepLoad(traveltips.Entities.ChuCongTy)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ChuCongTy Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.DeepLoad(traveltips.Entities.ChuCongTy,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:traveltips.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:traveltips.Entities.ChuCongTy"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ChuCongTy Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.ChuCongTy})">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.ChuCongTyServiceBase.DeepLoad(traveltips.Entities.ChuCongTy)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.ChuCongTy},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.ChuCongTyServiceBase.DeepLoad(traveltips.Entities.ChuCongTy)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.ChuCongTy},System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:traveltips.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:traveltips.DAO.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:traveltips.Entities.ChuCongTy"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.DeepSave(traveltips.Entities.ChuCongTy)">
            <summary>
            public virtualDeep Saves the <see cref="T:traveltips.Entities.ChuCongTy"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ChuCongTy Object</param>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.DeepSave(traveltips.Entities.ChuCongTy,traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ChuCongTy object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ChuCongTy Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ChuCongTy</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.ChuCongTy})">
            <summary>
            Deep Save the entire <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ChuCongTy} Object</param>
        </member>
        <member name="M:traveltips.Services.ChuCongTyServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.ChuCongTy},traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:traveltips.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ChuCongTy Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:traveltips.Services.ChuCongTyServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:traveltips.Services.ChuCongTyService.#ctor">
            <summary>
            Initializes a new instance of the ChuCongTyService class.
            </summary>
        </member>
        <member name="T:traveltips.Services.ServiceViewBase`1">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:traveltips.Services.ServiceViewBaseCore`1">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:traveltips.Services.ServiceViewBaseCore`1.Execute">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:traveltips.Services.ServiceViewBaseCore`1.Execute(System.Boolean)">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:traveltips.Services.ServiceViewBaseCore`1.OnProcessStarting(traveltips.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:traveltips.Services.ServiceViewBaseCore`1.OnProcessEnded(traveltips.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:traveltips.Services.ServiceViewBaseCore`1.Get">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:traveltips.Services.ServiceViewBaseCore`1.Get(System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:traveltips.Services.ServiceViewBaseCore`1.Get(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:traveltips.Services.ServiceViewBaseCore`1.Get(System.String,System.String)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:traveltips.Services.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:traveltips.Services.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:traveltips.Services.ServiceViewBaseCore`1.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:traveltips.Services.ServiceViewBaseCore`1.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:traveltips.Services.ServiceViewBaseCore`1.Find(traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="P:traveltips.Services.ServiceViewBaseCore`1.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:traveltips.Services.ServiceViewBaseCore`1.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:traveltips.Services.ServiceViewBaseCore`1.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:traveltips.Services.ServiceViewBaseCore`1.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:traveltips.Services.ServiceViewBaseCore`1.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:traveltips.Services.ServiceViewBaseCore`1.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:traveltips.Services.ServiceViewBaseCore`1.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="E:traveltips.Services.ServiceViewBaseCore`1.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:traveltips.Services.ServiceViewBaseCore`1.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="T:traveltips.Services.TinTucServiceBase">
            <summary>
             An object representation of the 'tbl_TinTuc' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the TinTuc.cs file instead.
             All custom implementations should be done in the <see cref="T:traveltips.Entities.TinTuc"/> class.
             </remarks>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:traveltips.Entities.TinTuc"/> instance .
            </summary>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.CreateTinTuc(System.Nullable{System.Int64},System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Byte})">
            <summary>
             A simple factory method to create a new <see cref="T:traveltips.Entities.TinTuc"/> instance.
            </summary>
            <param name="idCongTy"></param>
            <param name="tieuDe"></param>
            <param name="moTaNgan"></param>
            <param name="moTaChiTiet"></param>
            <param name="khuyenMai"></param>
            <param name="flag"></param>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.GetByIdCongTy(System.Nullable{System.Int64})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the FK_tbl_TinTuc_tbl_CongTy key.
            	FK_tbl_TinTuc_tbl_CongTy Description: 
            </summary>
            <param name="idCongTy"></param>
            <returns>Returns a generic collection of TinTuc objects.</returns>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.GetByIdCongTy(System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the FK_tbl_TinTuc_tbl_CongTy key.
            	FK_tbl_TinTuc_tbl_CongTy Description: 
            </summary>
            <param name="idCongTy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:traveltips.Entities.TList`1"/> of <c>TinTuc</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.Get(traveltips.Entities.TinTucKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.GetByIdTinTuc(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_TinTuc index.
            </summary>
            <param name="idTinTuc"></param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.TinTuc"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.GetByIdTinTuc(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_TinTuc index.
            </summary>
            <param name="idTinTuc"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.TinTuc"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:traveltips.Entities.TinTuc"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:traveltips.Entities.TinTuc"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:traveltips.Entities.TList`1"/> </returns>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TinTuc</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TinTuc</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:traveltips.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TinTuc</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{TinTuc} of <c>TinTuc</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.Find(traveltips.DAO.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>TinTuc</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>TinTuc</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>TinTuc</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.Insert(traveltips.Entities.TinTuc)">
            <summary>
            	public virtualmethod that Inserts a TinTuc object into the datasource using a transaction.
            </summary>
            <param name="entity">TinTuc object to Insert.</param>
            <remarks>After Inserting into the datasource, the TinTuc object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            TinTuc entity = new TinTuc();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	TinTucService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.Insert(traveltips.Entities.TList{traveltips.Entities.TinTuc})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TinTuc</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>TinTuc</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of TinTuc.
             <code><![CDATA[
             TList<TinTuc> list = new TList<TinTuc>();
             TinTuc entity = new TinTuc();
             entity.StringProperty = "foo";
             TinTuc entity2 = new TinTuc();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TinTucService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.Update(traveltips.Entities.TinTuc)">
            <summary>
            	public virtualmethod that Updates a TinTuc object into the datasource using a transaction.
            </summary>
            <param name="entity">TinTuc object to Update.</param>
            <remarks>After Updateing into the datasource, the TinTuc object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            TinTuc entity = TinTucService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	TinTucService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.Update(traveltips.Entities.TList{traveltips.Entities.TinTuc})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TinTuc</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>TinTuc</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of TinTuc.
             <code><![CDATA[
             TList<TinTuc> list = new TList<TinTuc>();
             TinTuc entity = new TinTuc();
             entity.StringProperty = "foo";
             TinTuc entity2 = new TinTuc();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TinTucService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.Save(traveltips.Entities.TinTuc)">
            <summary>
            	public virtualmethod that Saves a TinTuc object into the datasource using a transaction.
            </summary>
            <param name="entity">TinTuc object to Save.</param>
            <remarks>After Saveing into the datasource, the TinTuc object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            TinTuc entity = TinTucService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	TinTucService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.Save(traveltips.Entities.TList{traveltips.Entities.TinTuc})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TinTuc</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>TinTuc</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of TinTuc.
             <code><![CDATA[
             TList<TinTuc> list = new TList<TinTuc>();
             TinTuc entity = new TinTuc();
             entity.StringProperty = "foo";
             TinTuc entity2 = new TinTuc();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TinTucService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.Delete(traveltips.Entities.TinTuc)">
            <summary>
            	public virtualmethod that Deletes a TinTuc object into the datasource using a transaction.
            </summary>
            <param name="entity">TinTuc object to Delete.</param>
            <remarks>After Deleteing into the datasource, the TinTuc object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            TinTuc entity = TinTucService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	TinTucService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.Delete(traveltips.Entities.TList{traveltips.Entities.TinTuc})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TinTuc</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>TinTuc</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of TinTuc.
             <code><![CDATA[
             TList<TinTuc> list = new TList<TinTuc>();
             TinTuc entity = new TinTuc();
             entity.StringProperty = "foo";
             TinTuc entity2 = new TinTuc();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TinTucService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.Delete(traveltips.Entities.TinTucKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 idTinTuc
            </summary>
            <param name="idTinTuc">TinTuc pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.DeepLoadByIdTinTuc(System.Int64,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:traveltips.Entities.TinTuc"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <param name="idTinTuc"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">TinTuc Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.TinTuc"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.DeepLoad(traveltips.Entities.TinTuc)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">TinTuc Object</param>
            <remarks>
            <seealso cref="M:traveltips.Services.TinTucServiceBase.DeepLoad(traveltips.Entities.TinTuc)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.DeepLoad(traveltips.Entities.TinTuc,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.TinTucServiceBase.DeepLoad(traveltips.Entities.TinTuc)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">TinTuc Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.DeepLoad(traveltips.Entities.TinTuc,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:traveltips.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:traveltips.Entities.TinTuc"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">TinTuc Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.TinTuc})">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.TinTucServiceBase.DeepLoad(traveltips.Entities.TinTuc)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.TinTuc},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.TinTucServiceBase.DeepLoad(traveltips.Entities.TinTuc)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.TinTuc},System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:traveltips.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:traveltips.DAO.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:traveltips.Entities.TinTuc"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.DeepSave(traveltips.Entities.TinTuc)">
            <summary>
            public virtualDeep Saves the <see cref="T:traveltips.Entities.TinTuc"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">TinTuc Object</param>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.DeepSave(traveltips.Entities.TinTuc,traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the TinTuc object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">TinTuc Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>TinTuc</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.TinTuc})">
            <summary>
            Deep Save the entire <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{TinTuc} Object</param>
        </member>
        <member name="M:traveltips.Services.TinTucServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.TinTuc},traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:traveltips.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">TinTuc Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:traveltips.Services.TinTucServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:traveltips.Services.TinTucService">
            <summary>
             An component type implementation of the 'tbl_TinTuc' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:traveltips.Services.TinTucService.#ctor">
            <summary>
            Initializes a new instance of the TinTucService class.
            </summary>
        </member>
        <member name="T:traveltips.Services.LoaiSpService">
            <summary>
             An component type implementation of the 'tbl_LoaiSP' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:traveltips.Services.LoaiSpService.#ctor">
            <summary>
            Initializes a new instance of the LoaiSpService class.
            </summary>
        </member>
        <member name="T:traveltips.Services.DomainUtil">
            <summary>
            DomainUtil class.
            </summary>
        </member>
        <member name="M:traveltips.Services.DomainUtil.GetErrorsFromList``1(traveltips.Entities.TList{``0})">
            <summary>
            Aggregates all the errors in a collection
            </summary>
        </member>
        <member name="M:traveltips.Services.DomainUtil.HandleException(System.Exception,System.String)">
            <summary>
            Wraps call to tohe <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy"/> class which handles all exceptions based on the security policy.
            </summary>
        </member>
        <member name="M:traveltips.Services.DomainUtil.GetDefaultByType(System.Data.DbType)">
            <summary>
            Get a default value for a given data type
            </summary>
            <param name="dataType">Data type for which to get the default value</param>
            <returns>An object of the default value.</returns>
        </member>
        <member name="M:traveltips.Services.DomainUtil.GetDataValue(System.Data.IDataParameter)">
            <summary>
            Get Value or Default Value from an IDataParamater
            Based on DbType
            </summary>
            <param name="p">The IDataParameter instance type is used to determine the default value.</param>
            <returns></returns>
        </member>
        <member name="M:traveltips.Services.DomainUtil.DefaultToDBNull(System.Object,System.Data.DbType)">
            <summary>
            Checks to see if the Default Value has been set to the parameter.
            If it's the default value, then create.
            </summary>
            <param name="val">The value we want to check.</param>
            <param name="dbtype">The DbType from wich we take the default value.</param>
            <returns></returns>
        </member>
        <member name="M:traveltips.Services.DomainUtil.GetParameterValue``1(System.Data.IDataParameter)">
            <summary>
            Generic method to return the value of a nullable parameter
            </summary>
            <typeparam name="T">Type of value to return</typeparam>
            <param name="parameter">Parameter from which to extract the value</param>
            <returns></returns>
        </member>
        <member name="M:traveltips.Services.DomainUtil.ConvertDataReaderToDataSet(System.Data.IDataReader)">
            <summary>
            Converts a IDataReader to a DataSet.  For use when a custom stored procedure returns an <see cref="T:System.Data.IDataReader"/>, it will
            convert all result sets returned as a DataSet.
            </summary>
            <param name="reader">The reader to convert</param>
            <returns>A dataset with one table per result in the reader</returns>
        </member>
        <member name="T:traveltips.Services.ProcessorBase">
            <summary>
            The interface that each complex business unit of work processor will use.
            </summary>
        </member>
        <member name="T:traveltips.Services.IProcessor">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:traveltips.Services.IProcessor.Process">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:traveltips.Services.IProcessor.ChangeProcessorState(traveltips.Services.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="P:traveltips.Services.IProcessor.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:traveltips.Services.IProcessor.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="M:traveltips.Services.ProcessorBase.Process">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:traveltips.Services.ProcessorBase.ChangeProcessorState(traveltips.Services.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:traveltips.Services.ProcessorBase.OnNotifyProcessorStateChanging(traveltips.Services.ProcessorState)">
            <summary>
            Raises the ProcessorStateChanging event.
            </summary>
            <param name="newProcessorState"></param>
        </member>
        <member name="P:traveltips.Services.ProcessorBase.ProcessResult">
            <summary>
            Provides the current process result of it's operation.
            </summary>
        </member>
        <member name="P:traveltips.Services.ProcessorBase.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>The name of the type of the processors to execute</value>
        </member>
        <member name="P:traveltips.Services.ProcessorBase.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="E:traveltips.Services.ProcessorBase.ProcessorStateChanging">
            <summary>
            The ProcessorStateChanging event.
            </summary>
        </member>
        <member name="T:traveltips.Services.ProcessorBase.ProcessorStateChangingEventHandler">
            <summary>
            The ProcessorStateChangingEventHandler event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:traveltips.Services.LabelLanguageService">
            <summary>
             An component type implementation of the 'tbl_LabelLanguage' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:traveltips.Services.LabelLanguageServiceBase">
            <summary>
             An object representation of the 'tbl_LabelLanguage' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the LabelLanguage.cs file instead.
             All custom implementations should be done in the <see cref="T:traveltips.Entities.LabelLanguage"/> class.
             </remarks>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:traveltips.Entities.LabelLanguage"/> instance .
            </summary>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.CreateLabelLanguage(System.Nullable{System.Int32},System.Nullable{System.Int64},System.String,System.Nullable{System.Byte})">
            <summary>
             A simple factory method to create a new <see cref="T:traveltips.Entities.LabelLanguage"/> instance.
            </summary>
            <param name="idLanguage"></param>
            <param name="idLabel"></param>
            <param name="noiDung"></param>
            <param name="flag"></param>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.GetByIdLabel(System.Nullable{System.Int64})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the FK_tbl_LabelLanguage_tbl_Label key.
            	FK_tbl_LabelLanguage_tbl_Label Description: 
            </summary>
            <param name="idLabel"></param>
            <returns>Returns a generic collection of LabelLanguage objects.</returns>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.GetByIdLabel(System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the FK_tbl_LabelLanguage_tbl_Label key.
            	FK_tbl_LabelLanguage_tbl_Label Description: 
            </summary>
            <param name="idLabel"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:traveltips.Entities.TList`1"/> of <c>LabelLanguage</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.GetByIdLanguage(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the FK_tbl_LabelLanguage_tbl_Language key.
            	FK_tbl_LabelLanguage_tbl_Language Description: 
            </summary>
            <param name="idLanguage"></param>
            <returns>Returns a generic collection of LabelLanguage objects.</returns>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.GetByIdLanguage(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the FK_tbl_LabelLanguage_tbl_Language key.
            	FK_tbl_LabelLanguage_tbl_Language Description: 
            </summary>
            <param name="idLanguage"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:traveltips.Entities.TList`1"/> of <c>LabelLanguage</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.Get(traveltips.Entities.LabelLanguageKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.GetByIdLabelLanguage(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_LabelLanguage index.
            </summary>
            <param name="idLabelLanguage"></param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.LabelLanguage"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.GetByIdLabelLanguage(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_LabelLanguage index.
            </summary>
            <param name="idLabelLanguage"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.LabelLanguage"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:traveltips.Entities.LabelLanguage"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:traveltips.Entities.LabelLanguage"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:traveltips.Entities.TList`1"/> </returns>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>LabelLanguage</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>LabelLanguage</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:traveltips.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>LabelLanguage</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{LabelLanguage} of <c>LabelLanguage</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.Find(traveltips.DAO.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>LabelLanguage</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>LabelLanguage</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>LabelLanguage</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.Insert(traveltips.Entities.LabelLanguage)">
            <summary>
            	public virtualmethod that Inserts a LabelLanguage object into the datasource using a transaction.
            </summary>
            <param name="entity">LabelLanguage object to Insert.</param>
            <remarks>After Inserting into the datasource, the LabelLanguage object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            LabelLanguage entity = new LabelLanguage();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	LabelLanguageService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.Insert(traveltips.Entities.TList{traveltips.Entities.LabelLanguage})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LabelLanguage</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>LabelLanguage</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of LabelLanguage.
             <code><![CDATA[
             TList<LabelLanguage> list = new TList<LabelLanguage>();
             LabelLanguage entity = new LabelLanguage();
             entity.StringProperty = "foo";
             LabelLanguage entity2 = new LabelLanguage();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LabelLanguageService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.Update(traveltips.Entities.LabelLanguage)">
            <summary>
            	public virtualmethod that Updates a LabelLanguage object into the datasource using a transaction.
            </summary>
            <param name="entity">LabelLanguage object to Update.</param>
            <remarks>After Updateing into the datasource, the LabelLanguage object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            LabelLanguage entity = LabelLanguageService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	LabelLanguageService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.Update(traveltips.Entities.TList{traveltips.Entities.LabelLanguage})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LabelLanguage</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>LabelLanguage</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of LabelLanguage.
             <code><![CDATA[
             TList<LabelLanguage> list = new TList<LabelLanguage>();
             LabelLanguage entity = new LabelLanguage();
             entity.StringProperty = "foo";
             LabelLanguage entity2 = new LabelLanguage();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LabelLanguageService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.Save(traveltips.Entities.LabelLanguage)">
            <summary>
            	public virtualmethod that Saves a LabelLanguage object into the datasource using a transaction.
            </summary>
            <param name="entity">LabelLanguage object to Save.</param>
            <remarks>After Saveing into the datasource, the LabelLanguage object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            LabelLanguage entity = LabelLanguageService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	LabelLanguageService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.Save(traveltips.Entities.TList{traveltips.Entities.LabelLanguage})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LabelLanguage</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>LabelLanguage</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of LabelLanguage.
             <code><![CDATA[
             TList<LabelLanguage> list = new TList<LabelLanguage>();
             LabelLanguage entity = new LabelLanguage();
             entity.StringProperty = "foo";
             LabelLanguage entity2 = new LabelLanguage();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LabelLanguageService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.Delete(traveltips.Entities.LabelLanguage)">
            <summary>
            	public virtualmethod that Deletes a LabelLanguage object into the datasource using a transaction.
            </summary>
            <param name="entity">LabelLanguage object to Delete.</param>
            <remarks>After Deleteing into the datasource, the LabelLanguage object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            LabelLanguage entity = LabelLanguageService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	LabelLanguageService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.Delete(traveltips.Entities.TList{traveltips.Entities.LabelLanguage})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LabelLanguage</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>LabelLanguage</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of LabelLanguage.
             <code><![CDATA[
             TList<LabelLanguage> list = new TList<LabelLanguage>();
             LabelLanguage entity = new LabelLanguage();
             entity.StringProperty = "foo";
             LabelLanguage entity2 = new LabelLanguage();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LabelLanguageService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.Delete(traveltips.Entities.LabelLanguageKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 idLabelLanguage
            </summary>
            <param name="idLabelLanguage">LabelLanguage pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.DeepLoadByIdLabelLanguage(System.Int64,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:traveltips.Entities.LabelLanguage"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <param name="idLabelLanguage"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LabelLanguage Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.LabelLanguage"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.DeepLoad(traveltips.Entities.LabelLanguage)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">LabelLanguage Object</param>
            <remarks>
            <seealso cref="M:traveltips.Services.LabelLanguageServiceBase.DeepLoad(traveltips.Entities.LabelLanguage)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.DeepLoad(traveltips.Entities.LabelLanguage,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.LabelLanguageServiceBase.DeepLoad(traveltips.Entities.LabelLanguage)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">LabelLanguage Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.DeepLoad(traveltips.Entities.LabelLanguage,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:traveltips.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:traveltips.Entities.LabelLanguage"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LabelLanguage Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.LabelLanguage})">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.LabelLanguageServiceBase.DeepLoad(traveltips.Entities.LabelLanguage)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.LabelLanguage},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.LabelLanguageServiceBase.DeepLoad(traveltips.Entities.LabelLanguage)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.LabelLanguage},System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:traveltips.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:traveltips.DAO.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:traveltips.Entities.LabelLanguage"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.DeepSave(traveltips.Entities.LabelLanguage)">
            <summary>
            public virtualDeep Saves the <see cref="T:traveltips.Entities.LabelLanguage"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">LabelLanguage Object</param>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.DeepSave(traveltips.Entities.LabelLanguage,traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the LabelLanguage object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">LabelLanguage Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>LabelLanguage</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.LabelLanguage})">
            <summary>
            Deep Save the entire <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{LabelLanguage} Object</param>
        </member>
        <member name="M:traveltips.Services.LabelLanguageServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.LabelLanguage},traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:traveltips.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LabelLanguage Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:traveltips.Services.LabelLanguageServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:traveltips.Services.LabelLanguageService.#ctor">
            <summary>
            Initializes a new instance of the LabelLanguageService class.
            </summary>
        </member>
        <member name="T:traveltips.Services.AdminServiceBase">
            <summary>
             An object representation of the 'tbl_Admin' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Admin.cs file instead.
             All custom implementations should be done in the <see cref="T:traveltips.Entities.Admin"/> class.
             </remarks>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:traveltips.Entities.Admin"/> instance .
            </summary>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.CreateAdmin(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Byte})">
            <summary>
             A simple factory method to create a new <see cref="T:traveltips.Entities.Admin"/> instance.
            </summary>
            <param name="tenDangNhap"></param>
            <param name="email"></param>
            <param name="password"></param>
            <param name="hoTen"></param>
            <param name="dienThoai"></param>
            <param name="flag"></param>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.Get(traveltips.Entities.AdminKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.GetByIdAdmin(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_Admin index.
            </summary>
            <param name="idAdmin"></param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.Admin"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.GetByIdAdmin(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_Admin index.
            </summary>
            <param name="idAdmin"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.Admin"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:traveltips.Entities.Admin"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:traveltips.Entities.Admin"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:traveltips.Entities.TList`1"/> </returns>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Admin</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Admin</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:traveltips.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Admin</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Admin} of <c>Admin</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.Find(traveltips.DAO.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Admin</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Admin</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Admin</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.Insert(traveltips.Entities.Admin)">
            <summary>
            	public virtualmethod that Inserts a Admin object into the datasource using a transaction.
            </summary>
            <param name="entity">Admin object to Insert.</param>
            <remarks>After Inserting into the datasource, the Admin object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Admin entity = new Admin();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AdminService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.Insert(traveltips.Entities.TList{traveltips.Entities.Admin})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Admin</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Admin</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Admin.
             <code><![CDATA[
             TList<Admin> list = new TList<Admin>();
             Admin entity = new Admin();
             entity.StringProperty = "foo";
             Admin entity2 = new Admin();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AdminService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.Update(traveltips.Entities.Admin)">
            <summary>
            	public virtualmethod that Updates a Admin object into the datasource using a transaction.
            </summary>
            <param name="entity">Admin object to Update.</param>
            <remarks>After Updateing into the datasource, the Admin object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Admin entity = AdminService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AdminService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.Update(traveltips.Entities.TList{traveltips.Entities.Admin})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Admin</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Admin</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Admin.
             <code><![CDATA[
             TList<Admin> list = new TList<Admin>();
             Admin entity = new Admin();
             entity.StringProperty = "foo";
             Admin entity2 = new Admin();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AdminService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.Save(traveltips.Entities.Admin)">
            <summary>
            	public virtualmethod that Saves a Admin object into the datasource using a transaction.
            </summary>
            <param name="entity">Admin object to Save.</param>
            <remarks>After Saveing into the datasource, the Admin object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Admin entity = AdminService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AdminService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.Save(traveltips.Entities.TList{traveltips.Entities.Admin})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Admin</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Admin</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Admin.
             <code><![CDATA[
             TList<Admin> list = new TList<Admin>();
             Admin entity = new Admin();
             entity.StringProperty = "foo";
             Admin entity2 = new Admin();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AdminService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.Delete(traveltips.Entities.Admin)">
            <summary>
            	public virtualmethod that Deletes a Admin object into the datasource using a transaction.
            </summary>
            <param name="entity">Admin object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Admin object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Admin entity = AdminService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AdminService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.Delete(traveltips.Entities.TList{traveltips.Entities.Admin})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Admin</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Admin</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Admin.
             <code><![CDATA[
             TList<Admin> list = new TList<Admin>();
             Admin entity = new Admin();
             entity.StringProperty = "foo";
             Admin entity2 = new Admin();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AdminService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.Delete(traveltips.Entities.AdminKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 idAdmin
            </summary>
            <param name="idAdmin">Admin pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.DeepLoadByIdAdmin(System.Int64,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:traveltips.Entities.Admin"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <param name="idAdmin"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Admin Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.Admin"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.DeepLoad(traveltips.Entities.Admin)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Admin Object</param>
            <remarks>
            <seealso cref="M:traveltips.Services.AdminServiceBase.DeepLoad(traveltips.Entities.Admin)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.DeepLoad(traveltips.Entities.Admin,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.AdminServiceBase.DeepLoad(traveltips.Entities.Admin)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Admin Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.DeepLoad(traveltips.Entities.Admin,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:traveltips.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:traveltips.Entities.Admin"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Admin Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.Admin})">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.AdminServiceBase.DeepLoad(traveltips.Entities.Admin)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.Admin},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.AdminServiceBase.DeepLoad(traveltips.Entities.Admin)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.Admin},System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:traveltips.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:traveltips.DAO.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:traveltips.Entities.Admin"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.DeepSave(traveltips.Entities.Admin)">
            <summary>
            public virtualDeep Saves the <see cref="T:traveltips.Entities.Admin"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Admin Object</param>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.DeepSave(traveltips.Entities.Admin,traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Admin object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Admin Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Admin</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.Admin})">
            <summary>
            Deep Save the entire <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Admin} Object</param>
        </member>
        <member name="M:traveltips.Services.AdminServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.Admin},traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:traveltips.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Admin Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:traveltips.Services.AdminServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:traveltips.Services.GenericProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary> 
        </member>
        <member name="M:traveltips.Services.GenericProcessorResult.#ctor">
            <summary>
            Initializes a new instance of the GenericProcessorResult class.
            </summary>
        </member>
        <member name="M:traveltips.Services.GenericProcessorResult.AddBrokenRulesList(System.Type,traveltips.Entities.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:traveltips.Services.GenericProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:traveltips.Services.GenericProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="P:traveltips.Services.GenericProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation. 
            This is set by the processor.
            </summary>
        </member>
        <member name="T:traveltips.Services.DichVuService">
            <summary>
             An component type implementation of the 'tbl_DichVu' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:traveltips.Services.DichVuService.#ctor">
            <summary>
            Initializes a new instance of the DichVuService class.
            </summary>
        </member>
        <member name="T:traveltips.Services.CongTyService">
            <summary>
             An component type implementation of the 'tbl_CongTy' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:traveltips.Services.CongTyService.#ctor">
            <summary>
            Initializes a new instance of the CongTyService class.
            </summary>
        </member>
        <member name="T:traveltips.Services.ProcessorState">
            <summary>
            ProcessorState enumeration.
            </summary>
        </member>
        <member name="F:traveltips.Services.ProcessorState.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:traveltips.Services.ProcessorState.Running">
            <summary>
            Running
            </summary>
        </member>
        <member name="F:traveltips.Services.ProcessorState.Stopped">
            <summary>
            Stopped
            </summary>
        </member>
        <member name="F:traveltips.Services.ProcessorState.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="T:traveltips.Services.ThuocTinhSanPhamService">
            <summary>
             An component type implementation of the 'tbl_ThuocTinhSanPham' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:traveltips.Services.ThuocTinhSanPhamService.#ctor">
            <summary>
            Initializes a new instance of the ThuocTinhSanPhamService class.
            </summary>
        </member>
        <member name="T:traveltips.Services.LanguageServiceBase">
            <summary>
             An object representation of the 'tbl_Language' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Language.cs file instead.
             All custom implementations should be done in the <see cref="T:traveltips.Entities.Language"/> class.
             </remarks>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:traveltips.Entities.Language"/> instance .
            </summary>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.CreateLanguage(System.String,System.String,System.String,System.Nullable{System.Byte})">
            <summary>
             A simple factory method to create a new <see cref="T:traveltips.Entities.Language"/> instance.
            </summary>
            <param name="tenNn"></param>
            <param name="maNn"></param>
            <param name="mota"></param>
            <param name="flag"></param>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.Get(traveltips.Entities.LanguageKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.GetByIdLanguage(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_Language index.
            </summary>
            <param name="idLanguage"></param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.Language"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.GetByIdLanguage(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_Language index.
            </summary>
            <param name="idLanguage"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.Language"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:traveltips.Entities.Language"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:traveltips.Entities.Language"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:traveltips.Entities.TList`1"/> </returns>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Language</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Language</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:traveltips.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Language</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Language} of <c>Language</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.Find(traveltips.DAO.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Language</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Language</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Language</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.Insert(traveltips.Entities.Language)">
            <summary>
            	public virtualmethod that Inserts a Language object into the datasource using a transaction.
            </summary>
            <param name="entity">Language object to Insert.</param>
            <remarks>After Inserting into the datasource, the Language object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Language entity = new Language();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	LanguageService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.Insert(traveltips.Entities.TList{traveltips.Entities.Language})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Language</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Language</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Language.
             <code><![CDATA[
             TList<Language> list = new TList<Language>();
             Language entity = new Language();
             entity.StringProperty = "foo";
             Language entity2 = new Language();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LanguageService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.Update(traveltips.Entities.Language)">
            <summary>
            	public virtualmethod that Updates a Language object into the datasource using a transaction.
            </summary>
            <param name="entity">Language object to Update.</param>
            <remarks>After Updateing into the datasource, the Language object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Language entity = LanguageService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	LanguageService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.Update(traveltips.Entities.TList{traveltips.Entities.Language})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Language</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Language</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Language.
             <code><![CDATA[
             TList<Language> list = new TList<Language>();
             Language entity = new Language();
             entity.StringProperty = "foo";
             Language entity2 = new Language();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LanguageService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.Save(traveltips.Entities.Language)">
            <summary>
            	public virtualmethod that Saves a Language object into the datasource using a transaction.
            </summary>
            <param name="entity">Language object to Save.</param>
            <remarks>After Saveing into the datasource, the Language object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Language entity = LanguageService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	LanguageService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.Save(traveltips.Entities.TList{traveltips.Entities.Language})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Language</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Language</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Language.
             <code><![CDATA[
             TList<Language> list = new TList<Language>();
             Language entity = new Language();
             entity.StringProperty = "foo";
             Language entity2 = new Language();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LanguageService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.Delete(traveltips.Entities.Language)">
            <summary>
            	public virtualmethod that Deletes a Language object into the datasource using a transaction.
            </summary>
            <param name="entity">Language object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Language object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Language entity = LanguageService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	LanguageService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.Delete(traveltips.Entities.TList{traveltips.Entities.Language})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Language</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Language</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Language.
             <code><![CDATA[
             TList<Language> list = new TList<Language>();
             Language entity = new Language();
             entity.StringProperty = "foo";
             Language entity2 = new Language();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LanguageService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.Delete(traveltips.Entities.LanguageKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 idLanguage
            </summary>
            <param name="idLanguage">Language pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.DeepLoadByIdLanguage(System.Int32,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:traveltips.Entities.Language"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <param name="idLanguage"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Language Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.Language"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.DeepLoad(traveltips.Entities.Language)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Language Object</param>
            <remarks>
            <seealso cref="M:traveltips.Services.LanguageServiceBase.DeepLoad(traveltips.Entities.Language)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.DeepLoad(traveltips.Entities.Language,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.LanguageServiceBase.DeepLoad(traveltips.Entities.Language)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Language Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.DeepLoad(traveltips.Entities.Language,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:traveltips.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:traveltips.Entities.Language"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Language Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.Language})">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.LanguageServiceBase.DeepLoad(traveltips.Entities.Language)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.Language},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.LanguageServiceBase.DeepLoad(traveltips.Entities.Language)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.Language},System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:traveltips.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:traveltips.DAO.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:traveltips.Entities.Language"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.DeepSave(traveltips.Entities.Language)">
            <summary>
            public virtualDeep Saves the <see cref="T:traveltips.Entities.Language"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Language Object</param>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.DeepSave(traveltips.Entities.Language,traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Language object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Language Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Language</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.Language})">
            <summary>
            Deep Save the entire <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Language} Object</param>
        </member>
        <member name="M:traveltips.Services.LanguageServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.Language},traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:traveltips.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Language Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:traveltips.Services.LanguageServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:traveltips.Services.KhuVucServiceBase">
            <summary>
             An object representation of the 'tbl_KhuVuc' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the KhuVuc.cs file instead.
             All custom implementations should be done in the <see cref="T:traveltips.Entities.KhuVuc"/> class.
             </remarks>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:traveltips.Entities.KhuVuc"/> instance .
            </summary>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.CreateKhuVuc(System.String,System.Byte[],System.String,System.Nullable{System.Byte})">
            <summary>
             A simple factory method to create a new <see cref="T:traveltips.Entities.KhuVuc"/> instance.
            </summary>
            <param name="tenKv"></param>
            <param name="maKv"></param>
            <param name="moTa"></param>
            <param name="flag"></param>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.Get(traveltips.Entities.KhuVucKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.GetByIdKhuVuc(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_KhuVuc index.
            </summary>
            <param name="idKhuVuc"></param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.KhuVuc"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.GetByIdKhuVuc(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:traveltips.Entities.TList`1"/> from the datasource based on the primary key PK_tbl_KhuVuc index.
            </summary>
            <param name="idKhuVuc"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.KhuVuc"/> class.</returns>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:traveltips.Entities.KhuVuc"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:traveltips.Entities.KhuVuc"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:traveltips.Entities.TList`1"/> </returns>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>KhuVuc</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:traveltips.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>KhuVuc</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:traveltips.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>KhuVuc</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{KhuVuc} of <c>KhuVuc</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.Find(traveltips.DAO.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>KhuVuc</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>KhuVuc</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.Find(traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>KhuVuc</c> objects.</returns>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.Insert(traveltips.Entities.KhuVuc)">
            <summary>
            	public virtualmethod that Inserts a KhuVuc object into the datasource using a transaction.
            </summary>
            <param name="entity">KhuVuc object to Insert.</param>
            <remarks>After Inserting into the datasource, the KhuVuc object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            KhuVuc entity = new KhuVuc();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	KhuVucService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.Insert(traveltips.Entities.TList{traveltips.Entities.KhuVuc})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>KhuVuc</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>KhuVuc</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of KhuVuc.
             <code><![CDATA[
             TList<KhuVuc> list = new TList<KhuVuc>();
             KhuVuc entity = new KhuVuc();
             entity.StringProperty = "foo";
             KhuVuc entity2 = new KhuVuc();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	KhuVucService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.Update(traveltips.Entities.KhuVuc)">
            <summary>
            	public virtualmethod that Updates a KhuVuc object into the datasource using a transaction.
            </summary>
            <param name="entity">KhuVuc object to Update.</param>
            <remarks>After Updateing into the datasource, the KhuVuc object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            KhuVuc entity = KhuVucService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	KhuVucService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.Update(traveltips.Entities.TList{traveltips.Entities.KhuVuc})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>KhuVuc</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>KhuVuc</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of KhuVuc.
             <code><![CDATA[
             TList<KhuVuc> list = new TList<KhuVuc>();
             KhuVuc entity = new KhuVuc();
             entity.StringProperty = "foo";
             KhuVuc entity2 = new KhuVuc();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	KhuVucService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.Save(traveltips.Entities.KhuVuc)">
            <summary>
            	public virtualmethod that Saves a KhuVuc object into the datasource using a transaction.
            </summary>
            <param name="entity">KhuVuc object to Save.</param>
            <remarks>After Saveing into the datasource, the KhuVuc object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            KhuVuc entity = KhuVucService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	KhuVucService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.Save(traveltips.Entities.TList{traveltips.Entities.KhuVuc})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>KhuVuc</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>KhuVuc</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of KhuVuc.
             <code><![CDATA[
             TList<KhuVuc> list = new TList<KhuVuc>();
             KhuVuc entity = new KhuVuc();
             entity.StringProperty = "foo";
             KhuVuc entity2 = new KhuVuc();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	KhuVucService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.Delete(traveltips.Entities.KhuVuc)">
            <summary>
            	public virtualmethod that Deletes a KhuVuc object into the datasource using a transaction.
            </summary>
            <param name="entity">KhuVuc object to Delete.</param>
            <remarks>After Deleteing into the datasource, the KhuVuc object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            KhuVuc entity = KhuVucService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	KhuVucService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.Delete(traveltips.Entities.TList{traveltips.Entities.KhuVuc})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:traveltips.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>KhuVuc</c> objects in a <see cref="T:traveltips.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>KhuVuc</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of KhuVuc.
             <code><![CDATA[
             TList<KhuVuc> list = new TList<KhuVuc>();
             KhuVuc entity = new KhuVuc();
             entity.StringProperty = "foo";
             KhuVuc entity2 = new KhuVuc();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	KhuVucService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.Delete(traveltips.Entities.KhuVucKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 idKhuVuc
            </summary>
            <param name="idKhuVuc">KhuVuc pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.DeepLoadByIdKhuVuc(System.Int64,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:traveltips.Entities.KhuVuc"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <param name="idKhuVuc"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">KhuVuc Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.KhuVuc"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.DeepLoad(traveltips.Entities.KhuVuc)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">KhuVuc Object</param>
            <remarks>
            <seealso cref="M:traveltips.Services.KhuVucServiceBase.DeepLoad(traveltips.Entities.KhuVuc)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.DeepLoad(traveltips.Entities.KhuVuc,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.KhuVucServiceBase.DeepLoad(traveltips.Entities.KhuVuc)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">KhuVuc Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.DeepLoad(traveltips.Entities.KhuVuc,System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:traveltips.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:traveltips.DAO.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:traveltips.Entities.KhuVuc"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">KhuVuc Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.KhuVuc})">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.KhuVucServiceBase.DeepLoad(traveltips.Entities.KhuVuc)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.KhuVuc},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:traveltips.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:traveltips.Services.KhuVucServiceBase.DeepLoad(traveltips.Entities.KhuVuc)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:traveltips.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.DeepLoad(traveltips.Entities.TList{traveltips.Entities.KhuVuc},System.Boolean,traveltips.DAO.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:traveltips.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:traveltips.DAO.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:traveltips.Entities.KhuVuc"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.DeepSave(traveltips.Entities.KhuVuc)">
            <summary>
            public virtualDeep Saves the <see cref="T:traveltips.Entities.KhuVuc"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">KhuVuc Object</param>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.DeepSave(traveltips.Entities.KhuVuc,traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the KhuVuc object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">KhuVuc Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>KhuVuc</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.KhuVuc})">
            <summary>
            Deep Save the entire <see cref="T:traveltips.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{KhuVuc} Object</param>
        </member>
        <member name="M:traveltips.Services.KhuVucServiceBase.DeepSave(traveltips.Entities.TList{traveltips.Entities.KhuVuc},traveltips.DAO.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:traveltips.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:traveltips.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">KhuVuc Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:traveltips.Services.KhuVucServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:traveltips.Services.ProcessStartingHandler">
            <summary>
            ProcessStartingHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:traveltips.Services.ProcessEndedHandler">
            <summary>
            ProcessEndedHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:traveltips.Services.ProcessorEventArgs">
            <summary>
            ProcessorEventArgs
            </summary>
        </member>
        <member name="M:traveltips.Services.ProcessorEventArgs.#ctor(traveltips.Services.ProcessorBase)">
            <summary>
            Initializes a new instance of the ProcessorEventArgs class.
            </summary>
            <param name="processor"></param>
        </member>
        <member name="P:traveltips.Services.ProcessorEventArgs.Processor">
            <summary>
            Gets or sets the processor.
            </summary>
            <value>The processor.</value>
        </member>
        <member name="T:traveltips.Services.SanPhamService">
            <summary>
             An component type implementation of the 'tbl_SanPham' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:traveltips.Services.SanPhamService.#ctor">
            <summary>
            Initializes a new instance of the SanPhamService class.
            </summary>
        </member>
        <member name="T:traveltips.Services.QuocGiaService">
            <summary>
             An component type implementation of the 'tbl_QuocGia' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:traveltips.Services.QuocGiaService.#ctor">
            <summary>
            Initializes a new instance of the QuocGiaService class.
            </summary>
        </member>
        <member name="T:traveltips.Services.AdminService">
            <summary>
             An component type implementation of the 'tbl_Admin' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:traveltips.Services.AdminService.#ctor">
            <summary>
            Initializes a new instance of the AdminService class.
            </summary>
        </member>
        <member name="T:traveltips.Services.LanguageService">
            <summary>
             An component type implementation of the 'tbl_Language' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:traveltips.Services.LanguageService.#ctor">
            <summary>
            Initializes a new instance of the LanguageService class.
            </summary>
        </member>
        <member name="T:traveltips.Services.KhuVucService">
            <summary>
             An component type implementation of the 'tbl_KhuVuc' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:traveltips.Services.KhuVucService.#ctor">
            <summary>
            Initializes a new instance of the KhuVucService class.
            </summary>
        </member>
    </members>
</doc>
