<?xml version="1.0"?>
<doc>
    <assembly>
        <name>traveltips.DAO.SqlClient</name>
    </assembly>
    <members>
        <member name="T:traveltips.DAO.SqlClient.SqlLabelLanguageProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.LabelLanguage"/> entity.
            </summary>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlLabelLanguageProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.LabelLanguage"/> entity.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLabelLanguageProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlLabelLanguageProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLabelLanguageProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlLabelLanguageProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLabelLanguageProviderBase.Delete(traveltips.DAO.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idLabelLanguage">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLabelLanguageProviderBase.Find(traveltips.DAO.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of traveltips.Entities.LabelLanguage objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLabelLanguageProviderBase.Find(traveltips.DAO.TransactionManager,traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of traveltips.Entities.LabelLanguage objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLabelLanguageProviderBase.GetAll(traveltips.DAO.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.LabelLanguage objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLabelLanguageProviderBase.GetPaged(traveltips.DAO.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.LabelLanguage objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLabelLanguageProviderBase.GetByIdLabel(traveltips.DAO.TransactionManager,System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_tbl_LabelLanguage_tbl_Label key.
            	FK_tbl_LabelLanguage_tbl_Label Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="idLabel"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.LabelLanguage objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLabelLanguageProviderBase.GetByIdLanguage(traveltips.DAO.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_tbl_LabelLanguage_tbl_Language key.
            	FK_tbl_LabelLanguage_tbl_Language Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="idLanguage"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.LabelLanguage objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLabelLanguageProviderBase.GetByIdLabelLanguage(traveltips.DAO.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tbl_LabelLanguage index.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="idLabelLanguage"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.LabelLanguage"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLabelLanguageProviderBase.BulkInsert(traveltips.DAO.TransactionManager,traveltips.Entities.TList{traveltips.Entities.LabelLanguage})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.LabelLanguage object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLabelLanguageProviderBase.Insert(traveltips.DAO.TransactionManager,traveltips.Entities.LabelLanguage)">
            <summary>
            	Inserts a traveltips.Entities.LabelLanguage object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.LabelLanguage object to insert.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.LabelLanguage object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLabelLanguageProviderBase.Update(traveltips.DAO.TransactionManager,traveltips.Entities.LabelLanguage)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.LabelLanguage object to update.</param>
            <remarks>
            	After updating the datasource, the traveltips.Entities.LabelLanguage object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlLabelLanguageProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlLabelLanguageProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlLabelLanguageProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLabelLanguageProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlLabelLanguageProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlKhuVucProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.KhuVuc"/> entity.
            </summary>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlKhuVucProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.KhuVuc"/> entity.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlKhuVucProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlKhuVucProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlKhuVucProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlKhuVucProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlKhuVucProviderBase.Delete(traveltips.DAO.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idKhuVuc">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlKhuVucProviderBase.Find(traveltips.DAO.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of traveltips.Entities.KhuVuc objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlKhuVucProviderBase.Find(traveltips.DAO.TransactionManager,traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of traveltips.Entities.KhuVuc objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlKhuVucProviderBase.GetAll(traveltips.DAO.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.KhuVuc objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlKhuVucProviderBase.GetPaged(traveltips.DAO.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.KhuVuc objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlKhuVucProviderBase.GetByIdKhuVuc(traveltips.DAO.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tbl_KhuVuc index.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="idKhuVuc"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.KhuVuc"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlKhuVucProviderBase.BulkInsert(traveltips.DAO.TransactionManager,traveltips.Entities.TList{traveltips.Entities.KhuVuc})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.KhuVuc object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlKhuVucProviderBase.Insert(traveltips.DAO.TransactionManager,traveltips.Entities.KhuVuc)">
            <summary>
            	Inserts a traveltips.Entities.KhuVuc object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.KhuVuc object to insert.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.KhuVuc object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlKhuVucProviderBase.Update(traveltips.DAO.TransactionManager,traveltips.Entities.KhuVuc)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.KhuVuc object to update.</param>
            <remarks>
            	After updating the datasource, the traveltips.Entities.KhuVuc object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlKhuVucProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlKhuVucProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlKhuVucProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlKhuVucProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlKhuVucProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlCongTyProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.CongTy"/> entity.
            </summary>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlCongTyProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.CongTy"/> entity.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlCongTyProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlCongTyProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlCongTyProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlCongTyProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlCongTyProviderBase.Delete(traveltips.DAO.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idCongTy">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlCongTyProviderBase.Find(traveltips.DAO.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of traveltips.Entities.CongTy objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlCongTyProviderBase.Find(traveltips.DAO.TransactionManager,traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of traveltips.Entities.CongTy objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlCongTyProviderBase.GetAll(traveltips.DAO.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.CongTy objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlCongTyProviderBase.GetPaged(traveltips.DAO.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.CongTy objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlCongTyProviderBase.GetByIdChuCongTy(traveltips.DAO.TransactionManager,System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_tbl_CongTy_tbl_ChuCongTy key.
            	FK_tbl_CongTy_tbl_ChuCongTy Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="idChuCongTy"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.CongTy objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlCongTyProviderBase.GetByIdDanhMuc(traveltips.DAO.TransactionManager,System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_tbl_CongTy_tbl_DanhMuc key.
            	FK_tbl_CongTy_tbl_DanhMuc Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="idDanhMuc"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.CongTy objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlCongTyProviderBase.GetByIdCongTy(traveltips.DAO.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tbl_CongTy index.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="idCongTy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.CongTy"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlCongTyProviderBase.BulkInsert(traveltips.DAO.TransactionManager,traveltips.Entities.TList{traveltips.Entities.CongTy})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.CongTy object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlCongTyProviderBase.Insert(traveltips.DAO.TransactionManager,traveltips.Entities.CongTy)">
            <summary>
            	Inserts a traveltips.Entities.CongTy object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.CongTy object to insert.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.CongTy object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlCongTyProviderBase.Update(traveltips.DAO.TransactionManager,traveltips.Entities.CongTy)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.CongTy object to update.</param>
            <remarks>
            	After updating the datasource, the traveltips.Entities.CongTy object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlCongTyProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlCongTyProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlCongTyProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlCongTyProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlCongTyProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlNetTiersProvider">
            <summary>
            This class is the Sql implementation of the NetTiersProvider.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlNetTiersProvider.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:traveltips.DAO.SqlClient.SqlNetTiersProvider"/> class.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlNetTiersProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlNetTiersProvider.CreateTransaction">
            <summary>
            Creates a new <c cref="T:traveltips.DAO.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(traveltips.DAO.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(traveltips.DAO.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(traveltips.DAO.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlNetTiersProvider.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlNetTiersProvider.ExecuteReader(traveltips.DAO.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlNetTiersProvider.ExecuteReader(traveltips.DAO.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlNetTiersProvider.ExecuteReader(traveltips.DAO.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlNetTiersProvider.ExecuteDataSet(traveltips.DAO.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlNetTiersProvider.ExecuteDataSet(traveltips.DAO.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlNetTiersProvider.ExecuteDataSet(traveltips.DAO.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlNetTiersProvider.ExecuteScalar(traveltips.DAO.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlNetTiersProvider.ExecuteScalar(traveltips.DAO.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlNetTiersProvider.ExecuteScalar(traveltips.DAO.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.UseStoredProcedure">
            <summary>
            Gets a value indicating whether to use stored procedure or not.
            </summary>
            <value>
            	<c>true</c> if this repository use stored procedures; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.IsTransactionSupported">
            <summary>
             Indicates if the current <c cref="T:traveltips.DAO.Bases.NetTiersProvider"/> implementation supports Transacton.
            </summary>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.QuocGiaProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:traveltips.Entities.QuocGia"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlQuocGiaProvider">
            <summary>
            Gets the current <c cref="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlQuocGiaProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.AdminProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:traveltips.Entities.Admin"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlAdminProvider">
            <summary>
            Gets the current <c cref="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlAdminProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SanPhamProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:traveltips.Entities.SanPham"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlSanPhamProvider">
            <summary>
            Gets the current <c cref="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlSanPhamProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.LoaiSpProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:traveltips.Entities.LoaiSp"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlLoaiSpProvider">
            <summary>
            Gets the current <c cref="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlLoaiSpProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.ThanhPhoProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:traveltips.Entities.ThanhPho"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlThanhPhoProvider">
            <summary>
            Gets the current <c cref="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlThanhPhoProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.ThuocTinhProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:traveltips.Entities.ThuocTinh"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlThuocTinhProvider">
            <summary>
            Gets the current <c cref="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlThuocTinhProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.TuDienProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:traveltips.Entities.TuDien"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlTuDienProvider">
            <summary>
            Gets the current <c cref="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlTuDienProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.QuanProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:traveltips.Entities.Quan"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlQuanProvider">
            <summary>
            Gets the current <c cref="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlQuanProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.TinTucProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:traveltips.Entities.TinTuc"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlTinTucProvider">
            <summary>
            Gets the current <c cref="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlTinTucProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.ThuocTinhSanPhamProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:traveltips.Entities.ThuocTinhSanPham"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlThuocTinhSanPhamProvider">
            <summary>
            Gets the current <c cref="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlThuocTinhSanPhamProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.LanguageProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:traveltips.Entities.Language"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlLanguageProvider">
            <summary>
            Gets the current <c cref="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlLanguageProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.LabelNnProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:traveltips.Entities.LabelNn"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlLabelNnProvider">
            <summary>
            Gets the current <c cref="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlLabelNnProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.DanhMucProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:traveltips.Entities.DanhMuc"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlDanhMucProvider">
            <summary>
            Gets the current <c cref="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlDanhMucProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.ChuCongTyProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:traveltips.Entities.ChuCongTy"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlChuCongTyProvider">
            <summary>
            Gets the current <c cref="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlChuCongTyProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.CongTyProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:traveltips.Entities.CongTy"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlCongTyProvider">
            <summary>
            Gets the current <c cref="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlCongTyProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.CommentProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:traveltips.Entities.Comment"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlCommentProvider">
            <summary>
            Gets the current <c cref="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlCommentProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.DichVuProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:traveltips.Entities.DichVu"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlDichVuProvider">
            <summary>
            Gets the current <c cref="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlDichVuProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.LabelLanguageProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:traveltips.Entities.LabelLanguage"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlLabelLanguageProvider">
            <summary>
            Gets the current <c cref="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlLabelLanguageProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.DuongProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:traveltips.Entities.Duong"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlDuongProvider">
            <summary>
            Gets the current <c cref="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlDuongProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.KhuVucProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:traveltips.Entities.KhuVuc"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlKhuVucProvider">
            <summary>
            Gets the current <c cref="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlKhuVucProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.UserProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:traveltips.Entities.User"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlUserProvider">
            <summary>
            Gets the current <c cref="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlUserProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.GalleryProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:traveltips.Entities.Gallery"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlGalleryProvider">
            <summary>
            Gets the current <c cref="P:traveltips.DAO.SqlClient.SqlNetTiersProvider.SqlGalleryProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlThuocTinhProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.ThuocTinh"/> entity.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThuocTinhProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlThuocTinhProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThuocTinhProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlThuocTinhProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThuocTinhProviderBase.Delete(traveltips.DAO.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idThuocTinh">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThuocTinhProviderBase.Find(traveltips.DAO.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of traveltips.Entities.ThuocTinh objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThuocTinhProviderBase.Find(traveltips.DAO.TransactionManager,traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of traveltips.Entities.ThuocTinh objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThuocTinhProviderBase.GetAll(traveltips.DAO.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.ThuocTinh objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThuocTinhProviderBase.GetPaged(traveltips.DAO.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.ThuocTinh objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThuocTinhProviderBase.GetByIdThuocTinh(traveltips.DAO.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tbl_ThuocTinh index.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="idThuocTinh"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.ThuocTinh"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThuocTinhProviderBase.BulkInsert(traveltips.DAO.TransactionManager,traveltips.Entities.TList{traveltips.Entities.ThuocTinh})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.ThuocTinh object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThuocTinhProviderBase.Insert(traveltips.DAO.TransactionManager,traveltips.Entities.ThuocTinh)">
            <summary>
            	Inserts a traveltips.Entities.ThuocTinh object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.ThuocTinh object to insert.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.ThuocTinh object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThuocTinhProviderBase.Update(traveltips.DAO.TransactionManager,traveltips.Entities.ThuocTinh)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.ThuocTinh object to update.</param>
            <remarks>
            	After updating the datasource, the traveltips.Entities.ThuocTinh object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlThuocTinhProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlThuocTinhProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlThuocTinhProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlAdminProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.Admin"/> entity.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlAdminProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlAdminProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlAdminProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlAdminProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlAdminProviderBase.Delete(traveltips.DAO.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idAdmin">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlAdminProviderBase.Find(traveltips.DAO.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of traveltips.Entities.Admin objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlAdminProviderBase.Find(traveltips.DAO.TransactionManager,traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of traveltips.Entities.Admin objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlAdminProviderBase.GetAll(traveltips.DAO.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.Admin objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlAdminProviderBase.GetPaged(traveltips.DAO.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.Admin objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlAdminProviderBase.GetByIdAdmin(traveltips.DAO.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tbl_Admin index.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="idAdmin"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.Admin"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlAdminProviderBase.BulkInsert(traveltips.DAO.TransactionManager,traveltips.Entities.TList{traveltips.Entities.Admin})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.Admin object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlAdminProviderBase.Insert(traveltips.DAO.TransactionManager,traveltips.Entities.Admin)">
            <summary>
            	Inserts a traveltips.Entities.Admin object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.Admin object to insert.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.Admin object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlAdminProviderBase.Update(traveltips.DAO.TransactionManager,traveltips.Entities.Admin)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.Admin object to update.</param>
            <remarks>
            	After updating the datasource, the traveltips.Entities.Admin object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlAdminProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlAdminProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlAdminProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlQuocGiaProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.QuocGia"/> entity.
            </summary>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlQuocGiaProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.QuocGia"/> entity.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlQuocGiaProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlQuocGiaProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlQuocGiaProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlQuocGiaProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlQuocGiaProviderBase.Delete(traveltips.DAO.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idQuocGia">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlQuocGiaProviderBase.Find(traveltips.DAO.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of traveltips.Entities.QuocGia objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlQuocGiaProviderBase.Find(traveltips.DAO.TransactionManager,traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of traveltips.Entities.QuocGia objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlQuocGiaProviderBase.GetAll(traveltips.DAO.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.QuocGia objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlQuocGiaProviderBase.GetPaged(traveltips.DAO.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.QuocGia objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlQuocGiaProviderBase.GetByIdQuocGia(traveltips.DAO.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tbl_QuocGia index.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="idQuocGia"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.QuocGia"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlQuocGiaProviderBase.BulkInsert(traveltips.DAO.TransactionManager,traveltips.Entities.TList{traveltips.Entities.QuocGia})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.QuocGia object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlQuocGiaProviderBase.Insert(traveltips.DAO.TransactionManager,traveltips.Entities.QuocGia)">
            <summary>
            	Inserts a traveltips.Entities.QuocGia object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.QuocGia object to insert.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.QuocGia object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlQuocGiaProviderBase.Update(traveltips.DAO.TransactionManager,traveltips.Entities.QuocGia)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.QuocGia object to update.</param>
            <remarks>
            	After updating the datasource, the traveltips.Entities.QuocGia object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlQuocGiaProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlQuocGiaProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlQuocGiaProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlQuocGiaProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlQuocGiaProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlChuCongTyProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.ChuCongTy"/> entity.
            </summary>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlChuCongTyProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.ChuCongTy"/> entity.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlChuCongTyProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlChuCongTyProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlChuCongTyProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlChuCongTyProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlChuCongTyProviderBase.Delete(traveltips.DAO.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idChuCongTy">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlChuCongTyProviderBase.Find(traveltips.DAO.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of traveltips.Entities.ChuCongTy objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlChuCongTyProviderBase.Find(traveltips.DAO.TransactionManager,traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of traveltips.Entities.ChuCongTy objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlChuCongTyProviderBase.GetAll(traveltips.DAO.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.ChuCongTy objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlChuCongTyProviderBase.GetPaged(traveltips.DAO.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.ChuCongTy objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlChuCongTyProviderBase.GetByIdChuCongTy(traveltips.DAO.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tbl_ChuCongTy index.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="idChuCongTy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.ChuCongTy"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlChuCongTyProviderBase.BulkInsert(traveltips.DAO.TransactionManager,traveltips.Entities.TList{traveltips.Entities.ChuCongTy})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.ChuCongTy object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlChuCongTyProviderBase.Insert(traveltips.DAO.TransactionManager,traveltips.Entities.ChuCongTy)">
            <summary>
            	Inserts a traveltips.Entities.ChuCongTy object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.ChuCongTy object to insert.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.ChuCongTy object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlChuCongTyProviderBase.Update(traveltips.DAO.TransactionManager,traveltips.Entities.ChuCongTy)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.ChuCongTy object to update.</param>
            <remarks>
            	After updating the datasource, the traveltips.Entities.ChuCongTy object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlChuCongTyProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlChuCongTyProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlChuCongTyProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlChuCongTyProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlChuCongTyProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlThuocTinhSanPhamProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.ThuocTinhSanPham"/> entity.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThuocTinhSanPhamProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlThuocTinhSanPhamProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThuocTinhSanPhamProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlThuocTinhSanPhamProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThuocTinhSanPhamProviderBase.Delete(traveltips.DAO.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idTtsp">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThuocTinhSanPhamProviderBase.Find(traveltips.DAO.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of traveltips.Entities.ThuocTinhSanPham objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThuocTinhSanPhamProviderBase.Find(traveltips.DAO.TransactionManager,traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of traveltips.Entities.ThuocTinhSanPham objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThuocTinhSanPhamProviderBase.GetAll(traveltips.DAO.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.ThuocTinhSanPham objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThuocTinhSanPhamProviderBase.GetPaged(traveltips.DAO.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.ThuocTinhSanPham objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThuocTinhSanPhamProviderBase.GetByIdThuocTinh(traveltips.DAO.TransactionManager,System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_tbl_ThuocTinhSanPham_tbl_ThuocTinh key.
            	FK_tbl_ThuocTinhSanPham_tbl_ThuocTinh Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="idThuocTinh"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.ThuocTinhSanPham objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThuocTinhSanPhamProviderBase.GetByIdSanPham(traveltips.DAO.TransactionManager,System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_tbl_ThuocTinhSanPham_tbl_SanPham key.
            	FK_tbl_ThuocTinhSanPham_tbl_SanPham Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="idSanPham"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.ThuocTinhSanPham objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThuocTinhSanPhamProviderBase.GetByIdTtsp(traveltips.DAO.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tbl_ThuocTinhSanPham index.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="idTtsp"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.ThuocTinhSanPham"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThuocTinhSanPhamProviderBase.BulkInsert(traveltips.DAO.TransactionManager,traveltips.Entities.TList{traveltips.Entities.ThuocTinhSanPham})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.ThuocTinhSanPham object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThuocTinhSanPhamProviderBase.Insert(traveltips.DAO.TransactionManager,traveltips.Entities.ThuocTinhSanPham)">
            <summary>
            	Inserts a traveltips.Entities.ThuocTinhSanPham object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.ThuocTinhSanPham object to insert.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.ThuocTinhSanPham object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThuocTinhSanPhamProviderBase.Update(traveltips.DAO.TransactionManager,traveltips.Entities.ThuocTinhSanPham)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.ThuocTinhSanPham object to update.</param>
            <remarks>
            	After updating the datasource, the traveltips.Entities.ThuocTinhSanPham object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlThuocTinhSanPhamProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlThuocTinhSanPhamProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlThuocTinhSanPhamProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlQuanProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.Quan"/> entity.
            </summary>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlQuanProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.Quan"/> entity.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlQuanProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlQuanProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlQuanProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlQuanProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlQuanProviderBase.Delete(traveltips.DAO.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idQuan">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlQuanProviderBase.Find(traveltips.DAO.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of traveltips.Entities.Quan objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlQuanProviderBase.Find(traveltips.DAO.TransactionManager,traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of traveltips.Entities.Quan objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlQuanProviderBase.GetAll(traveltips.DAO.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.Quan objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlQuanProviderBase.GetPaged(traveltips.DAO.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.Quan objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlQuanProviderBase.GetByIdThanhPho(traveltips.DAO.TransactionManager,System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_tbl_Quan_tbl_ThanhPho key.
            	FK_tbl_Quan_tbl_ThanhPho Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="idThanhPho"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.Quan objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlQuanProviderBase.GetByIdQuan(traveltips.DAO.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tbl_Quan index.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="idQuan"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.Quan"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlQuanProviderBase.BulkInsert(traveltips.DAO.TransactionManager,traveltips.Entities.TList{traveltips.Entities.Quan})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.Quan object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlQuanProviderBase.Insert(traveltips.DAO.TransactionManager,traveltips.Entities.Quan)">
            <summary>
            	Inserts a traveltips.Entities.Quan object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.Quan object to insert.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.Quan object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlQuanProviderBase.Update(traveltips.DAO.TransactionManager,traveltips.Entities.Quan)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.Quan object to update.</param>
            <remarks>
            	After updating the datasource, the traveltips.Entities.Quan object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlQuanProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlQuanProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlQuanProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlQuanProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlQuanProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlLabelNnProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.LabelNn"/> entity.
            </summary>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlLabelNnProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.LabelNn"/> entity.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLabelNnProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlLabelNnProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLabelNnProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlLabelNnProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLabelNnProviderBase.Delete(traveltips.DAO.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idLabel">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLabelNnProviderBase.Find(traveltips.DAO.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of traveltips.Entities.LabelNn objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLabelNnProviderBase.Find(traveltips.DAO.TransactionManager,traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of traveltips.Entities.LabelNn objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLabelNnProviderBase.GetAll(traveltips.DAO.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.LabelNn objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLabelNnProviderBase.GetPaged(traveltips.DAO.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.LabelNn objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLabelNnProviderBase.GetByIdLabel(traveltips.DAO.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tbl_Label index.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="idLabel"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.LabelNn"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLabelNnProviderBase.BulkInsert(traveltips.DAO.TransactionManager,traveltips.Entities.TList{traveltips.Entities.LabelNn})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.LabelNn object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLabelNnProviderBase.Insert(traveltips.DAO.TransactionManager,traveltips.Entities.LabelNn)">
            <summary>
            	Inserts a traveltips.Entities.LabelNn object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.LabelNn object to insert.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.LabelNn object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLabelNnProviderBase.Update(traveltips.DAO.TransactionManager,traveltips.Entities.LabelNn)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.LabelNn object to update.</param>
            <remarks>
            	After updating the datasource, the traveltips.Entities.LabelNn object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlLabelNnProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlLabelNnProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlLabelNnProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLabelNnProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlLabelNnProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlGalleryProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.Gallery"/> entity.
            </summary>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlGalleryProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.Gallery"/> entity.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlGalleryProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlGalleryProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlGalleryProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlGalleryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlGalleryProviderBase.Delete(traveltips.DAO.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idGallery">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlGalleryProviderBase.Find(traveltips.DAO.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of traveltips.Entities.Gallery objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlGalleryProviderBase.Find(traveltips.DAO.TransactionManager,traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of traveltips.Entities.Gallery objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlGalleryProviderBase.GetAll(traveltips.DAO.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.Gallery objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlGalleryProviderBase.GetPaged(traveltips.DAO.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.Gallery objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlGalleryProviderBase.GetByIdCongTy(traveltips.DAO.TransactionManager,System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_tbl_Gallery_tbl_CongTy key.
            	FK_tbl_Gallery_tbl_CongTy Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="idCongTy"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.Gallery objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlGalleryProviderBase.GetByIdGallery(traveltips.DAO.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tbl_Gallery index.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="idGallery"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.Gallery"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlGalleryProviderBase.BulkInsert(traveltips.DAO.TransactionManager,traveltips.Entities.TList{traveltips.Entities.Gallery})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.Gallery object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlGalleryProviderBase.Insert(traveltips.DAO.TransactionManager,traveltips.Entities.Gallery)">
            <summary>
            	Inserts a traveltips.Entities.Gallery object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.Gallery object to insert.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.Gallery object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlGalleryProviderBase.Update(traveltips.DAO.TransactionManager,traveltips.Entities.Gallery)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.Gallery object to update.</param>
            <remarks>
            	After updating the datasource, the traveltips.Entities.Gallery object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlGalleryProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlGalleryProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlGalleryProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlGalleryProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlGalleryProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlThuocTinhSanPhamProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.ThuocTinhSanPham"/> entity.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThuocTinhSanPhamProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlThuocTinhSanPhamProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlLanguageProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.Language"/> entity.
            </summary>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlLanguageProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.Language"/> entity.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLanguageProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlLanguageProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLanguageProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlLanguageProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLanguageProviderBase.Delete(traveltips.DAO.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idLanguage">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLanguageProviderBase.Find(traveltips.DAO.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of traveltips.Entities.Language objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLanguageProviderBase.Find(traveltips.DAO.TransactionManager,traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of traveltips.Entities.Language objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLanguageProviderBase.GetAll(traveltips.DAO.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.Language objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLanguageProviderBase.GetPaged(traveltips.DAO.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.Language objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLanguageProviderBase.GetByIdLanguage(traveltips.DAO.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tbl_Language index.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="idLanguage"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.Language"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLanguageProviderBase.BulkInsert(traveltips.DAO.TransactionManager,traveltips.Entities.TList{traveltips.Entities.Language})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.Language object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLanguageProviderBase.Insert(traveltips.DAO.TransactionManager,traveltips.Entities.Language)">
            <summary>
            	Inserts a traveltips.Entities.Language object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.Language object to insert.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.Language object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLanguageProviderBase.Update(traveltips.DAO.TransactionManager,traveltips.Entities.Language)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.Language object to update.</param>
            <remarks>
            	After updating the datasource, the traveltips.Entities.Language object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlLanguageProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlLanguageProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlLanguageProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLanguageProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlLanguageProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlDanhMucProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.DanhMuc"/> entity.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDanhMucProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlDanhMucProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDanhMucProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlDanhMucProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDanhMucProviderBase.Delete(traveltips.DAO.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idDanhMuc">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDanhMucProviderBase.Find(traveltips.DAO.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of traveltips.Entities.DanhMuc objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDanhMucProviderBase.Find(traveltips.DAO.TransactionManager,traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of traveltips.Entities.DanhMuc objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDanhMucProviderBase.GetAll(traveltips.DAO.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.DanhMuc objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDanhMucProviderBase.GetPaged(traveltips.DAO.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.DanhMuc objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDanhMucProviderBase.GetByIdDanhMuc(traveltips.DAO.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tbl_DanhMuc index.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="idDanhMuc"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.DanhMuc"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDanhMucProviderBase.BulkInsert(traveltips.DAO.TransactionManager,traveltips.Entities.TList{traveltips.Entities.DanhMuc})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.DanhMuc object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDanhMucProviderBase.Insert(traveltips.DAO.TransactionManager,traveltips.Entities.DanhMuc)">
            <summary>
            	Inserts a traveltips.Entities.DanhMuc object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.DanhMuc object to insert.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.DanhMuc object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDanhMucProviderBase.Update(traveltips.DAO.TransactionManager,traveltips.Entities.DanhMuc)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.DanhMuc object to update.</param>
            <remarks>
            	After updating the datasource, the traveltips.Entities.DanhMuc object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlDanhMucProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlDanhMucProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlDanhMucProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlDanhMucProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.DanhMuc"/> entity.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDanhMucProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlDanhMucProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlUserProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.User"/> entity.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlUserProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlUserProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlUserProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlUserProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlUserProviderBase.Delete(traveltips.DAO.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idUser">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlUserProviderBase.Find(traveltips.DAO.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of traveltips.Entities.User objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlUserProviderBase.Find(traveltips.DAO.TransactionManager,traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of traveltips.Entities.User objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlUserProviderBase.GetAll(traveltips.DAO.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.User objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlUserProviderBase.GetPaged(traveltips.DAO.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.User objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlUserProviderBase.GetByIdUser(traveltips.DAO.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tbl_User index.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="idUser"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.User"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlUserProviderBase.BulkInsert(traveltips.DAO.TransactionManager,traveltips.Entities.TList{traveltips.Entities.User})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.User object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlUserProviderBase.Insert(traveltips.DAO.TransactionManager,traveltips.Entities.User)">
            <summary>
            	Inserts a traveltips.Entities.User object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.User object to insert.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.User object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlUserProviderBase.Update(traveltips.DAO.TransactionManager,traveltips.Entities.User)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.User object to update.</param>
            <remarks>
            	After updating the datasource, the traveltips.Entities.User object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlUserProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlUserProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlUserProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlSanPhamProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.SanPham"/> entity.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlSanPhamProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlSanPhamProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlSanPhamProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlSanPhamProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlSanPhamProviderBase.Delete(traveltips.DAO.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idSanPham">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlSanPhamProviderBase.Find(traveltips.DAO.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of traveltips.Entities.SanPham objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlSanPhamProviderBase.Find(traveltips.DAO.TransactionManager,traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of traveltips.Entities.SanPham objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlSanPhamProviderBase.GetAll(traveltips.DAO.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.SanPham objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlSanPhamProviderBase.GetPaged(traveltips.DAO.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.SanPham objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlSanPhamProviderBase.GetByIdLoaiSp(traveltips.DAO.TransactionManager,System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_tbl_SanPham_tbl_LoaiSP key.
            	FK_tbl_SanPham_tbl_LoaiSP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="idLoaiSp"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.SanPham objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlSanPhamProviderBase.GetByIdSanPham(traveltips.DAO.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tbl_SanPham index.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="idSanPham"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.SanPham"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlSanPhamProviderBase.BulkInsert(traveltips.DAO.TransactionManager,traveltips.Entities.TList{traveltips.Entities.SanPham})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.SanPham object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlSanPhamProviderBase.Insert(traveltips.DAO.TransactionManager,traveltips.Entities.SanPham)">
            <summary>
            	Inserts a traveltips.Entities.SanPham object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.SanPham object to insert.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.SanPham object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlSanPhamProviderBase.Update(traveltips.DAO.TransactionManager,traveltips.Entities.SanPham)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.SanPham object to update.</param>
            <remarks>
            	After updating the datasource, the traveltips.Entities.SanPham object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlSanPhamProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlSanPhamProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlSanPhamProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlDuongProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.Duong"/> entity.
            </summary>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlDuongProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.Duong"/> entity.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDuongProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlDuongProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDuongProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlDuongProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDuongProviderBase.Delete(traveltips.DAO.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idDuong">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDuongProviderBase.Find(traveltips.DAO.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of traveltips.Entities.Duong objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDuongProviderBase.Find(traveltips.DAO.TransactionManager,traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of traveltips.Entities.Duong objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDuongProviderBase.GetAll(traveltips.DAO.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.Duong objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDuongProviderBase.GetPaged(traveltips.DAO.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.Duong objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDuongProviderBase.GetByIdQuan(traveltips.DAO.TransactionManager,System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_tbl_Duong_tbl_Quan key.
            	FK_tbl_Duong_tbl_Quan Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="idQuan"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.Duong objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDuongProviderBase.GetByIdDuong(traveltips.DAO.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tbl_Duong index.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="idDuong"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.Duong"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDuongProviderBase.BulkInsert(traveltips.DAO.TransactionManager,traveltips.Entities.TList{traveltips.Entities.Duong})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.Duong object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDuongProviderBase.Insert(traveltips.DAO.TransactionManager,traveltips.Entities.Duong)">
            <summary>
            	Inserts a traveltips.Entities.Duong object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.Duong object to insert.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.Duong object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDuongProviderBase.Update(traveltips.DAO.TransactionManager,traveltips.Entities.Duong)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.Duong object to update.</param>
            <remarks>
            	After updating the datasource, the traveltips.Entities.Duong object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlDuongProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlDuongProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlDuongProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDuongProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlDuongProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlDichVuProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.DichVu"/> entity.
            </summary>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlDichVuProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.DichVu"/> entity.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDichVuProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlDichVuProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDichVuProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlDichVuProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDichVuProviderBase.Delete(traveltips.DAO.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idDichVu">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDichVuProviderBase.Find(traveltips.DAO.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of traveltips.Entities.DichVu objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDichVuProviderBase.Find(traveltips.DAO.TransactionManager,traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of traveltips.Entities.DichVu objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDichVuProviderBase.GetAll(traveltips.DAO.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.DichVu objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDichVuProviderBase.GetPaged(traveltips.DAO.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.DichVu objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDichVuProviderBase.GetByIdDichVu(traveltips.DAO.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tbl_DichVu index.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="idDichVu"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.DichVu"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDichVuProviderBase.BulkInsert(traveltips.DAO.TransactionManager,traveltips.Entities.TList{traveltips.Entities.DichVu})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.DichVu object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDichVuProviderBase.Insert(traveltips.DAO.TransactionManager,traveltips.Entities.DichVu)">
            <summary>
            	Inserts a traveltips.Entities.DichVu object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.DichVu object to insert.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.DichVu object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDichVuProviderBase.Update(traveltips.DAO.TransactionManager,traveltips.Entities.DichVu)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.DichVu object to update.</param>
            <remarks>
            	After updating the datasource, the traveltips.Entities.DichVu object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlDichVuProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlDichVuProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlDichVuProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlDichVuProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlDichVuProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlCommentProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.Comment"/> entity.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlCommentProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlCommentProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlCommentProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlCommentProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlCommentProviderBase.Delete(traveltips.DAO.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idComment">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlCommentProviderBase.Find(traveltips.DAO.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of traveltips.Entities.Comment objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlCommentProviderBase.Find(traveltips.DAO.TransactionManager,traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of traveltips.Entities.Comment objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlCommentProviderBase.GetAll(traveltips.DAO.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.Comment objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlCommentProviderBase.GetPaged(traveltips.DAO.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.Comment objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlCommentProviderBase.GetByIdCongty(traveltips.DAO.TransactionManager,System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_tbl_Comment_tbl_CongTy key.
            	FK_tbl_Comment_tbl_CongTy Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="idCongty"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.Comment objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlCommentProviderBase.GetByIdUser(traveltips.DAO.TransactionManager,System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_tbl_Comment_tbl_User key.
            	FK_tbl_Comment_tbl_User Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="idUser"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.Comment objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlCommentProviderBase.GetByIdComment(traveltips.DAO.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tbl_Feedback index.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="idComment"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.Comment"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlCommentProviderBase.BulkInsert(traveltips.DAO.TransactionManager,traveltips.Entities.TList{traveltips.Entities.Comment})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.Comment object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlCommentProviderBase.Insert(traveltips.DAO.TransactionManager,traveltips.Entities.Comment)">
            <summary>
            	Inserts a traveltips.Entities.Comment object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.Comment object to insert.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.Comment object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlCommentProviderBase.Update(traveltips.DAO.TransactionManager,traveltips.Entities.Comment)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.Comment object to update.</param>
            <remarks>
            	After updating the datasource, the traveltips.Entities.Comment object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlCommentProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlCommentProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlCommentProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlUserProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.User"/> entity.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlUserProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlUserProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlThanhPhoProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.ThanhPho"/> entity.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThanhPhoProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlThanhPhoProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThanhPhoProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlThanhPhoProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThanhPhoProviderBase.Delete(traveltips.DAO.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idThanhPho">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThanhPhoProviderBase.Find(traveltips.DAO.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of traveltips.Entities.ThanhPho objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThanhPhoProviderBase.Find(traveltips.DAO.TransactionManager,traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of traveltips.Entities.ThanhPho objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThanhPhoProviderBase.GetAll(traveltips.DAO.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.ThanhPho objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThanhPhoProviderBase.GetPaged(traveltips.DAO.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.ThanhPho objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThanhPhoProviderBase.GetByIdQuocGia(traveltips.DAO.TransactionManager,System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_tbl_ThanhPho_tbl_QuocGia key.
            	FK_tbl_ThanhPho_tbl_QuocGia Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="idQuocGia"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.ThanhPho objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThanhPhoProviderBase.GetByIdThanhPho(traveltips.DAO.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tbl_ThanhPho index.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="idThanhPho"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.ThanhPho"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThanhPhoProviderBase.BulkInsert(traveltips.DAO.TransactionManager,traveltips.Entities.TList{traveltips.Entities.ThanhPho})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.ThanhPho object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThanhPhoProviderBase.Insert(traveltips.DAO.TransactionManager,traveltips.Entities.ThanhPho)">
            <summary>
            	Inserts a traveltips.Entities.ThanhPho object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.ThanhPho object to insert.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.ThanhPho object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThanhPhoProviderBase.Update(traveltips.DAO.TransactionManager,traveltips.Entities.ThanhPho)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.ThanhPho object to update.</param>
            <remarks>
            	After updating the datasource, the traveltips.Entities.ThanhPho object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlThanhPhoProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlThanhPhoProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlThanhPhoProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlLoaiSpProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.LoaiSp"/> entity.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLoaiSpProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlLoaiSpProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLoaiSpProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlLoaiSpProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLoaiSpProviderBase.Delete(traveltips.DAO.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idLoaiSp">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLoaiSpProviderBase.Find(traveltips.DAO.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of traveltips.Entities.LoaiSp objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLoaiSpProviderBase.Find(traveltips.DAO.TransactionManager,traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of traveltips.Entities.LoaiSp objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLoaiSpProviderBase.GetAll(traveltips.DAO.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.LoaiSp objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLoaiSpProviderBase.GetPaged(traveltips.DAO.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.LoaiSp objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLoaiSpProviderBase.GetByIdLoaiSp(traveltips.DAO.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tbl_LoaiSP index.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="idLoaiSp"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.LoaiSp"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLoaiSpProviderBase.BulkInsert(traveltips.DAO.TransactionManager,traveltips.Entities.TList{traveltips.Entities.LoaiSp})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.LoaiSp object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLoaiSpProviderBase.Insert(traveltips.DAO.TransactionManager,traveltips.Entities.LoaiSp)">
            <summary>
            	Inserts a traveltips.Entities.LoaiSp object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.LoaiSp object to insert.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.LoaiSp object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLoaiSpProviderBase.Update(traveltips.DAO.TransactionManager,traveltips.Entities.LoaiSp)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.LoaiSp object to update.</param>
            <remarks>
            	After updating the datasource, the traveltips.Entities.LoaiSp object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlLoaiSpProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlLoaiSpProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlLoaiSpProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlAdminProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.Admin"/> entity.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlAdminProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlAdminProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlTinTucProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.TinTuc"/> entity.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlTinTucProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlTinTucProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlTinTucProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlTinTucProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlTinTucProviderBase.Delete(traveltips.DAO.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idTinTuc">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlTinTucProviderBase.Find(traveltips.DAO.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of traveltips.Entities.TinTuc objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlTinTucProviderBase.Find(traveltips.DAO.TransactionManager,traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of traveltips.Entities.TinTuc objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlTinTucProviderBase.GetAll(traveltips.DAO.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.TinTuc objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlTinTucProviderBase.GetPaged(traveltips.DAO.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.TinTuc objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlTinTucProviderBase.GetByIdCongTy(traveltips.DAO.TransactionManager,System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_tbl_TinTuc_tbl_CongTy key.
            	FK_tbl_TinTuc_tbl_CongTy Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="idCongTy"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.TinTuc objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlTinTucProviderBase.GetByIdTinTuc(traveltips.DAO.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tbl_TinTuc index.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="idTinTuc"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.TinTuc"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlTinTucProviderBase.BulkInsert(traveltips.DAO.TransactionManager,traveltips.Entities.TList{traveltips.Entities.TinTuc})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.TinTuc object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlTinTucProviderBase.Insert(traveltips.DAO.TransactionManager,traveltips.Entities.TinTuc)">
            <summary>
            	Inserts a traveltips.Entities.TinTuc object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.TinTuc object to insert.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.TinTuc object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlTinTucProviderBase.Update(traveltips.DAO.TransactionManager,traveltips.Entities.TinTuc)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.TinTuc object to update.</param>
            <remarks>
            	After updating the datasource, the traveltips.Entities.TinTuc object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlTinTucProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlTinTucProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlTinTucProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlThanhPhoProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.ThanhPho"/> entity.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThanhPhoProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlThanhPhoProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlTinTucProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.TinTuc"/> entity.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlTinTucProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlTinTucProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:traveltips.DAO.SqlClient.StoredProcedureProvider">
            <summary>
            Summary description for Procedures.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.StoredProcedureProvider.#ctor">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.StoredProcedureProvider"/> instance.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.StoredProcedureProvider.Serialize(System.String)">
            <summary>
            Serializes the specified filename.
            </summary>
            <param name="filename">Filename.</param>
        </member>
        <member name="M:traveltips.DAO.SqlClient.StoredProcedureProvider.Deserialize">
            <summary>
            Deserializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.StoredProcedureProvider.GetProcedureBodyFromEmbeddedResource(System.String)">
            <summary>
            Get the query text from the embedded xml file.
            </summary>
            <param name="name">The name of the query.</param>
            <returns>the text of the query</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Boolean)">
            <summary>
            Get the command wrapper, either from the stored procedures or from the embedded queries.
            </summary>
            <param name="database">The database instance.</param>
            <param name="commandName">the name of the sp.</param>
            <param name="useStoredProcedure">Indicates if we want stored procedure.</param>
            <returns></returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Type,traveltips.DAO.SqlFilterParameterCollection,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the command wrapper for a dynamically generated query and
            optionally includes server-side paging.
            </summary>
            <param name="database"></param>
            <param name="commandName"></param>
            <param name="columnEnum"></param>
            <param name="parameters"></param>
            <param name="orderBy"></param>
            <param name="start"></param>
            <param name="pageLength"></param>
            <returns></returns>
        </member>
        <member name="P:traveltips.DAO.SqlClient.StoredProcedureProvider.Current">
            <summary>
            Gets the current <see cref="T:traveltips.DAO.SqlClient.StoredProcedureProvider"/> singleton instance.
            </summary>
            <value><see cref="T:traveltips.DAO.SqlClient.StoredProcedureProvider"/></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.StoredProcedureProvider.Procedures">
            <summary>
            Gets or sets the procedures.
            </summary>
            <value>An <see cref="T:System.Collections.ArrayList"/> of <see cref="T:traveltips.DAO.SqlClient.Procedure"/> objects.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.StoredProcedureProvider.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:traveltips.DAO.SqlClient.Procedure"/> instance with the specified name.
            </summary>
        </member>
        <member name="P:traveltips.DAO.SqlClient.StoredProcedureProvider.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:traveltips.DAO.SqlClient.Procedure"/> instance at the specified index.
            </summary>
        </member>
        <member name="T:traveltips.DAO.SqlClient.Procedure">
            <summary>
            Represents a sql query.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.Procedure.#ctor">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.Procedure"/> instance.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.Procedure.Parameter(System.String)">
            <summary>
            Get the parameter from the specified name of the param.
            </summary>
            <param name="paramName">Name of the param.</param>
            <returns></returns>
        </member>
        <member name="P:traveltips.DAO.SqlClient.Procedure.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.Procedure.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.Procedure.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.Procedure.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.Procedure.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value></value>
        </member>
        <member name="T:traveltips.DAO.SqlClient.Parameter">
            <summary>
            Respresents a query parameter.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.Parameter.#ctor">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.Parameter"/> instance.
            </summary>
        </member>
        <member name="P:traveltips.DAO.SqlClient.Parameter.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.Parameter.SqlType">
            <summary>
            Gets or sets the SqlType.
            </summary>
            <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.Parameter.Direction">
            <summary>
            Gets or sets the Direction.
            </summary>
            <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.Parameter.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.Parameter.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value></value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.Parameter.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value></value>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlTuDienProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.TuDien"/> entity.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlTuDienProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlTuDienProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlTuDienProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlTuDienProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlTuDienProviderBase.Delete(traveltips.DAO.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idTuDien">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlTuDienProviderBase.Find(traveltips.DAO.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of traveltips.Entities.TuDien objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlTuDienProviderBase.Find(traveltips.DAO.TransactionManager,traveltips.DAO.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:traveltips.DAO.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of traveltips.Entities.TuDien objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlTuDienProviderBase.GetAll(traveltips.DAO.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.TuDien objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlTuDienProviderBase.GetPaged(traveltips.DAO.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of traveltips.Entities.TuDien objects.</returns>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlTuDienProviderBase.GetByIdTuDien(traveltips.DAO.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tbl_TuDien index.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="idTuDien"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:traveltips.Entities.TuDien"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlTuDienProviderBase.BulkInsert(traveltips.DAO.TransactionManager,traveltips.Entities.TList{traveltips.Entities.TuDien})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.TuDien object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlTuDienProviderBase.Insert(traveltips.DAO.TransactionManager,traveltips.Entities.TuDien)">
            <summary>
            	Inserts a traveltips.Entities.TuDien object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.TuDien object to insert.</param>
            <remarks>
            	After inserting into the datasource, the traveltips.Entities.TuDien object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlTuDienProviderBase.Update(traveltips.DAO.TransactionManager,traveltips.Entities.TuDien)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:traveltips.DAO.TransactionManager"/> object</param>
            <param name="entity">traveltips.Entities.TuDien object to update.</param>
            <remarks>
            	After updating the datasource, the traveltips.Entities.TuDien object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlTuDienProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlTuDienProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:traveltips.DAO.SqlClient.SqlTuDienProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlTuDienProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.TuDien"/> entity.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlTuDienProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlTuDienProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlThuocTinhProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.ThuocTinh"/> entity.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlThuocTinhProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlThuocTinhProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlLoaiSpProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.LoaiSp"/> entity.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlLoaiSpProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlLoaiSpProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlSanPhamProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.SanPham"/> entity.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlSanPhamProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlSanPhamProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:traveltips.DAO.SqlClient.SqlCommentProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:traveltips.Entities.Comment"/> entity.
            </summary>
        </member>
        <member name="M:traveltips.DAO.SqlClient.SqlCommentProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:traveltips.DAO.SqlClient.SqlCommentProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
    </members>
</doc>
