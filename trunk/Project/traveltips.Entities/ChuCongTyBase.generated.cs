
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file ChuCongTy.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace traveltips.Entities
{
	///<summary>
	/// An object representation of the 'tbl_ChuCongTy' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class ChuCongTyBase : EntityBase, traveltips.Entities.IChuCongTy, IEntityId<ChuCongTyKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ChuCongTyEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ChuCongTyEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ChuCongTyEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<ChuCongTy> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event ChuCongTyEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ChuCongTyEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ChuCongTyBase"/> instance.
		///</summary>
		public ChuCongTyBase()
		{
			this.entityData = new ChuCongTyEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ChuCongTyBase"/> instance.
		///</summary>
		///<param name="tenChuCongTy"></param>
		///<param name="tenCongTy"></param>
		///<param name="tenDangNhap"></param>
		///<param name="password"></param>
		///<param name="diaChi"></param>
		///<param name="dienThoaiCd"></param>
		///<param name="dienThoaiDd"></param>
		///<param name="ngayTao"></param>
		///<param name="ngayKetThuc"></param>
		///<param name="flag"></param>
		public ChuCongTyBase(System.String tenChuCongTy, System.String tenCongTy, System.String tenDangNhap, 
			System.String password, System.String diaChi, System.String dienThoaiCd, System.String dienThoaiDd, 
			System.DateTime? ngayTao, System.DateTime? ngayKetThuc, System.Byte? flag)
		{
			this.entityData = new ChuCongTyEntityData();
			this.backupData = null;

			this.TenChuCongTy = tenChuCongTy;
			this.TenCongTy = tenCongTy;
			this.TenDangNhap = tenDangNhap;
			this.Password = password;
			this.DiaChi = diaChi;
			this.DienThoaiCd = dienThoaiCd;
			this.DienThoaiDd = dienThoaiDd;
			this.NgayTao = ngayTao;
			this.NgayKetThuc = ngayKetThuc;
			this.Flag = flag;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ChuCongTy"/> instance.
		///</summary>
		///<param name="tenChuCongTy"></param>
		///<param name="tenCongTy"></param>
		///<param name="tenDangNhap"></param>
		///<param name="password"></param>
		///<param name="diaChi"></param>
		///<param name="dienThoaiCd"></param>
		///<param name="dienThoaiDd"></param>
		///<param name="ngayTao"></param>
		///<param name="ngayKetThuc"></param>
		///<param name="flag"></param>
		public static ChuCongTy CreateChuCongTy(System.String tenChuCongTy, System.String tenCongTy, System.String tenDangNhap, 
			System.String password, System.String diaChi, System.String dienThoaiCd, System.String dienThoaiDd, 
			System.DateTime? ngayTao, System.DateTime? ngayKetThuc, System.Byte? flag)
		{
			ChuCongTy newChuCongTy = new ChuCongTy();
			newChuCongTy.TenChuCongTy = tenChuCongTy;
			newChuCongTy.TenCongTy = tenCongTy;
			newChuCongTy.TenDangNhap = tenDangNhap;
			newChuCongTy.Password = password;
			newChuCongTy.DiaChi = diaChi;
			newChuCongTy.DienThoaiCd = dienThoaiCd;
			newChuCongTy.DienThoaiDd = dienThoaiDd;
			newChuCongTy.NgayTao = ngayTao;
			newChuCongTy.NgayKetThuc = ngayKetThuc;
			newChuCongTy.Flag = flag;
			return newChuCongTy;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the IdChuCongTy property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int64 IdChuCongTy
		{
			get
			{
				return this.entityData.IdChuCongTy; 
			}
			
			set
			{
				if (this.entityData.IdChuCongTy == value)
					return;
					
				OnColumnChanging(ChuCongTyColumn.IdChuCongTy, this.entityData.IdChuCongTy);
				this.entityData.IdChuCongTy = value;
				this.EntityId.IdChuCongTy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChuCongTyColumn.IdChuCongTy, this.entityData.IdChuCongTy);
				OnPropertyChanged("IdChuCongTy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TenChuCongTy property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String TenChuCongTy
		{
			get
			{
				return this.entityData.TenChuCongTy; 
			}
			
			set
			{
				if (this.entityData.TenChuCongTy == value)
					return;
					
				OnColumnChanging(ChuCongTyColumn.TenChuCongTy, this.entityData.TenChuCongTy);
				this.entityData.TenChuCongTy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChuCongTyColumn.TenChuCongTy, this.entityData.TenChuCongTy);
				OnPropertyChanged("TenChuCongTy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TenCongTy property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String TenCongTy
		{
			get
			{
				return this.entityData.TenCongTy; 
			}
			
			set
			{
				if (this.entityData.TenCongTy == value)
					return;
					
				OnColumnChanging(ChuCongTyColumn.TenCongTy, this.entityData.TenCongTy);
				this.entityData.TenCongTy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChuCongTyColumn.TenCongTy, this.entityData.TenCongTy);
				OnPropertyChanged("TenCongTy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TenDangNhap property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String TenDangNhap
		{
			get
			{
				return this.entityData.TenDangNhap; 
			}
			
			set
			{
				if (this.entityData.TenDangNhap == value)
					return;
					
				OnColumnChanging(ChuCongTyColumn.TenDangNhap, this.entityData.TenDangNhap);
				this.entityData.TenDangNhap = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChuCongTyColumn.TenDangNhap, this.entityData.TenDangNhap);
				OnPropertyChanged("TenDangNhap");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Password property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Password
		{
			get
			{
				return this.entityData.Password; 
			}
			
			set
			{
				if (this.entityData.Password == value)
					return;
					
				OnColumnChanging(ChuCongTyColumn.Password, this.entityData.Password);
				this.entityData.Password = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChuCongTyColumn.Password, this.entityData.Password);
				OnPropertyChanged("Password");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DiaChi property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String DiaChi
		{
			get
			{
				return this.entityData.DiaChi; 
			}
			
			set
			{
				if (this.entityData.DiaChi == value)
					return;
					
				OnColumnChanging(ChuCongTyColumn.DiaChi, this.entityData.DiaChi);
				this.entityData.DiaChi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChuCongTyColumn.DiaChi, this.entityData.DiaChi);
				OnPropertyChanged("DiaChi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DienThoaiCd property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String DienThoaiCd
		{
			get
			{
				return this.entityData.DienThoaiCd; 
			}
			
			set
			{
				if (this.entityData.DienThoaiCd == value)
					return;
					
				OnColumnChanging(ChuCongTyColumn.DienThoaiCd, this.entityData.DienThoaiCd);
				this.entityData.DienThoaiCd = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChuCongTyColumn.DienThoaiCd, this.entityData.DienThoaiCd);
				OnPropertyChanged("DienThoaiCd");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DienThoaiDd property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String DienThoaiDd
		{
			get
			{
				return this.entityData.DienThoaiDd; 
			}
			
			set
			{
				if (this.entityData.DienThoaiDd == value)
					return;
					
				OnColumnChanging(ChuCongTyColumn.DienThoaiDd, this.entityData.DienThoaiDd);
				this.entityData.DienThoaiDd = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChuCongTyColumn.DienThoaiDd, this.entityData.DienThoaiDd);
				OnPropertyChanged("DienThoaiDd");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NgayTao property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsNgayTaoNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? NgayTao
		{
			get
			{
				return this.entityData.NgayTao; 
			}
			
			set
			{
				if (this.entityData.NgayTao == value)
					return;
					
				OnColumnChanging(ChuCongTyColumn.NgayTao, this.entityData.NgayTao);
				this.entityData.NgayTao = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChuCongTyColumn.NgayTao, this.entityData.NgayTao);
				OnPropertyChanged("NgayTao");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NgayKetThuc property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsNgayKetThucNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? NgayKetThuc
		{
			get
			{
				return this.entityData.NgayKetThuc; 
			}
			
			set
			{
				if (this.entityData.NgayKetThuc == value)
					return;
					
				OnColumnChanging(ChuCongTyColumn.NgayKetThuc, this.entityData.NgayKetThuc);
				this.entityData.NgayKetThuc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChuCongTyColumn.NgayKetThuc, this.entityData.NgayKetThuc);
				OnPropertyChanged("NgayKetThuc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Flag property. 
		///		
		/// </summary>
		/// <value>This type is tinyint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (byte)0. It is up to the developer
		/// to check the value of IsFlagNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public override System.Byte? Flag
		{
			get
			{
				return this.entityData.Flag; 
			}
			
			set
			{
				if (this.entityData.Flag == value)
					return;
					
				OnColumnChanging(ChuCongTyColumn.Flag, this.entityData.Flag);
				this.entityData.Flag = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChuCongTyColumn.Flag, this.entityData.Flag);
				OnPropertyChanged("Flag");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of CongTy objects
		///	which are related to this object through the relation FK_tbl_CongTy_tbl_ChuCongTy
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CongTy> CongTyCollection
		{
			get { return entityData.CongTyCollection; }
			set { entityData.CongTyCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("TenChuCongTy", "Ten Chu Cong Ty", 200));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("TenCongTy", "Ten Cong Ty", 200));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("TenDangNhap", "Ten Dang Nhap", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Password", "Password", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("DiaChi", "Dia Chi", 255));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("DienThoaiCd", "Dien Thoai Cd", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("DienThoaiDd", "Dien Thoai Dd", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "tbl_ChuCongTy"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"id_ChuCongTy", "TenChuCongTy", "TenCongTy", "TenDangNhap", "Password", "DiaChi", "DienThoaiCD", "DienThoaiDD", "NgayTao", "NgayKetThuc", "Flag"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ChuCongTyEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ChuCongTy) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ChuCongTy>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ChuCongTy);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ChuCongTy Entity 
		///</summary>
		public virtual ChuCongTy Copy()
		{
			//shallow copy entity
			ChuCongTy copy = new ChuCongTy();
			copy.SuppressEntityEvents = true;
			copy.IdChuCongTy = this.IdChuCongTy;
			copy.TenChuCongTy = this.TenChuCongTy;
			copy.TenCongTy = this.TenCongTy;
			copy.TenDangNhap = this.TenDangNhap;
			copy.Password = this.Password;
			copy.DiaChi = this.DiaChi;
			copy.DienThoaiCd = this.DienThoaiCd;
			copy.DienThoaiDd = this.DienThoaiDd;
			copy.NgayTao = this.NgayTao;
			copy.NgayKetThuc = this.NgayKetThuc;
			copy.Flag = this.Flag;
			
		
			//deep copy nested objects
			copy.CongTyCollection = (TList<CongTy>) MakeCopyOf(this.CongTyCollection); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed ChuCongTy Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ChuCongTy DeepCopy()
		{
			return EntityHelper.Clone<ChuCongTy>(this as ChuCongTy);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ChuCongTyEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ChuCongTyEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ChuCongTyColumn column)
		{
			switch(column)
			{
					case ChuCongTyColumn.IdChuCongTy:
					return entityData.IdChuCongTy != _originalData.IdChuCongTy;
					case ChuCongTyColumn.TenChuCongTy:
					return entityData.TenChuCongTy != _originalData.TenChuCongTy;
					case ChuCongTyColumn.TenCongTy:
					return entityData.TenCongTy != _originalData.TenCongTy;
					case ChuCongTyColumn.TenDangNhap:
					return entityData.TenDangNhap != _originalData.TenDangNhap;
					case ChuCongTyColumn.Password:
					return entityData.Password != _originalData.Password;
					case ChuCongTyColumn.DiaChi:
					return entityData.DiaChi != _originalData.DiaChi;
					case ChuCongTyColumn.DienThoaiCd:
					return entityData.DienThoaiCd != _originalData.DienThoaiCd;
					case ChuCongTyColumn.DienThoaiDd:
					return entityData.DienThoaiDd != _originalData.DienThoaiDd;
					case ChuCongTyColumn.NgayTao:
					return entityData.NgayTao != _originalData.NgayTao;
					case ChuCongTyColumn.NgayKetThuc:
					return entityData.NgayKetThuc != _originalData.NgayKetThuc;
					case ChuCongTyColumn.Flag:
					return entityData.Flag != _originalData.Flag;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.IdChuCongTy != _originalData.IdChuCongTy;
			result = result || entityData.TenChuCongTy != _originalData.TenChuCongTy;
			result = result || entityData.TenCongTy != _originalData.TenCongTy;
			result = result || entityData.TenDangNhap != _originalData.TenDangNhap;
			result = result || entityData.Password != _originalData.Password;
			result = result || entityData.DiaChi != _originalData.DiaChi;
			result = result || entityData.DienThoaiCd != _originalData.DienThoaiCd;
			result = result || entityData.DienThoaiDd != _originalData.DienThoaiDd;
			result = result || entityData.NgayTao != _originalData.NgayTao;
			result = result || entityData.NgayKetThuc != _originalData.NgayKetThuc;
			result = result || entityData.Flag != _originalData.Flag;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ChuCongTyBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is ChuCongTyBase)
				return Equals(this, (ChuCongTyBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ChuCongTyBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.IdChuCongTy.GetHashCode() ^ 
					((this.TenChuCongTy == null) ? string.Empty : this.TenChuCongTy.ToString()).GetHashCode() ^ 
					((this.TenCongTy == null) ? string.Empty : this.TenCongTy.ToString()).GetHashCode() ^ 
					((this.TenDangNhap == null) ? string.Empty : this.TenDangNhap.ToString()).GetHashCode() ^ 
					((this.Password == null) ? string.Empty : this.Password.ToString()).GetHashCode() ^ 
					((this.DiaChi == null) ? string.Empty : this.DiaChi.ToString()).GetHashCode() ^ 
					((this.DienThoaiCd == null) ? string.Empty : this.DienThoaiCd.ToString()).GetHashCode() ^ 
					((this.DienThoaiDd == null) ? string.Empty : this.DienThoaiDd.ToString()).GetHashCode() ^ 
					((this.NgayTao == null) ? string.Empty : this.NgayTao.ToString()).GetHashCode() ^ 
					((this.NgayKetThuc == null) ? string.Empty : this.NgayKetThuc.ToString()).GetHashCode() ^ 
					((this.Flag == null) ? string.Empty : this.Flag.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ChuCongTyBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ChuCongTyBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ChuCongTyBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ChuCongTyBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ChuCongTyBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ChuCongTyBase Object1, ChuCongTyBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.IdChuCongTy != Object2.IdChuCongTy)
				equal = false;
			if ( Object1.TenChuCongTy != null && Object2.TenChuCongTy != null )
			{
				if (Object1.TenChuCongTy != Object2.TenChuCongTy)
					equal = false;
			}
			else if (Object1.TenChuCongTy == null ^ Object2.TenChuCongTy == null )
			{
				equal = false;
			}
			if ( Object1.TenCongTy != null && Object2.TenCongTy != null )
			{
				if (Object1.TenCongTy != Object2.TenCongTy)
					equal = false;
			}
			else if (Object1.TenCongTy == null ^ Object2.TenCongTy == null )
			{
				equal = false;
			}
			if ( Object1.TenDangNhap != null && Object2.TenDangNhap != null )
			{
				if (Object1.TenDangNhap != Object2.TenDangNhap)
					equal = false;
			}
			else if (Object1.TenDangNhap == null ^ Object2.TenDangNhap == null )
			{
				equal = false;
			}
			if ( Object1.Password != null && Object2.Password != null )
			{
				if (Object1.Password != Object2.Password)
					equal = false;
			}
			else if (Object1.Password == null ^ Object2.Password == null )
			{
				equal = false;
			}
			if ( Object1.DiaChi != null && Object2.DiaChi != null )
			{
				if (Object1.DiaChi != Object2.DiaChi)
					equal = false;
			}
			else if (Object1.DiaChi == null ^ Object2.DiaChi == null )
			{
				equal = false;
			}
			if ( Object1.DienThoaiCd != null && Object2.DienThoaiCd != null )
			{
				if (Object1.DienThoaiCd != Object2.DienThoaiCd)
					equal = false;
			}
			else if (Object1.DienThoaiCd == null ^ Object2.DienThoaiCd == null )
			{
				equal = false;
			}
			if ( Object1.DienThoaiDd != null && Object2.DienThoaiDd != null )
			{
				if (Object1.DienThoaiDd != Object2.DienThoaiDd)
					equal = false;
			}
			else if (Object1.DienThoaiDd == null ^ Object2.DienThoaiDd == null )
			{
				equal = false;
			}
			if ( Object1.NgayTao != null && Object2.NgayTao != null )
			{
				if (Object1.NgayTao != Object2.NgayTao)
					equal = false;
			}
			else if (Object1.NgayTao == null ^ Object2.NgayTao == null )
			{
				equal = false;
			}
			if ( Object1.NgayKetThuc != null && Object2.NgayKetThuc != null )
			{
				if (Object1.NgayKetThuc != Object2.NgayKetThuc)
					equal = false;
			}
			else if (Object1.NgayKetThuc == null ^ Object2.NgayKetThuc == null )
			{
				equal = false;
			}
			if ( Object1.Flag != null && Object2.Flag != null )
			{
				if (Object1.Flag != Object2.Flag)
					equal = false;
			}
			else if (Object1.Flag == null ^ Object2.Flag == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ChuCongTyBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ChuCongTyComparer GetComparer()
        {
            return new ChuCongTyComparer();
        }
        */

        // Comparer delegates back to ChuCongTy
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ChuCongTy rhs, ChuCongTyColumn which)
        {
            switch (which)
            {
            	
            	
            	case ChuCongTyColumn.IdChuCongTy:
            		return this.IdChuCongTy.CompareTo(rhs.IdChuCongTy);
            		
            		                 
            	
            	
            	case ChuCongTyColumn.TenChuCongTy:
            		return this.TenChuCongTy.CompareTo(rhs.TenChuCongTy);
            		
            		                 
            	
            	
            	case ChuCongTyColumn.TenCongTy:
            		return this.TenCongTy.CompareTo(rhs.TenCongTy);
            		
            		                 
            	
            	
            	case ChuCongTyColumn.TenDangNhap:
            		return this.TenDangNhap.CompareTo(rhs.TenDangNhap);
            		
            		                 
            	
            	
            	case ChuCongTyColumn.Password:
            		return this.Password.CompareTo(rhs.Password);
            		
            		                 
            	
            	
            	case ChuCongTyColumn.DiaChi:
            		return this.DiaChi.CompareTo(rhs.DiaChi);
            		
            		                 
            	
            	
            	case ChuCongTyColumn.DienThoaiCd:
            		return this.DienThoaiCd.CompareTo(rhs.DienThoaiCd);
            		
            		                 
            	
            	
            	case ChuCongTyColumn.DienThoaiDd:
            		return this.DienThoaiDd.CompareTo(rhs.DienThoaiDd);
            		
            		                 
            	
            	
            	case ChuCongTyColumn.NgayTao:
            		return this.NgayTao.Value.CompareTo(rhs.NgayTao.Value);
            		
            		                 
            	
            	
            	case ChuCongTyColumn.NgayKetThuc:
            		return this.NgayKetThuc.Value.CompareTo(rhs.NgayKetThuc.Value);
            		
            		                 
            	
            	
            	case ChuCongTyColumn.Flag:
            		return this.Flag.Value.CompareTo(rhs.Flag.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ChuCongTyKey> Members
		
		// member variable for the EntityId property
		private ChuCongTyKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ChuCongTyKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ChuCongTyKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ChuCongTy")
					.Append("|").Append( this.IdChuCongTy.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{12}{11}- IdChuCongTy: {0}{11}- TenChuCongTy: {1}{11}- TenCongTy: {2}{11}- TenDangNhap: {3}{11}- Password: {4}{11}- DiaChi: {5}{11}- DienThoaiCd: {6}{11}- DienThoaiDd: {7}{11}- NgayTao: {8}{11}- NgayKetThuc: {9}{11}- Flag: {10}{11}", 
				this.IdChuCongTy,
				(this.TenChuCongTy == null) ? string.Empty : this.TenChuCongTy.ToString(),
				(this.TenCongTy == null) ? string.Empty : this.TenCongTy.ToString(),
				(this.TenDangNhap == null) ? string.Empty : this.TenDangNhap.ToString(),
				(this.Password == null) ? string.Empty : this.Password.ToString(),
				(this.DiaChi == null) ? string.Empty : this.DiaChi.ToString(),
				(this.DienThoaiCd == null) ? string.Empty : this.DienThoaiCd.ToString(),
				(this.DienThoaiDd == null) ? string.Empty : this.DienThoaiDd.ToString(),
				(this.NgayTao == null) ? string.Empty : this.NgayTao.ToString(),
				(this.NgayKetThuc == null) ? string.Empty : this.NgayKetThuc.ToString(),
				(this.Flag == null) ? string.Empty : this.Flag.ToString(),
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'tbl_ChuCongTy' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ChuCongTyEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// id_ChuCongTy : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "tbl_ChuCongTy"</remarks>
			public System.Int64 IdChuCongTy;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// TenChuCongTy : 
		/// </summary>
		public System.String		  TenChuCongTy = null;
		
		/// <summary>
		/// TenCongTy : 
		/// </summary>
		public System.String		  TenCongTy = null;
		
		/// <summary>
		/// TenDangNhap : 
		/// </summary>
		public System.String		  TenDangNhap = null;
		
		/// <summary>
		/// Password : 
		/// </summary>
		public System.String		  Password = null;
		
		/// <summary>
		/// DiaChi : 
		/// </summary>
		public System.String		  DiaChi = null;
		
		/// <summary>
		/// DienThoaiCD : 
		/// </summary>
		public System.String		  DienThoaiCd = null;
		
		/// <summary>
		/// DienThoaiDD : 
		/// </summary>
		public System.String		  DienThoaiDd = null;
		
		/// <summary>
		/// NgayTao : 
		/// </summary>
		public System.DateTime?		  NgayTao = null;
		
		/// <summary>
		/// NgayKetThuc : 
		/// </summary>
		public System.DateTime?		  NgayKetThuc = null;
		
		/// <summary>
		/// Flag : 
		/// </summary>
		public System.Byte?		  Flag = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region CongTyCollection
		
		private TList<CongTy> congTyIdChuCongTy;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation congTyIdChuCongTy
		/// </summary>	
		public TList<CongTy> CongTyCollection
		{
			get
			{
				if (congTyIdChuCongTy == null)
				{
				congTyIdChuCongTy = new TList<CongTy>();
				}
	
				return congTyIdChuCongTy;
			}
			set { congTyIdChuCongTy = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ChuCongTyEntityData _tmp = new ChuCongTyEntityData();
						
			_tmp.IdChuCongTy = this.IdChuCongTy;
			
			_tmp.TenChuCongTy = this.TenChuCongTy;
			_tmp.TenCongTy = this.TenCongTy;
			_tmp.TenDangNhap = this.TenDangNhap;
			_tmp.Password = this.Password;
			_tmp.DiaChi = this.DiaChi;
			_tmp.DienThoaiCd = this.DienThoaiCd;
			_tmp.DienThoaiDd = this.DienThoaiDd;
			_tmp.NgayTao = this.NgayTao;
			_tmp.NgayKetThuc = this.NgayKetThuc;
			_tmp.Flag = this.Flag;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this.congTyIdChuCongTy != null)
				_tmp.CongTyCollection = (TList<CongTy>) MakeCopyOf(this.CongTyCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ChuCongTyColumn"/> which has raised the event.</param>
		public void OnColumnChanging(ChuCongTyColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ChuCongTyColumn"/> which has raised the event.</param>
		public void OnColumnChanged(ChuCongTyColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ChuCongTyColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(ChuCongTyColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				ChuCongTyEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ChuCongTyEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ChuCongTyColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(ChuCongTyColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ChuCongTyEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ChuCongTyEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ChuCongTyEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ChuCongTy"/> object.
	/// </remarks>
	public class ChuCongTyEventArgs : System.EventArgs
	{
		private ChuCongTyColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ChuCongTyEventArgs class.
		///</summary>
		public ChuCongTyEventArgs(ChuCongTyColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ChuCongTyEventArgs class.
		///</summary>
		public ChuCongTyEventArgs(ChuCongTyColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ChuCongTyColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ChuCongTyColumn" />
		public ChuCongTyColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ChuCongTy related events.
	///</summary>
	public delegate void ChuCongTyEventHandler(object sender, ChuCongTyEventArgs e);
	
	#region ChuCongTyComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ChuCongTyComparer : System.Collections.Generic.IComparer<ChuCongTy>
	{
		ChuCongTyColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ChuCongTyComparer"/> class.
        /// </summary>
		public ChuCongTyComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ChuCongTyComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ChuCongTyComparer(ChuCongTyColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="ChuCongTy"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="ChuCongTy"/> to compare.</param>
        /// <param name="b">The second <c>ChuCongTy</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ChuCongTy a, ChuCongTy b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ChuCongTy entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ChuCongTy a, ChuCongTy b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ChuCongTyColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ChuCongTyKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ChuCongTy"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ChuCongTyKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ChuCongTyKey class.
		/// </summary>
		public ChuCongTyKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ChuCongTyKey class.
		/// </summary>
		public ChuCongTyKey(ChuCongTyBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.IdChuCongTy = entity.IdChuCongTy;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ChuCongTyKey class.
		/// </summary>
		public ChuCongTyKey(System.Int64 idChuCongTy)
		{
			#region Init Properties

			this.IdChuCongTy = idChuCongTy;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ChuCongTyBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ChuCongTyBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the IdChuCongTy property
		private System.Int64 _idChuCongTy;
		
		/// <summary>
		/// Gets or sets the IdChuCongTy property.
		/// </summary>
		public System.Int64 IdChuCongTy
		{
			get { return _idChuCongTy; }
			set
			{
				if ( this.Entity != null )
					this.Entity.IdChuCongTy = value;
				
				_idChuCongTy = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				IdChuCongTy = ( values["IdChuCongTy"] != null ) ? (System.Int64) EntityUtil.ChangeType(values["IdChuCongTy"], typeof(System.Int64)) : (long)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("IdChuCongTy", IdChuCongTy);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("IdChuCongTy: {0}{1}",
								IdChuCongTy,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ChuCongTyColumn Enum
	
	/// <summary>
	/// Enumerate the ChuCongTy columns.
	/// </summary>
	[Serializable]
	public enum ChuCongTyColumn : int
	{
		/// <summary>
		/// IdChuCongTy : 
		/// </summary>
		[EnumTextValue("id_ChuCongTy")]
		[ColumnEnum("id_ChuCongTy", typeof(System.Int64), System.Data.DbType.Int64, true, true, false)]
		IdChuCongTy = 1,
		/// <summary>
		/// TenChuCongTy : 
		/// </summary>
		[EnumTextValue("TenChuCongTy")]
		[ColumnEnum("TenChuCongTy", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		TenChuCongTy = 2,
		/// <summary>
		/// TenCongTy : 
		/// </summary>
		[EnumTextValue("TenCongTy")]
		[ColumnEnum("TenCongTy", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		TenCongTy = 3,
		/// <summary>
		/// TenDangNhap : 
		/// </summary>
		[EnumTextValue("TenDangNhap")]
		[ColumnEnum("TenDangNhap", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		TenDangNhap = 4,
		/// <summary>
		/// Password : 
		/// </summary>
		[EnumTextValue("Password")]
		[ColumnEnum("Password", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Password = 5,
		/// <summary>
		/// DiaChi : 
		/// </summary>
		[EnumTextValue("DiaChi")]
		[ColumnEnum("DiaChi", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		DiaChi = 6,
		/// <summary>
		/// DienThoaiCd : 
		/// </summary>
		[EnumTextValue("DienThoaiCD")]
		[ColumnEnum("DienThoaiCD", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		DienThoaiCd = 7,
		/// <summary>
		/// DienThoaiDd : 
		/// </summary>
		[EnumTextValue("DienThoaiDD")]
		[ColumnEnum("DienThoaiDD", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		DienThoaiDd = 8,
		/// <summary>
		/// NgayTao : 
		/// </summary>
		[EnumTextValue("NgayTao")]
		[ColumnEnum("NgayTao", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		NgayTao = 9,
		/// <summary>
		/// NgayKetThuc : 
		/// </summary>
		[EnumTextValue("NgayKetThuc")]
		[ColumnEnum("NgayKetThuc", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		NgayKetThuc = 10,
		/// <summary>
		/// Flag : 
		/// </summary>
		[EnumTextValue("Flag")]
		[ColumnEnum("Flag", typeof(System.Byte), System.Data.DbType.Byte, false, false, true)]
		Flag = 11
	}//End enum

	#endregion ChuCongTyColumn Enum

} // end namespace
